<alloy builddate="2018-04-08T17:20:06.754Z">

<instance bitwidth="6" maxseq="4" command="Run show for 6 int, 1 Mesh, 6 Triangle, 6 Vertex" filename="/home/tristan/research/alloy/mesh/mesh.als">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="this/Mesh" ID="4" parentID="2">
   <atom label="Mesh$0"/>
</sig>

<field label="triangles" ID="5" parentID="4">
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$0"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$1"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$2"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$3"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$4"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$5"/> </tuple>
   <types> <type ID="4"/> <type ID="6"/> </types>
</field>

<field label="adj" ID="7" parentID="4">
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$0"/> <atom label="Triangle$4"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$0"/> <atom label="Triangle$5"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$1"/> <atom label="Triangle$2"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$1"/> <atom label="Triangle$3"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$2"/> <atom label="Triangle$1"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$2"/> <atom label="Triangle$3"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$2"/> <atom label="Triangle$5"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$3"/> <atom label="Triangle$1"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$3"/> <atom label="Triangle$2"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$3"/> <atom label="Triangle$4"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$4"/> <atom label="Triangle$0"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$4"/> <atom label="Triangle$3"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$5"/> <atom label="Triangle$0"/> </tuple>
   <tuple> <atom label="Mesh$0"/> <atom label="Triangle$5"/> <atom label="Triangle$2"/> </tuple>
   <types> <type ID="4"/> <type ID="6"/> <type ID="6"/> </types>
</field>

<sig label="this/Triangle" ID="6" parentID="2">
   <atom label="Triangle$0"/>
   <atom label="Triangle$1"/>
   <atom label="Triangle$2"/>
   <atom label="Triangle$3"/>
   <atom label="Triangle$4"/>
   <atom label="Triangle$5"/>
</sig>

<field label="edges" ID="8" parentID="6">
   <tuple> <atom label="Triangle$0"/> <atom label="Vertex$3"/> <atom label="Vertex$5"/> </tuple>
   <tuple> <atom label="Triangle$0"/> <atom label="Vertex$4"/> <atom label="Vertex$3"/> </tuple>
   <tuple> <atom label="Triangle$0"/> <atom label="Vertex$5"/> <atom label="Vertex$4"/> </tuple>
   <tuple> <atom label="Triangle$1"/> <atom label="Vertex$0"/> <atom label="Vertex$2"/> </tuple>
   <tuple> <atom label="Triangle$1"/> <atom label="Vertex$1"/> <atom label="Vertex$0"/> </tuple>
   <tuple> <atom label="Triangle$1"/> <atom label="Vertex$2"/> <atom label="Vertex$1"/> </tuple>
   <tuple> <atom label="Triangle$2"/> <atom label="Vertex$0"/> <atom label="Vertex$5"/> </tuple>
   <tuple> <atom label="Triangle$2"/> <atom label="Vertex$2"/> <atom label="Vertex$0"/> </tuple>
   <tuple> <atom label="Triangle$2"/> <atom label="Vertex$5"/> <atom label="Vertex$2"/> </tuple>
   <tuple> <atom label="Triangle$3"/> <atom label="Vertex$0"/> <atom label="Vertex$1"/> </tuple>
   <tuple> <atom label="Triangle$3"/> <atom label="Vertex$1"/> <atom label="Vertex$5"/> </tuple>
   <tuple> <atom label="Triangle$3"/> <atom label="Vertex$5"/> <atom label="Vertex$0"/> </tuple>
   <tuple> <atom label="Triangle$4"/> <atom label="Vertex$1"/> <atom label="Vertex$4"/> </tuple>
   <tuple> <atom label="Triangle$4"/> <atom label="Vertex$4"/> <atom label="Vertex$5"/> </tuple>
   <tuple> <atom label="Triangle$4"/> <atom label="Vertex$5"/> <atom label="Vertex$1"/> </tuple>
   <tuple> <atom label="Triangle$5"/> <atom label="Vertex$2"/> <atom label="Vertex$5"/> </tuple>
   <tuple> <atom label="Triangle$5"/> <atom label="Vertex$3"/> <atom label="Vertex$2"/> </tuple>
   <tuple> <atom label="Triangle$5"/> <atom label="Vertex$5"/> <atom label="Vertex$3"/> </tuple>
   <types> <type ID="6"/> <type ID="9"/> <type ID="9"/> </types>
</field>

<sig label="this/Vertex" ID="9" parentID="2">
   <atom label="Vertex$0"/>
   <atom label="Vertex$1"/>
   <atom label="Vertex$2"/>
   <atom label="Vertex$3"/>
   <atom label="Vertex$4"/>
   <atom label="Vertex$5"/>
</sig>

<sig label="univ" ID="2" builtin="yes">
</sig>

</instance>

<source filename="/home/tristan/research/alloy/mesh/mesh.als" content="module mesh&#x000a;&#x000a;/*&#x000a; * Model the topology of meshes that are made up of triangles and vertices&#x000a; *&#x000a; * Authors: John Baugh and Alper Altuntas&#x000a; * Date: August 8, 2017&#x000a; * Alloy Analyzer 4.2_2015-02-22 (build date: 2015-02-22 18:21 EST)&#x000a; *&#x000a; * For a detailed description, see:&#x000a; *&#x000a; *   Formal methods and finite element analysis of hurricane storm surge:&#x000a; *   A case study in software verification, Science of Computer Programming&#x000a; *&#x000a; *     =&gt; Section 3. Statics: Representing a mesh&#x000a; */&#x000a;&#x000a;open util/relation             -- dom, ran, symmetric, irreflexive&#x000a;&#x000a;sig Mesh {&#x000a;  triangles: some Triangle,&#x000a;  adj: Triangle -&gt; Triangle  &#x000a;}&#x000a;&#x000a;sig Triangle {&#x000a;  edges: Vertex -&gt; Vertex&#x000a;}&#x000a;&#x000a;sig Vertex {}&#x000a;&#x000a;-- every triangle appears in some mesh&#x000a;fact { all t: Triangle | t in Mesh.triangles }&#x000a;&#x000a;-- every vertex appears in some triangle&#x000a;fact { all v: Vertex | v in dom[Mesh.triangles.edges] }&#x000a;&#x000a;-- every triangle has 3 edges&#x000a;fact { all t: Triangle | #t.edges = 3 }&#x000a;&#x000a;-- the edge set of each triangle forms a ring&#x000a;fact { all t: Triangle | ring[t.edges] }&#x000a;&#x000a;-- the edge set e forms a ring&#x000a;pred ring [e: Vertex-&gt;Vertex] {&#x000a;  all v: dom[e] | one v.e and dom[e] in v.^e&#x000a;}&#x000a;&#x000a;-- The use of &quot;one v.e&quot; above ensures that each vertex has exactly one&#x000a;-- successor, so all we need to add for a ring is the constraint that all&#x000a;-- vertices are reachable from any vertex by following edges repeatedly.&#x000a;&#x000a;-- no two triangles in the same mesh can share the same edge&#x000a;fact { all m: Mesh | all disj t, t&apos;: m.triangles | no t.edges &amp; t&apos;.edges }&#x000a;&#x000a;-- triangles in the m.adj relation must be in the set m.triangles&#x000a;fact { all m: Mesh | dom[m.adj] + ran[m.adj] in m.triangles }&#x000a;&#x000a;-- properties of the dual of a mesh, viewing triangles as dual nodes&#x000a;fact {&#x000a;  all m: Mesh |&#x000a;    let r = m.adj, s = m.triangles |&#x000a;      symmetric[r] and irreflexive[r] and stronglyConnected[r, s]&#x000a;}&#x000a;&#x000a;-- A strongly connected digraph is a directed graph in which it is&#x000a;-- possible to reach any node starting from any other node by traversing&#x000a;-- edges in the direction(s) in which they point.&#x000a;&#x000a;pred stronglyConnected[r: univ -&gt; univ, s: set univ] {&#x000a;  all x, y: s | x in y.*r&#x000a;}&#x000a;&#x000a;-- Note in the above that stronglyConnected needs REFLEXIVE transitive&#x000a;-- closure, otherwise a mesh with one triangle is disallowed&#x000a;&#x000a;-- triangles that share a pair of incident vertices define the adj relation&#x000a;fact { all m: Mesh, t, t&apos;: m.triangles |&#x000a;          t in m.adj[t&apos;] iff one ~(t.edges) &amp; t&apos;.edges }&#x000a;&#x000a;-- the number of &quot;undirected&quot; edges (considering interior ones as half edges)&#x000a;fun undirectedEdges [m: Mesh]: Int {&#x000a;  minus[#m.triangles.edges, div[#m.adj, 2]]&#x000a;}&#x000a;&#x000a;-- Note in the above that the number of tuples in m.adj will equal the number&#x000a;-- of interior edges, or: #m.adj = #(~e &amp; e) where e = m.triangles.edges&#x000a;&#x000a;-- Euler&apos;s formula: T - 1 = E - V&#x000a;fact {&#x000a;  all m: Mesh |&#x000a;    let T = #m.triangles, E = undirectedEdges[m], V = #dom[m.triangles.edges] |&#x000a;      minus[T, 1] = minus[E, V]&#x000a;}&#x000a;&#x000a;/*&#x000a; *  Euler&apos;s formula for a simple closed polygon&#x000a; *&#x000a; *  Given a polygon that does not cross itself, we can triangulate the&#x000a; *  inside of the polygon into non-overlapping triangles such that any two&#x000a; *  triangles meet (if at all) either along a common edge, or at a common&#x000a; *  vertex. Suppose that there are T triangles, E edges, and V vertices;&#x000a; *  then Euler&apos;s formula for a polygon is T - E + V = 1.&#x000a; */&#x000a;&#x000a;-- a border vertex has exactly two border edges that are incident on it&#x000a;--   (a border edge has no anti-parallel mate)&#x000a;pred borderVertex [m: Mesh, v: Vertex] {&#x000a;  let e = m.triangles.edges | #symDiff[e.v, v.e] = 2&#x000a;}&#x000a;&#x000a;-- an interior vertex is one whose incident edges all have an anti-parallel&#x000a;--   mate&#x000a;pred interiorVertex [m: Mesh, v: Vertex] {&#x000a;  let e = m.triangles.edges | no symDiff[e.v, v.e]&#x000a;}&#x000a;&#x000a;-- symmetric difference of two sets&#x000a;fun symDiff [a, b: univ]: univ { (a + b) - (a &amp; b) }&#x000a;&#x000a;-----------------------------------------------------------------------------&#x000a;&#x000a;pred show {&#x000a;     #Mesh = 1&#x000a;     #Triangle = 6&#x000a;--   # Triangle = 1 produces 1 topology, 1 instance&#x000a;--              = 2 produces 1 topology, 3 instances&#x000a;--              = 3 produces 2 topologies, 12 instances&#x000a;--                    6 w/ 4 vertices, 6 w/ 5 vertices&#x000a;--     #Vertex = 6&#x000a;--     some t: Triangle | dom[t.edges] != ran[t.edges]&#x000a;}&#x000a;&#x000a;pred showMesh {&#x000a;  #Mesh = 1&#x000a;  #Triangle = 8&#x000a;  #Vertex = 9&#x000a;  some m: Mesh, a, b, c, d, e, f, g, h: Triangle {&#x000a;    m.adj[a] = b&#x000a;    m.adj[b] = {a} + {c} + {e}&#x000a;    m.adj[c] = {b} + {d}&#x000a;    m.adj[d] = {c} + {g}&#x000a;    m.adj[e] = {b} + {f}&#x000a;    m.adj[f] = {e} + {g}&#x000a;    m.adj[g] = {d} + {f} + {h}&#x000a;  }&#x000a;}&#x000a;&#x000a;run show for 1 Mesh, 6 Triangle, 6 Vertex, 6 int&#x000a;run showMesh for 1 Mesh, 8 Triangle, 9 Vertex, 6 int&#x000a;&#x000a;-- max integer for &quot;n int&quot; = 2^(n-1) - 1&#x000a;--    n = 10, max = 511&#x000a;--    n =  9, max = 255&#x000a;--    n =  8, max = 127&#x000a;--    n =  7, max =  63&#x000a;--    n =  6, max =  31&#x000a;--    n =  5, max =  15&#x000a;--    n =  4, max =   7&#x000a;&#x000a;-- In fun undirectedEdges we have #m.triangles.edges, so we need an int&#x000a;-- big enough to allow us to count these.  Ensuring that max is at least&#x000a;-- 3 * #Triangles is probably a good rule of thumb.&#x000a;&#x000a;-----------------------------------------------------------------------------&#x000a;&#x000a;-- at most two border edges for a vertex is already implied, but we&#x000a;-- can check to make sure that &quot;local cut points&quot; are disallowed&#x000a;&#x000a;assert NoCutPoints {&#x000a;  all m: Mesh, v: Vertex | borderVertex[m, v] or interiorVertex[m, v]&#x000a;}&#x000a;&#x000a;check NoCutPoints for 1 Mesh, 6 Triangle, 9 Vertex, 6 int&#x000a;&#x000a;/*&#x000a;Executing &quot;Check NoCutPoints for 6 int, 1 Mesh, 6 Triangle, 9 Vertex&quot;&#x000a;   Solver=lingeling(jni) Bitwidth=6 MaxSeq=4 SkolemDepth=1 Symmetry=20&#x000a;   44179 vars. 554 primary vars. 105263 clauses. 205ms.&#x000a;   No counterexample found. Assertion may be valid. 53390ms.&#x000a;   (about 53 sec)&#x000a;&#x000a;Executing &quot;Check NoCutPoints for 6 int, 1 Mesh, 7 Triangle, 10 Vertex&quot;&#x000a;   Solver=lingeling(jni) Bitwidth=6 MaxSeq=4 SkolemDepth=1 Symmetry=20&#x000a;   68213 vars. 785 primary vars. 162500 clauses. 203ms.&#x000a;   No counterexample found. Assertion may be valid. 441009ms.&#x000a;   (about 7 min 21 sec)&#x000a;*/&#x000a;&#x000a;-----------------------------------------------------------------------------&#x000a;&#x000a;/*&#x000a;   Comments on ring:&#x000a;&#x000a;   -- the edge set e forms a ring&#x000a;   pred ring [e: Vertex-&gt;Vertex] {&#x000a;     all v: dom[e] | one v.e and dom[e] in v.^e&#x000a;   }&#x000a;&#x000a;   without &quot;one v.e&quot; we might have, for instance, a triangle t0&#x000a;     with t0.edges = {v0-&gt;v0, v0-&gt;v1, v0-&gt;v2}&#x000a;     and v0.(t0.edges) = {v0, v1, v2}&#x000a;   without &quot;dom[e] in v.^e&quot; we might have, for instance, a triangle t0&#x000a;     with t0.edges = {v0-&gt;v1, v1-&gt;v0, v2-&gt;v2}&#x000a;     and v0.^(t0.edges) = {v0, v1}, v1.^(t0.edges) = {v0, v1},&#x000a;     and v2.^(t0.edges) = {v2}&#x000a;&#x000a;   As Jackson writes on p. 173 (tailored to our problem):&#x000a;&#x000a;   The vertices are to form a ring.  The use of &quot;one v.e&quot; ensures that&#x000a;   each vertex has exactly one successor, so all we need to add is the&#x000a;   constraint that all vertices are reachable from any vertex by&#x000a;   following edges repeatedly.&#x000a;*/&#x000a;"/>

<source filename="/$alloy4$/models/util/integer.als" content="module util/integer&#x000a;&#x000a;/*&#x000a; * A collection of utility functions for using Integers in Alloy.&#x000a; * Note that integer overflows are silently truncated to the current bitwidth&#x000a; * using the 2&apos;s complement arithmetic, unless the &quot;forbid overfows&quot; option is&#x000a; * turned on, in which case only models that don&apos;t have any overflows are &#x000a; * analyzed. &#x000a; */&#x000a;&#x000a;fun add  [n1, n2: Int] : Int { this/plus[n1, n2] }&#x000a;fun plus [n1, n2: Int] : Int { n1 fun/add n2 }&#x000a;&#x000a;fun sub   [n1, n2: Int] : Int { this/minus[n1, n2] }&#x000a;fun minus [n1, n2: Int] : Int { n1 fun/sub n2 }&#x000a;&#x000a;fun mul [n1, n2: Int] : Int { n1 fun/mul n2 }&#x000a;&#x000a;/**&#x000a; * Performs the division with &quot;round to zero&quot; semantics, except the following 3 cases&#x000a; * 1) if a is 0, then it returns 0&#x000a; * 2) else if b is 0, then it returns 1 if a is negative and -1 if a is positive&#x000a; * 3) else if a is the smallest negative integer, and b is -1, then it returns a&#x000a; */&#x000a;fun div [n1, n2: Int] : Int { n1 fun/div n2 }&#x000a;&#x000a;/** answer is defined to be the unique integer that satisfies &quot;a = ((a/b)*b) + remainder&quot; */&#x000a;fun rem [n1, n2: Int] : Int { n1 fun/rem n2 }&#x000a;&#x000a;/** negate */&#x000a;fun negate [n: Int] : Int { 0 fun/sub n }&#x000a;&#x000a;/** equal to */&#x000a;pred eq [n1, n2: Int] { int[n1] = int[n2] }&#x000a;&#x000a;/** greater than */&#x000a;pred gt [n1, n2: Int] { n1 &gt; n2 }&#x000a;&#x000a;/** less then */&#x000a;pred lt [n1, n2: Int] { n1 &lt; n2 }&#x000a;&#x000a;/** greater than or equal */&#x000a;pred gte [n1, n2: Int] { n1 &gt;= n2 }&#x000a;&#x000a;/** less than or equal */&#x000a;pred lte [n1, n2: Int] { n1 &lt;= n2 }&#x000a;&#x000a;/** integer is zero */&#x000a;pred zero [n: Int] { n = 0 }&#x000a;&#x000a;/** positive */&#x000a;pred pos  [n: Int] { n &gt; 0 }&#x000a;&#x000a;/** negative */&#x000a;pred neg  [n: Int] { n &lt; 0 }&#x000a;&#x000a;/** non-positive */&#x000a;pred nonpos [n: Int] { n &lt;= 0 }&#x000a;&#x000a;/** non-negative */&#x000a;pred nonneg [n: Int] { n &gt;= 0 }&#x000a;&#x000a;/** signum (aka sign or sgn) */&#x000a;fun signum [n: Int] : Int { n&lt;0 =&gt; (0 fun/sub 1) else (n&gt;0 =&gt; 1 else 0) }&#x000a;&#x000a;/**&#x000a; * returns the ith element (zero-based) from the set s&#x000a; * in the ordering of &apos;next&apos;, which is a linear ordering&#x000a; * relation like that provided by util/ordering&#x000a; */&#x000a;fun int2elem[i: Int, next: univ-&gt;univ, s: set univ] : lone s {&#x000a;  {e: s | #^next.e = int i }&#x000a;}&#x000a;&#x000a;/**&#x000a; * returns the index of the element (zero-based) in the&#x000a; * ordering of next, which is a linear ordering relation&#x000a; * like that provided by util/ordering&#x000a; */&#x000a;fun elem2int[e: univ, next: univ-&gt;univ] : lone Int {&#x000a;  Int[#^next.e]&#x000a;}&#x000a;&#x000a;/** returns the largest integer in the current bitwidth */&#x000a;fun max:one Int { fun/max }&#x000a;&#x000a;/** returns the smallest integer in the current bitwidth */&#x000a;fun min:one Int { fun/min }&#x000a;&#x000a;/** maps each integer (except max) to the integer after it */&#x000a;fun next:Int-&gt;Int { fun/next }&#x000a;&#x000a;/** maps each integer (except min) to the integer before it */&#x000a;fun prev:Int-&gt;Int { ~next }&#x000a;&#x000a;/** given a set of integers, return the largest element */&#x000a;fun max [es: set Int]: lone Int { es - es.^prev }&#x000a;&#x000a;/** given a set of integers, return the smallest element */&#x000a;fun min [es: set Int]: lone Int { es - es.^next }&#x000a;&#x000a;/** given an integer, return all integers prior to it */&#x000a;fun prevs [e: Int]: set Int { e.^prev }&#x000a;&#x000a;/** given an integer, return all integers following it */&#x000a;fun nexts [e: Int]: set Int { e.^next }&#x000a;&#x000a;/** returns the larger of the two integers */&#x000a;fun larger [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; b else a) }&#x000a;&#x000a;/** returns the smaller of the two integers */&#x000a;fun smaller [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; a else b) }&#x000a;"/>

<source filename="/$alloy4$/models/util/relation.als" content="module util/relation&#x000a;&#x000a;/*&#x000a; * Utilities for some common operations and constraints&#x000a; * on binary relations. The keyword &apos;univ&apos; represents the&#x000a; * top-level type, which all other types implicitly extend.&#x000a; * Therefore, all the functions and predicates in this model&#x000a; * may be applied to binary relations of any type.&#x000a; *&#x000a; * author: Greg Dennis&#x000a; */&#x000a;&#x000a;/** returns the domain of a binary relation */&#x000a;fun dom [r: univ-&gt;univ] : set (r.univ) { r.univ }&#x000a;&#x000a;/** returns the range of a binary relation */&#x000a;fun ran [r: univ-&gt;univ] : set (univ.r) { univ.r }&#x000a;&#x000a;/** r is total over the domain s */&#x000a;pred total [r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | some x.r&#x000a;}&#x000a;&#x000a;/** r is a partial function over the domain s */&#x000a;pred functional [r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | lone x.r&#x000a;}&#x000a;&#x000a;/** r is a total function over the domain s */&#x000a;pred function [r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | one x.r&#x000a;}&#x000a;&#x000a;/** r is surjective over the codomain s */&#x000a;pred surjective [r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | some r.x&#x000a;}&#x000a;&#x000a;/** r is injective */&#x000a;pred injective [r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | lone r.x&#x000a;}&#x000a;&#x000a;/** r is bijective over the codomain s */&#x000a;pred bijective[r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | one r.x&#x000a;}&#x000a;&#x000a;/** r is a bijection over the domain d and the codomain c */&#x000a;pred bijection[r: univ-&gt;univ, d, c: set univ] {&#x000a;  function[r, d] &amp;&amp; bijective[r, c]&#x000a;}&#x000a;&#x000a;/** r is reflexive over the set s */&#x000a;pred reflexive [r: univ -&gt; univ, s: set univ] {s&lt;:iden in r}&#x000a;&#x000a;/** r is irreflexive */&#x000a;pred irreflexive [r: univ -&gt; univ] {no iden &amp; r}&#x000a;&#x000a;/** r is symmetric */&#x000a;pred symmetric [r: univ -&gt; univ] {~r in r}&#x000a;&#x000a;/** r is anti-symmetric */&#x000a;pred antisymmetric [r: univ -&gt; univ] {~r &amp; r in iden}&#x000a;&#x000a;/** r is transitive */&#x000a;pred transitive [r: univ -&gt; univ] {r.r in r}&#x000a;&#x000a;/** r is acyclic over the set s */&#x000a;pred acyclic[r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | x !in x.^r&#x000a;}&#x000a;&#x000a;/** r is complete over the set s */&#x000a;pred complete[r: univ-&gt;univ, s: univ] {&#x000a;  all x,y:s | (x!=y =&gt; x-&gt;y in (r + ~r))&#x000a;}&#x000a;&#x000a;/** r is a preorder (or a quasi-order) over the set s */&#x000a;pred preorder [r: univ -&gt; univ, s: set univ] {&#x000a;  reflexive[r, s]&#x000a;  transitive[r]&#x000a;}&#x000a;&#x000a;/** r is an equivalence relation over the set s */&#x000a;pred equivalence [r: univ-&gt;univ, s: set univ] {&#x000a;  preorder[r, s]&#x000a;  symmetric[r]&#x000a;}&#x000a;&#x000a;/** r is a partial order over the set s */&#x000a;pred partialOrder [r: univ -&gt; univ, s: set univ] {&#x000a;  preorder[r, s]&#x000a;  antisymmetric[r]&#x000a;}&#x000a;&#x000a;/** r is a total order over the set s */&#x000a;pred totalOrder [r: univ -&gt; univ, s: set univ] {&#x000a;  partialOrder[r, s]&#x000a;  complete[r, s]&#x000a;}&#x000a;"/>

</alloy>
