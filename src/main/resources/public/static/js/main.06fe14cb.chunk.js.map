{"version":3,"sources":["util/EventDispatcher.ts","sterling/SterlingConnection.ts","connections/AlloyConnection.ts","../../../alloy-js/graph-js/dist/layouts/static/StaticLayout.js","../../../alloy-js/graph-js/dist/layouts/static/CircleLayout.js","../../../alloy-js/graph-js/dist/types/util.js","../../../alloy-js/graph-js/dist/styles/ShapeStyle.js","../../../alloy-js/graph-js/dist/types/BBox.js","../../../alloy-js/graph-js/dist/renderers/Renderer.js","../../../alloy-js/graph-js/dist/renderers/shapes/ShapeRenderer.js","../../../alloy-js/graph-js/dist/renderers/shapes/RectangleRenderer.js","../../../alloy-js/graph-js/dist/layouts/static/DagreLayout.js","../../../alloy-js/graph-js/dist/EventDispatcher.js","../../../alloy-js/graph-js/dist/managers/DragManager.js","../../../alloy-js/graph-js/dist/labellers/LinkLabeller.js","../../../alloy-js/graph-js/dist/renderers/labels/LinkLabelRenderer.js","../../../alloy-js/graph-js/dist/renderers/links/LinkRenderer.js","../../../alloy-js/graph-js/dist/renderers/links/NaturalCurveRenderer.js","../../../alloy-js/graph-js/dist/paths/Path.js","../../../alloy-js/graph-js/dist/paths/CubicBezier.js","../../../alloy-js/graph-js/dist/paths/Line.js","../../../alloy-js/graph-js/dist/paths/QuadraticBezier.js","../../../alloy-js/graph-js/dist/routers/LinkSet.js","../../../alloy-js/graph-js/dist/routers/Router.js","../../../alloy-js/graph-js/dist/routers/BundleRouter.js","../../../alloy-js/graph-js/dist/types/Point.js","../../../alloy-js/graph-js/dist/styles/LabelStyle.js","../../../alloy-js/graph-js/dist/styles/LinkStyle.js","../../../alloy-js/graph-js/dist/styles/StyleParsers.js","../../../alloy-js/graph-js/dist/managers/EdgeManager.js","../../../alloy-js/graph-js/dist/managers/HoverManager.js","../../../alloy-js/graph-js/dist/renderers/labels/LabelRenderer.js","../../../alloy-js/graph-js/dist/renderers/shapes/CircleRenderer.js","../../../alloy-js/graph-js/dist/managers/NodeManager.js","../../../alloy-js/graph-js/dist/renderers/AxesRenderer.js","../../../alloy-js/graph-js/dist/Graph.js","../../../alloy-js/graph-js/dist/layouts/static/GridLayout.js","../../../alloy-js/graph-js/dist/layouts/static/RowLayout.js","sterling/sterlingSlice.ts","features/graph/drawer-views/data/dataSlice.ts","features/graph/util.ts","features/table/TableTags.tsx","features/graph/drawer-views/edge-styling/edgeTypes.ts","features/graph/drawer-views/edge-styling/edgeStylingSlice.ts","features/graph/drawer-views/graph-settings/graphSettingsSlice.ts","features/graph/drawer-views/layout/layoutSlice.ts","features/graph/drawer-views/node-styling/nodeTypes.ts","features/graph/drawer-views/node-styling/nodeStylingSlice.ts","features/table/tableTypes.ts","features/graph/graphSlice.ts","features/source/sourceSlice.ts","features/table/tableSlice.ts","rootReducer.ts","evaluator/Evaluator.ts","evaluator/EvaluatorTable.tsx","evaluator/EvaluatorView.tsx","sterling/SterlingDrawer.tsx","features/graph/drawer-components/QuickColorScheme.tsx","features/graph/drawer-views/edge-styling/QuickEdgeStyling.tsx","features/graph/drawer-views/graph-settings/EdgeSettings.tsx","features/graph/drawer-views/layout/Layout.tsx","features/graph/drawer-views/layout/ZoomSettings.tsx","features/graph/drawer-views/node-styling/QuickNodeStyling.tsx","features/graph/drawer-views/projections/Projections.tsx","features/graph/drawer-components/LabelStyler.tsx","features/graph/graphTypes.ts","features/graph/drawer-views/edge-styling/components/LinkStyler.tsx","features/graph/drawer-views/edge-styling/EdgeStyling.tsx","features/graph/drawer-views/graph-settings/GraphSettings.tsx","features/graph/drawer-views/layout/QuickLayout.tsx","features/graph/drawer-views/node-styling/components/ShapeSelector.tsx","features/graph/drawer-views/node-styling/components/ShapeStyler.tsx","features/graph/drawer-views/node-styling/NodeStyling.tsx","features/graph/GraphDrawer.tsx","features/graph/GraphStage.tsx","features/graph/graphData.ts","features/nav/components/ViewGroup.tsx","features/nav/StaticNavbar.tsx","features/nav/SterlingNavbar.tsx","features/source/SourceDrawer.tsx","features/source/SourceStage.tsx","features/table/drawer-components/AlloyMultiSelect.tsx","features/table/TableDrawer.tsx","features/table/stage-components/PopoverRow.tsx","features/table/stage-components/SkolemListPopover.tsx","features/table/TableStage.tsx","features/table/stage-components/SignatureHTMLTable.tsx","features/table/stage-components/FieldHTMLTable.tsx","features/table/stage-components/SkolemHTMLTable.tsx","sterling/SterlingKeyboard.tsx","sterling/SterlingSidebar.tsx","sterling/SterlingStage.tsx","sterling/Sterling.tsx","serviceWorker.ts","index.tsx"],"names":["EventDispatcher","_listeners","type","listener","undefined","this","listeners","indexOf","push","event","listenerarray","target","slice","forEach","callback","call","index","splice","SterlingConnection","url","_url","_ws","_auto_reconnect","_auto_reconnect_interval","_connected","_heartbeat_count","_heartbeat_id","_heartbeat_interval","_heartbeat_latency","_heartbeat_timestamp","onclose","close","_initializeConnection","_request","id","expression","data","dispatchEvent","performance","now","length","instance","AlloyInstance","e","message","WebSocket","onopen","_onOpen","bind","_onClose","onerror","_onError","onmessage","_onMessage","_reconnect","_resetHeartbeat","header","_handlePong","_handleEval","_handleXML","send","window","setTimeout","request","clearTimeout","_ping","AlloyConnection","location","hostname","port","StaticLayout","CircleLayout","_cx","_cy","_radius","graph","bbox","boundingBox","cx","cy","w","Math","abs","h","r","min","nodes","a","PI","node","x","cos","y","sin","arguments","radius","defaults","source","paths","_defaults","pick","cloneDeep","applyShapeStyleAttributes","cloneShapeStyle","style","clone","isCircleStyle","_cloneCircleStyle","isRectangleStyle","_cloneRectangleStyle","BBox","xmin","ymin","xmax","ymax","_xmin","Infinity","_ymin","_xmax","_ymax","other","_expandBBox","_expandPoint","bounds","x0","y0","x1","y1","Renderer","ShapeRenderer","_nodes","fill","defaultFill","stroke","defaultStroke","strokeDash","defaultStrokeDash","strokeWidth","defaultStrokeWidth","points","context","setLineDash","lineWidth","fillStyle","strokeStyle","TWOPI","PI3","RectangleRenderer","_width","defaultWidth","_height","defaultHeight","width","height","nx","ny","expand","scale","t","b","l","angle","tana","tan","atan","atan2","region","save","beginPath","w2","h2","point","px","py","rect","round","_doStrokeAndFill","restore","max","h4","dx","dy","DagreLayout","options","g","graphlib","Graph","multigraph","setGraph","nodesep","ranksep","rankdir","setDefaultEdgeLabel","setNode","label","edges","edge","setEdge","layout","nodemap","Map","map","props","hw","hh","get","n","DragManager","canvas","_canvas","_quadtree","d3","_renderers","_transform","_x","_y","drag","container","subject","_dragSubject","on","_dragStart","_drag","_dragEnd","extent","renderers","renderer","reduce","acc","cur","concat","set","addAll","transform","mouse","worldx","invertX","worldy","invertY","invert","add","remove","datum","groups","_findNode","find","shape","containsPoint","k","LinkLabeller","_linkMap","_placement","links","placement","_buildCenterLabels","_buildJoinLabels","_buildSpreadLabels","np","dt","link","labels","filter","isDefined","text","buildCombinedLabel","_bezierBounds","join","LinkLabelRenderer","_links","_color","defaultColor","_font","defaultFont","_highlight","color","font","includes","textAlign","textBaseline","path","p","pointAlong","fillText","LinkRenderer","lowlightStroke","lowlightWidth","_doFill","PI6","NaturalCurveRenderer","_arrowheadSize","partition","highlight","lowlight","_drawLinks","hx","hy","_doStrokeHighlight","_drawArrows","_doFillHighlight","lx","ly","_doStroke","arrowx","arrowy","_doStrokeLowlight","_doFillLowlight","ng","xs","ys","sz","i","moveTo","lineTo","closePath","apply","angleAlong","arrow","_arrow","Path","transformed","CubicBezier","start","c1","c2","end","_start","_c1","_c2","_end","s","u","bezierCurveTo","Line","QuadraticBezier","control","_control","c","quadraticCurveTo","LinkSet","_all","_map","_ind","_addDirectional","_addNonDirectional","_getNonDirectional","targetmap","group","has","len","sourcemap","calculateShapeOffset","center","offset","intersect","BundleRouter","_collapse","_factor","srcPoint","trgPoint","sourceShape","_nodeShapeMap","targetShape","selfLoopPoints","_bundleMap","_bundlePoints","_calcalateShapeOffsets","factor","size","sqrt","distance","rt","sign","bx","by","percent","_edgeLinkMap","_groupLinkMap","_linkEdgeMap","_nameNodeMap","_nodeEdgeMap","_ungroupedLinks","Array","from","keys","shapes","buildNodeEdgeMap","ungrouped","allgroups","values","collapsed","edgegroup","edgemap","collapseEdges","edgeset","groupname","sourceName","targetName","updateLinks","calculateLink","recalculated","Set","allBetween","applyLabelStyleAttributes","cloneLabelStyle","applyLinkStyleAttributes","cloneLinkStyle","parseLabelStyles","labelStyles","nest","parent","children","child","_isEdgeStyle","_isNodeStyle","getData","parseShapeStyles","shapeStyles","applyShapeAttributes","EdgeManager","_labeller","_router","_edges","_shapes","_styles","_labels","getPlacement","setPlacement","styles","setData","_recalculateRenderers","updateLinksConnectedTo","setLinkMap","getLinkMap","update","linkset","getLinks","labelstyle","labelRenderer","delete","defaultRenderer","remaining","groupnames","linkStyles","parseLinkStyles","linkStyle","linkRenderer","getUngroupedLinks","_calculateLinkRenderers","_calculateLabelRenderers","HoverManager","_delaunay","_lastLink","_maxDist","_numsections","_onHover","render","linkEdgeMap","Delaunay","x2","y2","d","dist","_distance","_setHover","LabelRenderer","match","parseInt","base","floor","CircleRenderer","defaultRadius","d2","arc","NodeManager","Error","_calculateShapeRenderers","labelStyle","available","extractNodes","shapeStyle","shapeRenderer","names","name","AxesRenderer","_axesVisible","_gridVisible","_axisColor","_gridColor","_ticks","_ticksize","_labelpadding","_gridPattern","visible","align","xrange","range","yrange","ratio","tickoffset","xticks","ticks","yticks","tick","ty","lineDashOffset","tx","toString","value","_context","_axes","_linkLabelRenderers","_linkRenderers","_nodeLabelRenderers","_nodeRenderers","_zoom","_nodeManager","_edgeManager","_dragManager","_hoverManager","_initializeCanvas","axesVisible","router","getRouter","setFactor","getFactor","setLabelPlacement","getLabelPlacement","setEdges","getEdges","setStyles","gridVisible","getComputedStyle","getPropertyValue","_setDimensions","_updateHoverManager","_render","nodeobjs","setNodes","shapeRenderers","setShapes","_updateDragManager","linkRenderers","labelRenderers","transition","duration","translate","getContext","scaleExtent","_zoomed","addEventListener","updateEdgesConnectedTo","resize","requestAnimationFrame","rescaleX","rescaleY","clearRect","setAttribute","domain","setTransform","_setTransform","GridLayout","row","col","RowLayout","_groups","ngroup","sterlingSlice","createSlice","initialState","mainView","tableView","graphView","sourceView","welcomeDescription","welcomeTitle","reducers","setGraphView","state","action","payload","setInstance","setMainView","setSourceView","setTableView","actions","asAttribute","atoms","collapseProjections","projections","unprojected","List","dataSlice","addProjection","sig","atom","nextAtom","atm","idx","nxt","previousAtom","removeProjection","sort","alphabetical","setProjection","toggleAsAttribute","field","curr","toggleCollapseProjections","extraReducers","build","addCase","univ","signatures","subTypes","fields","skolems","arity","both","withMutations","findAtom","item","list","localeCompare","POPPER_MODIFIERS","preventOverflow","enabled","hide","COLOR_SCHEMES","specifier","colors","hex","schemes","DEFAULT_COLORS","background","backgroundGradient","strings","foreground","rgb","SignatureTag","signature","nameFunction","className","React","FieldTag","tokens","split","FieldTagEls","icon","iconSize","padding","SkolemTag","skolem","buildFieldTree","hideEmpty","tuples","Fields","Skolems","collapseEdgeStyle","collapseScheme","hideEmptyFields","selected","treeField","treeSkolem","edgeStylingSlice","clearAll","clearCurrent","collapseTreeNode","expandTreeNode","selectTreeNode","setColorScheme","newlink","newlabel","setLabelColor","setLabelSize","isNaN","setStroke","setStrokeWidth","toggleCollapseEdgeStyle","toggleCollapseScheme","toggleHideEmptyFields","builder","buildSkolemTree","defaultScheme","nextColor","graphSettingsSlice","bundleFactor","collapseEdgeSettings","collapseGraphSettings","edgeLabelPlacement","setBundleFactor","toggleAxesVisible","toggleCollapseEdgeSettings","toggleCollapseGraphSettings","toggleGridVisible","collapseLayout","collapseQuickLayout","collapseZoom","ranker","layoutSlice","setAlign","setNodeSep","setRankDir","setRanker","setRankSep","toggleCollapseLayout","toggleCollapseQuickLayout","toggleCollapseZoom","buildTypeTree","populate","HorizontalAlignment","LayoutDirection","SortDirection","SortMethod","TablesType","collapseNodeStyle","hideDisconnected","hideEmptySets","nodeTree","nodeStylingSlice","next","newshape","setFill","setHeight","setRadius","setShape","convertToShape","setWidth","toggleCollapseNodeStyle","toggleHideDisconnected","toggleHideEmptySets","graphSlice","combineReducers","reducer","sourceSlice","setSelected","SKOLEM_COLORS","buildNameFunction","removeThis","replace","buildSortFunction","method","Size","sorting","sizeSort","direction","Ascending","Alphabetical","alphabeticalSort","Group","groupSort","alignment","Left","collapseData","collapseTables","dataSelected","highlightSkolems","layoutDirection","Row","removeBuiltin","removeEmpty","primarySort","Descending","secondarySort","skolemColors","tablesType","All","tableSlice","clearSelectedData","deselectData","Select","selectData","setAlignment","setLayoutDirection","setSort","setTableTypes","toggleCollapseData","toggleCollapseTables","toggleHighlightSkolems","toggleRemoveBuiltin","toggleRemoveEmpty","toggleRemoveThis","sterlingApp","Evaluator","connection","_connection","_expressions","_pending","_parse","_nextid","error","result","response","trim","_setPending","requestEvaluateExpression","EvaluatorTable","parseResult","key","j","EvaluatorView","_botRef","_textRef","_onDown","textarea","current","selectionStart","history","count","setState","_onEnter","evaluator","evaluate","_onKeyDown","preventDefault","_onUp","_onPending","_setActive","_onReady","expressions","_scrollDown","bottom","scrollIntoView","active","readOnly","_setText","createRef","table","prevProps","prevState","removeEventListener","SuccessIcon","ErrorIcon","content","hoverOpenDelay","intent","Intent","PRIMARY","small","minimal","onClick","clear","title","DANGER","NONE","isTableable","description","ref","autoComplete","placeholder","spellCheck","onKeyDown","Component","SterlingDrawer","Section","collapseIcon","toUpperCase","onToggle","isOpen","keepChildrenMounted","QuickColorScheme","flexWrap","maxHeight","overflow","scheme","margin","minWidth","minHeight","mapDispatch","connector","connect","collapse","LABEL_PLACEMENT_OPTIONS","inline","allowNumericCharactersOnly","minorStepSize","stepSize","majorStepSize","onValueChange","onChange","ALIGN_OPTIONS","DIRECTION_OPTIONS","RANKER_OPTIONS","Object","assign","zoomToHome","zoomToFit","toArray","projection","Fragment","ellipsize","hasBackdrop","modifiers","position","Position","BOTTOM","usePortal","wrapperTagName","vertical","LabelStyler","_","strVal","onChangeSize","onChangeColor","LEFT","backgroundColor","triangle","mapTreeToNodes","tree","childNodes","isExpanded","isSelected","hasCaret","LinkStyler","onChangeStroke","onChangeStrokeWidth","attr","labelColor","labelSize","fieldTree","skolemTree","isempty","hasskolem","trees","hideFld","secondaryLabel","contents","onNodeClick","onNodeCollapse","onNodeExpand","alignIndicator","Alignment","RIGHT","checked","CircleProps","onSetRadius","RectangleProps","onSetWidth","onSetHeight","ShapeSelector","onSetShape","valueToShape","ShapeStyler","onChangeFill","contentClassName","view","DEFAULT_EDGE_STYLES","DEFAULT_NODE_STYLES","edgeLabels","nodeLabels","settings","NODE_CACHE","_ref","_update","common","isBuiltin","batoms","anyInCommon","toStyle","styletree","existingNodes","nodeCache","attributes","_projections","IMap","project","hasAtoms","edgeFields","isAttribute","labelFields","edgeSkolems","labelSkolems","connected","buildEdge","tuple","middle","labelMap","addLabel","paren","expressionType","joined","projectedAtoms","types","projectable","some","every","AlloyTuple","typeHierarchy","generateGraph","nodeStyles","_buildNodeStyles","edgeStyles","_buildEdgeStyles","Classes","MINIMAL","large","SterlingNavbar","command","fileref","fetchExample","fetch","then","catch","fixedToTop","display","files","file","reader","FileReader","readAsText","rightIcon","click","_requestNext","requestNextInstance","ready","disabled","SourcePlaceholder","alignText","sources","filename","pop","STYLE","githubGist","SyntaxHighlighter","registerLanguage","case_insensitive","keywords","contains","COMMENT","begin","relevance","welcome","language","showLineNumbers","AlloySelect","MultiSelect","ofType","highlightText","query","lastIndex","words","word","escapeRegExpChars","regexp","RegExp","exec","before","rest","AlloyMultiSelect","_filterItem","toLowerCase","_isItemSelected","itemsSelected","_onRemoveTag","tag","onDeselectItem","_onSelectItem","onSelectItem","_renderItem","matchesPredicate","_renderSignature","_renderField","_renderSkolem","_renderList","sigs","items","flds","skls","alpha","builtinSort","renderedSigs","renderItem","renderedFlds","renderedSkls","ulRef","itemsParentRef","labelElement","handleClick","_renderTag","_tagProps","itemType","clearButton","onClearSelectedItems","sortItems","itemPredicate","itemRenderer","itemListRenderer","onItemSelect","popoverProps","resetOnSelect","scrollToActiveItem","selectedItems","tagInputProps","onRemove","rightElement","tagProps","tagRenderer","zIndex","currentTarget","selectedValue","Signatures","Column","Center","Right","PopoverRow","_buildShadowStyle","thickness","_onMouseEnter","_onMouseLeave","Manager","Reference","onMouseEnter","onMouseLeave","boxShadow","Popper","data-placement","SkolemListPopover","getAlignClass","getLayoutClass","secondSort","filtering","keepSignatures","keepFields","keepSkolems","pass","removeBuiltins","removeEmptys","removeSkolems","elevation","buildTableHeader","bordered","condensed","striped","SignatureHTMLTable","FieldHTMLTable","SkolemHTMLTable","keyMap","TOGGLE_AXES","TOGGLE_GRID","VIEW_GRAPH","VIEW_SOURCE","VIEW_TABLE","ZOOM_TO_FIT","ZOOM_TO_HOME","_handlers","handlers","SidebarButton","GraphSidebar","TableSidebar","SourceSidebar","mainview","evalActive","SterlingStage","FocusStyleManager","onlyShowFocusOnTabs","_evaluator","_evaluatorView","_getDrawer","_getNavbar","_getStage","requestCurrentInstance","_resize","drawerOpen","onResize","defaultSize","minSize","maxSize","Boolean","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.06fe14cb.chunk.js","sourcesContent":["export interface Event {\n    type: string,\n    [key: string]: any\n}\n\nclass EventDispatcher {\n\n    private _listeners?: {[key: string]: ((event: any) => void)[]};\n\n    addEventListener (type: string, listener: (event: any) => void): this {\n\n        if (this._listeners === undefined) this._listeners = {};\n\n        const listeners = this._listeners;\n\n        if (listeners[type] === undefined) {\n            listeners[type] = [];\n        }\n\n        if (listeners[type].indexOf(listener) === -1) {\n            listeners[type].push(listener);\n        }\n\n        return this;\n\n    }\n\n    dispatchEvent (event: Event): this {\n\n        if (this._listeners === undefined) return this;\n\n        const listenerarray = this._listeners[event.type];\n\n        if (listenerarray !== undefined) {\n\n            event.target = this;\n\n            const arraycopy = listenerarray.slice();\n\n            arraycopy.forEach(callback => {\n                callback.call(this, event);\n            });\n\n        }\n\n        return this;\n\n    }\n\n    hasEventListener (type: string, listener: (event: any) => void): boolean {\n\n        if (this._listeners === undefined) return false;\n\n        const listeners = this._listeners;\n\n        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\n    }\n\n    removeEventListener (type: string, listener: (event: any) => void): this {\n\n        if (this._listeners === undefined) return this;\n\n        const listenerarray = this._listeners[type];\n\n        if (listenerarray !== undefined) {\n            const index = listenerarray.indexOf(listener);\n            if (index !== -1) {\n                listenerarray.splice(index, 1);\n            }\n        }\n\n        return this;\n\n    }\n\n}\n\nexport {\n    EventDispatcher\n}\n","import { AlloyInstance } from 'alloy-ts';\nimport { EventDispatcher } from '../util/EventDispatcher';\n\n\n/**\n * Events dispatched by a SterlingConnectiong:\n *   connect: connection established\n *   disconnect: connection lost\n *   error: an error occurred\n *   eval: a response from the evaluator\n *   instance: a new instance received\n */\nabstract class SterlingConnection extends EventDispatcher {\n\n    protected _url: string;\n    protected _ws: WebSocket | null;\n\n    private _auto_reconnect: boolean;\n    private _auto_reconnect_interval: number;\n    private _connected: boolean;\n\n    _heartbeat_count: number;\n    _heartbeat_id: number;\n    _heartbeat_interval: number;\n    _heartbeat_latency: DOMHighResTimeStamp;\n    _heartbeat_timestamp: DOMHighResTimeStamp;\n\n    protected constructor (url: string) {\n\n        super();\n\n        this._url = url;\n        this._ws = null;\n\n        this._auto_reconnect = false;\n        this._auto_reconnect_interval = 5000;\n        this._connected = false;\n\n        this._heartbeat_count = 0;\n        this._heartbeat_id = 0;\n        this._heartbeat_interval = 15000;\n        this._heartbeat_latency = 0;\n        this._heartbeat_timestamp = 0;\n\n    }\n\n    /**\n     * Establish a connection with a data provider\n     */\n    connect (): void {\n\n        if (this._ws) {\n            this._ws.onclose = null;\n            this._ws.close();\n        }\n\n        this._initializeConnection();\n\n    }\n\n    requestCurrentInstance (): boolean {\n\n        return this._request('current');\n\n    }\n\n    requestEvaluateExpression (id: number, expression: string): boolean {\n\n        return this._request(`EVL:${id}:${expression}`);\n\n    }\n\n    requestNextInstance (): boolean {\n\n        return this._request('next');\n\n    }\n\n    private _handleEval (data: string): void {\n\n        this.dispatchEvent({\n            type: 'eval',\n            data: data\n        });\n\n    }\n\n    private _handlePong (): void {\n\n        this._heartbeat_latency += performance.now() - this._heartbeat_timestamp;\n        this._heartbeat_count += 1;\n\n    }\n\n    private _handleXML (data: string): void {\n\n        if (data.length) {\n            try {\n                this.dispatchEvent({\n                    type: 'instance',\n                    instance: new AlloyInstance(data)\n                });\n            } catch (e) {\n                this.dispatchEvent({\n                    type: 'error',\n                    message: 'Invalid instance data'\n                });\n            }\n        }\n\n    }\n\n    private _initializeConnection () {\n\n        this._ws = new WebSocket(this._url);\n        this._ws.onopen = this._onOpen.bind(this);\n        this._ws.onclose = this._onClose.bind(this);\n        this._ws.onerror = this._onError.bind(this);\n        this._ws.onmessage = this._onMessage.bind(this);\n\n    }\n\n    private _onClose (e: Event): void {\n\n        this._connected = false;\n        this._ws = null;\n        if (this._auto_reconnect) this._reconnect();\n        this.dispatchEvent({ type: 'disconnect' });\n\n    }\n\n    private _onError (e: Event): void {\n\n        this.dispatchEvent({ type: 'error' });\n\n    }\n\n    private _onMessage (e: MessageEvent): void {\n\n        this._resetHeartbeat();\n        let header = e.data.slice(0, 4);\n        let data = e.data.slice(4);\n        switch (header) {\n            case 'pong':\n                this._handlePong();\n                break;\n            case 'EVL:':\n                this._handleEval(data);\n                break;\n            case 'XML:':\n                this._handleXML(data);\n                break;\n            default:\n                this.dispatchEvent({\n                    type: 'error',\n                    message: `Unknown response header: ${header}`\n                });\n                break;\n        }\n\n    }\n\n    private _onOpen (e: Event): void {\n\n        this._connected = true;\n        this._resetHeartbeat();\n        this.dispatchEvent({ type: 'connect' });\n\n    }\n\n    private _ping () {\n\n        if (this._ws) {\n            this._heartbeat_timestamp = performance.now();\n            this._ws.send('ping');\n        }\n\n    }\n\n    private _reconnect (): void {\n\n        window.setTimeout(this._initializeConnection.bind(this), this._auto_reconnect_interval);\n\n    }\n\n    private _request (request: string): boolean {\n\n        return this._connected && this._ws\n            ? (this._ws.send(request), true)\n            : false;\n\n    }\n\n    private _resetHeartbeat (): void {\n\n        clearTimeout(this._heartbeat_id);\n        this._heartbeat_id = window.setTimeout(this._ping.bind(this), this._heartbeat_interval);\n\n    }\n\n}\n\nexport {\n    SterlingConnection\n};\n","import { SterlingConnection } from '../sterling/SterlingConnection';\n\nclass AlloyConnection extends SterlingConnection {\n\n    constructor () {\n\n        super('ws://' + window.location.hostname + ':' + window.location.port + '/alloy');\n\n    }\n\n}\n\nexport {\n    AlloyConnection\n};\n","class StaticLayout {\n}\nexport { StaticLayout };\n","import { StaticLayout } from './StaticLayout';\nclass CircleLayout extends StaticLayout {\n    constructor() {\n        super();\n        this._cx = 0;\n        this._cy = 0;\n        this._radius = 250;\n    }\n    apply(graph) {\n        const bbox = graph.boundingBox();\n        const cx = (bbox[1] + bbox[3]) / 2;\n        const cy = (bbox[0] + bbox[2]) / 2;\n        const w = Math.abs(bbox[1] - bbox[3]);\n        const h = Math.abs(bbox[0] - bbox[2]);\n        const r = 0.8 * Math.min(w, h) / 2;\n        const nodes = graph.nodes();\n        const a = 2 * Math.PI / nodes.length;\n        nodes.forEach((node, index) => {\n            node.x = cx + r * Math.cos(index * a);\n            node.y = cy + r * Math.sin(index * a);\n        });\n    }\n    cx(cx) {\n        return arguments.length\n            ? (this._cx = cx, this)\n            : this._cx;\n    }\n    cy(cy) {\n        return arguments.length\n            ? (this._cy = cy, this)\n            : this._cy;\n    }\n    radius(radius) {\n        return arguments.length\n            ? (this._radius = radius, this)\n            : this._radius;\n    }\n}\nexport { CircleLayout };\n","import { cloneDeep, defaults as _defaults, pick } from 'lodash';\nfunction equivalentStrokes(a, b) {\n    if (a === undefined && b === undefined)\n        return true;\n    if (a === undefined || b === undefined)\n        return false;\n    return a.length === b.length &&\n        a.every((value, index) => b[index] === value);\n}\nfunction defaults(target, source, paths) {\n    _defaults(target, pick(cloneDeep(source), paths));\n}\nexport { defaults, equivalentStrokes };\n","import { isEqual, pick } from 'lodash';\nimport { defaults } from '../types/util';\n/**\n * Lazily apply shape attributes to another shape style\n * @param source\n * @param target\n */\nfunction applyShapeAttributes(target, source) {\n    if (isCircleStyle(target) && isCircleStyle(source)) {\n        defaults(target, source, ['type', 'radius']);\n        return;\n    }\n    if (isRectangleStyle(target) && isRectangleStyle(source)) {\n        defaults(target, source, ['type', 'width', 'height']);\n        return;\n    }\n    if (!target.type) {\n        if (isCircleStyle(source)) {\n            defaults(target, source, ['type', 'radius']);\n            return;\n        }\n        if (isRectangleStyle(source)) {\n            defaults(target, source, ['type', 'width', 'height']);\n            return;\n        }\n    }\n}\n/**\n * Lazily apply shape style attributes to another shape style.\n * @param target\n * @param source\n */\nfunction applyShapeStyleAttributes(target, source) {\n    defaults(target, source, ['fill', 'stroke', 'strokeDash', 'strokeWidth']);\n}\n/**\n * Create a clone of a shape style\n * @param style\n */\nfunction cloneShapeStyle(style) {\n    let clone = {};\n    if (isCircleStyle(style))\n        clone = _cloneCircleStyle(style);\n    if (isRectangleStyle(style))\n        clone = _cloneRectangleStyle(style);\n    applyShapeStyleAttributes(clone, style);\n    return clone;\n}\nfunction convertToShape(style, type) {\n    const next = {};\n    applyShapeStyleAttributes(next, style);\n    if (type === 'circle') {\n        next.type = 'circle';\n        next.radius = isRectangleStyle(style)\n            ? Math.min(style.width || 35, style.height || 35)\n            : 35;\n    }\n    if (type === 'rectangle') {\n        next.type = 'rectangle';\n        next.width = isCircleStyle(style)\n            ? (style.radius || 40) * 2\n            : 80;\n        next.height = isCircleStyle(style)\n            ? style.radius\n            : 40;\n    }\n    return next;\n}\n/**\n * Returns true if shape styles are equivalent, false otherwise\n * @param a\n * @param b\n */\nfunction equivalentShapeStyles(a, b) {\n    return isEqual(a, b);\n}\n/**\n * Returns true if style is a CircleStyle, false otherwise\n * @param style\n */\nfunction isCircleStyle(style) {\n    return style.type === 'circle';\n}\n/**\n * Returns true is style is a RectangleStyle, false otherwise\n * @param style\n */\nfunction isRectangleStyle(style) {\n    return style.type === 'rectangle';\n}\n/**\n * Clone a circle style (only attributes specific to circles)\n * @param style\n */\nfunction _cloneCircleStyle(style) {\n    return pick(style, ['type', 'radius']);\n}\n/**\n * Clone a rectangle style (only attributes specific to rectangles)\n * @param style\n */\nfunction _cloneRectangleStyle(style) {\n    return pick(style, ['type', 'width', 'height']);\n}\nexport { applyShapeAttributes, applyShapeStyleAttributes, cloneShapeStyle, convertToShape, equivalentShapeStyles, isCircleStyle, isRectangleStyle };\n","class BBox {\n    constructor(xmin, ymin, xmax, ymax) {\n        this._xmin = xmin !== undefined ? xmin : Infinity;\n        this._ymin = ymin !== undefined ? ymin : Infinity;\n        this._xmax = xmax !== undefined ? xmax : -Infinity;\n        this._ymax = ymax !== undefined ? ymax : -Infinity;\n    }\n    bounds() {\n        return [[this._xmin, this._ymin], [this._xmax, this._ymax]];\n    }\n    clone() {\n        return new BBox(this._xmin, this._ymin, this._xmax, this._ymax);\n    }\n    expand(other, y) {\n        if (other instanceof BBox)\n            return this._expandBBox(other);\n        if (y !== undefined)\n            this._expandPoint(other, y);\n        return this;\n    }\n    _expandBBox(other) {\n        const [[x0, y0], [x1, y1]] = other.bounds();\n        if (x0 < this._xmin)\n            this._xmin = x0;\n        if (y0 < this._ymin)\n            this._ymin = y0;\n        if (x1 > this._xmax)\n            this._xmax = x1;\n        if (y1 > this._ymax)\n            this._ymax = y1;\n        return this;\n    }\n    _expandPoint(x, y) {\n        if (x < this._xmin)\n            this._xmin = x;\n        if (x > this._xmax)\n            this._xmax = x;\n        if (y < this._ymin)\n            this._ymin = y;\n        if (y > this._ymax)\n            this._ymax = y;\n        return this;\n    }\n}\nexport { BBox };\n","class Renderer {\n}\nexport { Renderer };\n","import { Renderer } from '../Renderer';\nclass ShapeRenderer extends Renderer {\n    constructor(style) {\n        super();\n        this._nodes = [];\n        this.fill = ShapeRenderer.defaultFill;\n        this.stroke = ShapeRenderer.defaultStroke;\n        this.strokeDash = ShapeRenderer.defaultStrokeDash;\n        this.strokeWidth = ShapeRenderer.defaultStrokeWidth;\n        if (style) {\n            if (style.fill !== undefined)\n                this.fill = style.fill;\n            if (style.stroke !== undefined)\n                this.stroke = style.stroke;\n            if (style.strokeDash !== undefined)\n                this.strokeDash = style.strokeDash.slice();\n            if (style.strokeWidth !== undefined)\n                this.strokeWidth = style.strokeWidth;\n        }\n    }\n    nodes(points) {\n        return arguments.length\n            ? (this._nodes = points, this)\n            : this._nodes;\n    }\n    _doStrokeAndFill(context) {\n        if (this.strokeDash)\n            context.setLineDash(this.strokeDash);\n        if (this.strokeWidth !== null)\n            context.lineWidth = this.strokeWidth;\n        if (this.fill) {\n            context.fillStyle = this.fill;\n            context.fill();\n        }\n        if (this.stroke && this.strokeWidth) {\n            context.strokeStyle = this.stroke;\n            context.stroke();\n        }\n    }\n}\nShapeRenderer.defaultFill = 'white';\nShapeRenderer.defaultStroke = '#333333';\nShapeRenderer.defaultStrokeDash = null;\nShapeRenderer.defaultStrokeWidth = 1.5;\nexport { ShapeRenderer };\n","import { isRectangleStyle } from '../../styles/ShapeStyle';\nimport { BBox } from '../../types/BBox';\nimport { ShapeRenderer } from './ShapeRenderer';\nconst TWOPI = 2 * Math.PI;\nconst PI3 = Math.PI / 3;\nclass RectangleRenderer extends ShapeRenderer {\n    constructor(style) {\n        super(style);\n        this._width = RectangleRenderer.defaultWidth;\n        this._height = RectangleRenderer.defaultHeight;\n        if (style && isRectangleStyle(style)) {\n            if (style.width)\n                this._width = style.width;\n            if (style.height)\n                this._height = style.height;\n        }\n    }\n    bounds(x, y) {\n        const bounds = new BBox();\n        this._nodes.forEach(node => {\n            const nx = x(node.x);\n            const ny = y(node.y);\n            bounds.expand(nx + this._width / 2, ny + this._height / 2);\n            bounds.expand(nx - this._width / 2, ny - this._height / 2);\n        });\n        return bounds;\n    }\n    containsPoint(node, x, y, scale) {\n        scale = scale || 1;\n        const w = (this._width / scale) / 2;\n        const h = (this._height / scale) / 2;\n        const t = node.y + h;\n        const r = node.x + w;\n        const b = node.y - h;\n        const l = node.x - w;\n        return r >= x && x >= l && t >= y && y >= b;\n    }\n    height(height) {\n        return arguments.length\n            ? (this._height = +height, this)\n            : this._height;\n    }\n    intersect(angle) {\n        while (angle < -Math.PI)\n            angle += TWOPI;\n        while (angle > Math.PI)\n            angle -= TWOPI;\n        const tana = Math.tan(angle);\n        const r = region(angle, this._width, this._height);\n        let x = (r === 1 || r === 2) ? 1 : -1;\n        let y = (r === 3 || r === 4) ? -1 : 1;\n        if (r === 1 || r === 3) {\n            x *= this._width / 2;\n            y *= tana * this._width / 2;\n        }\n        else {\n            x *= this._height / (2 * tana);\n            y *= this._height / 2;\n        }\n        return {\n            x: x,\n            y: y\n        };\n    }\n    render(context, x, y) {\n        if (!this._nodes.length)\n            return;\n        context.save();\n        context.beginPath();\n        const w2 = this._width / 2;\n        const h2 = this._height / 2;\n        this._nodes.forEach(point => {\n            const px = x(point.x);\n            const py = y(point.y);\n            context.rect(Math.round(px - w2) - 0.5, Math.round(py - h2) - 0.5, this._width + 1, this._height + 1);\n        });\n        this._doStrokeAndFill(context);\n        context.restore();\n    }\n    selfLoopPoints(node) {\n        const nx = node.x;\n        const ny = node.y;\n        const w = Math.max(100, Math.min(this._width, 200));\n        const h = Math.min(this._height, 100);\n        const w2 = this._width / 2;\n        const h4 = h / 4;\n        return [{\n                x: nx,\n                y: ny,\n                dx: w2,\n                dy: -h4\n            }, {\n                x: nx,\n                y: ny,\n                dx: w2 + w * Math.cos(-PI3),\n                dy: h * Math.sin(-PI3)\n            }, {\n                x: nx,\n                y: ny,\n                dx: w2 + w * Math.cos(PI3),\n                dy: h * Math.sin(PI3)\n            }, {\n                x: nx,\n                y: ny,\n                dx: w2,\n                dy: h4\n            }];\n    }\n    width(width) {\n        return arguments.length\n            ? (this._width = +width, this)\n            : this._width;\n    }\n}\nRectangleRenderer.defaultWidth = 125;\nRectangleRenderer.defaultHeight = 60;\nfunction region(angle, width, height) {\n    const atan = Math.atan2(height, width);\n    if ((angle > -atan) && (angle <= atan))\n        return 1;\n    else if ((angle > atan) && (angle <= Math.PI - atan))\n        return 2;\n    else if ((angle > Math.PI - atan) || (angle <= -(Math.PI - atan)))\n        return 3;\n    else\n        return 4;\n}\nexport { RectangleRenderer };\n","import { graphlib, layout } from 'dagre';\nimport { RectangleRenderer } from '../../renderers/shapes/RectangleRenderer';\nimport { StaticLayout } from './StaticLayout';\nclass DagreLayout extends StaticLayout {\n    apply(graph, options) {\n        const g = new graphlib.Graph({ multigraph: true });\n        g.setGraph(options ? options : {\n            nodesep: 2 * RectangleRenderer.defaultWidth,\n            ranksep: 2 * RectangleRenderer.defaultWidth,\n            rankdir: 'BT'\n        });\n        g.setDefaultEdgeLabel(() => ({}));\n        graph.nodes().forEach(node => {\n            g.setNode(node.id, {\n                label: node.id,\n                width: RectangleRenderer.defaultWidth,\n                height: RectangleRenderer.defaultHeight\n            });\n        });\n        graph.edges().forEach(edge => {\n            g.setEdge(edge.source, edge.target);\n        });\n        layout(g);\n        const nodemap = new Map(graph.nodes().map(node => [node.id, node]));\n        const props = g.graph();\n        const hw = props.width ? props.width / 2 : 0;\n        const hh = props.height ? props.height / 2 : 0;\n        g.nodes().forEach(id => {\n            const node = nodemap.get(id);\n            if (node) {\n                const n = g.node(node.id);\n                node.x = n.x - hw;\n                node.y = n.y - hh;\n            }\n        });\n    }\n}\nexport { DagreLayout };\n","class EventDispatcher {\n    addEventListener(type, listener) {\n        if (this._listeners === undefined)\n            this._listeners = {};\n        const listeners = this._listeners;\n        if (listeners[type] === undefined) {\n            listeners[type] = [];\n        }\n        if (listeners[type].indexOf(listener) === -1) {\n            listeners[type].push(listener);\n        }\n        return this;\n    }\n    dispatchEvent(event) {\n        if (this._listeners === undefined)\n            return this;\n        const listenerarray = this._listeners[event.type];\n        if (listenerarray !== undefined) {\n            event.target = this;\n            const arraycopy = listenerarray.slice();\n            arraycopy.forEach(callback => {\n                callback.call(this, event);\n            });\n        }\n        return this;\n    }\n    hasEventListener(type, listener) {\n        if (this._listeners === undefined)\n            return false;\n        const listeners = this._listeners;\n        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n    }\n    removeEventListener(type, listener) {\n        if (this._listeners === undefined)\n            return this;\n        const listenerarray = this._listeners[type];\n        if (listenerarray !== undefined) {\n            const index = listenerarray.indexOf(listener);\n            if (index !== -1) {\n                listenerarray.splice(index, 1);\n            }\n        }\n        return this;\n    }\n}\nexport { EventDispatcher };\n","import * as d3 from 'd3';\nimport { EventDispatcher } from '../EventDispatcher';\nclass DragManager extends EventDispatcher {\n    constructor(canvas, x, y) {\n        super();\n        this._canvas = canvas;\n        this._quadtree = d3.quadtree();\n        this._renderers = new Map();\n        this._transform = d3.zoomIdentity;\n        this._x = x;\n        this._y = y;\n        const drag = d3.drag()\n            .container(canvas)\n            .subject(this._dragSubject.bind(this))\n            .on('start', this._dragStart.bind(this))\n            .on('drag', this._drag.bind(this))\n            .on('end', this._dragEnd.bind(this));\n        d3.select(canvas)\n            .call(drag);\n    }\n    boundingBox() {\n        return this._quadtree.extent();\n    }\n    setShapes(renderers) {\n        this._renderers = new Map();\n        const nodes = renderers\n            .map(renderer => renderer.nodes())\n            .reduce((acc, cur) => acc.concat(cur), []);\n        renderers.forEach(renderer => {\n            renderer.nodes().forEach(node => {\n                this._renderers.set(node, renderer);\n            });\n        });\n        this._quadtree = d3.quadtree()\n            .x(n => n.x)\n            .y(n => n.y)\n            .addAll(nodes);\n        return this;\n    }\n    setTransform(transform) {\n        this._transform = transform;\n        return this;\n    }\n    _drag() {\n        const mouse = d3.mouse(this._canvas);\n        const node = d3.event.subject;\n        const worldx = this._transform.invertX(mouse[0]);\n        const worldy = this._transform.invertY(mouse[1]);\n        const x = this._x.invert(worldx);\n        const y = this._y.invert(worldy);\n        node.x = x;\n        node.y = y;\n        this.dispatchEvent({\n            type: 'drag',\n            node: node\n        });\n    }\n    _dragEnd() {\n        this._quadtree.add(d3.event.subject);\n        this.dispatchEvent({\n            type: 'end'\n        });\n    }\n    _dragStart() {\n        this._quadtree.remove(d3.event.subject);\n    }\n    _dragSubject(datum, index, groups) {\n        const worldx = this._transform.invertX(d3.event.x);\n        const worldy = this._transform.invertY(d3.event.y);\n        const x = this._x.invert(worldx);\n        const y = this._y.invert(worldy);\n        const nearest = this._findNode(x, y);\n        return nearest || datum;\n    }\n    _findNode(x, y) {\n        const node = this._quadtree.find(x, y);\n        if (node) {\n            const shape = this._renderers.get(node);\n            if (shape && shape.containsPoint(node, x, y, this._transform.k)) {\n                return node;\n            }\n        }\n    }\n}\nexport { DragManager };\n","import { isDefined } from 'ts-is-present';\nimport { Labeller } from './Labeller';\nclass LinkLabeller extends Labeller {\n    constructor() {\n        super();\n        this._linkMap = new Map();\n        this._placement = 'spread';\n    }\n    getPlacement() {\n        return this._placement;\n    }\n    setLinkMap(links) {\n        this._linkMap = links;\n    }\n    setPlacement(placement) {\n        this._placement = placement;\n    }\n    update() {\n        if (this._placement === 'center')\n            this._buildCenterLabels();\n        if (this._placement === 'join')\n            this._buildJoinLabels();\n        if (this._placement === 'spread')\n            this._buildSpreadLabels();\n    }\n    _bezierBounds(np) {\n        if (np < 1)\n            return [0.5, 0];\n        const dt = Math.min(0.8 / (np - 1), 0.1);\n        const size = Math.min(dt * (np - 1), 0.8);\n        const b = 0.5 - size / 2;\n        return [b, dt];\n    }\n    _buildCenterLabels() {\n        this._linkMap.forEach((edges, link) => {\n            link.labels = edges\n                .filter(edge => isDefined(edge.label))\n                .map(edge => ({\n                t: 0.5,\n                text: edge.label\n            }));\n        });\n    }\n    _buildJoinLabels() {\n        this._linkMap.forEach((edges, link) => {\n            link.labels = [{\n                    text: buildCombinedLabel(edges),\n                    t: 0.5\n                }];\n        });\n    }\n    _buildSpreadLabels() {\n        this._linkMap.forEach((edges, link) => {\n            if (edges.length) {\n                const [b, dt] = this._bezierBounds(edges.length);\n                link.labels = edges\n                    .filter(edge => isDefined(edge.label))\n                    .map((edge, index) => ({\n                    t: b + index * dt,\n                    text: edge.label\n                }));\n            }\n        });\n    }\n}\nfunction buildCombinedLabel(edges) {\n    return edges\n        .map(edge => edge.label)\n        .filter(isDefined)\n        .join(', ');\n}\nexport { LinkLabeller };\n","import { Renderer } from '../Renderer';\nclass LinkLabelRenderer extends Renderer {\n    constructor(style) {\n        super();\n        this._links = [];\n        this._color = LinkLabelRenderer.defaultColor;\n        this._font = LinkLabelRenderer.defaultFont;\n        this._highlight = null;\n        if (style) {\n            if (style.color)\n                this._color = style.color;\n            if (style.font)\n                this._font = style.font;\n        }\n    }\n    highlight(link) {\n        this._highlight = link;\n    }\n    links(links) {\n        return arguments.length\n            ? (this._links = links, this)\n            : this._links;\n    }\n    render(context, x, y) {\n        if (!this._links.length)\n            return;\n        const links = this._highlight === null\n            ? this._links\n            : this._links.includes(this._highlight) ? [this._highlight] : [];\n        if (links.length) {\n            context.save();\n            context.beginPath();\n            if (this._color)\n                context.fillStyle = this._color;\n            context.font = this._font;\n            context.textAlign = 'center';\n            context.textBaseline = 'middle';\n            links.forEach(link => {\n                const path = link.path;\n                if (path) {\n                    link.labels.forEach(label => {\n                        const p = path.pointAlong(label.t, x, y);\n                        context.fillText(label.text, p.x, p.y);\n                    });\n                }\n            });\n        }\n    }\n}\nLinkLabelRenderer.defaultColor = '#333333';\nLinkLabelRenderer.defaultFont = '14px sans-serif';\nexport { LinkLabelRenderer };\n","import { Renderer } from '../Renderer';\nclass LinkRenderer extends Renderer {\n    constructor(style) {\n        super();\n        this._links = [];\n        this.stroke = '#333333';\n        this.strokeDash = null;\n        this.strokeWidth = null;\n        this.lowlightStroke = '#777777';\n        this.lowlightWidth = 1;\n        if (style) {\n            if (style.stroke)\n                this.stroke = style.stroke;\n            if (style.strokeDash)\n                this.strokeDash = style.strokeDash;\n            if (style.strokeWidth)\n                this.strokeWidth = style.strokeWidth;\n        }\n    }\n    links(links) {\n        return arguments.length\n            ? (this._links = links, this)\n            : this._links;\n    }\n    _doFill(context) {\n        if (this.stroke)\n            context.fillStyle = this.stroke;\n        context.fill();\n    }\n    _doFillHighlight(context) {\n        this._doFill(context);\n    }\n    _doFillLowlight(context) {\n        context.fillStyle = this.lowlightStroke;\n        context.fill();\n    }\n    _doStroke(context) {\n        if (this.strokeDash)\n            context.setLineDash(this.strokeDash);\n        if (this.strokeWidth)\n            context.lineWidth = this.strokeWidth;\n        context.strokeStyle = this.stroke;\n        context.stroke();\n    }\n    _doStrokeHighlight(context) {\n        if (this.strokeDash)\n            context.setLineDash(this.strokeDash);\n        if (this.strokeWidth)\n            context.lineWidth = 2 * this.strokeWidth;\n        context.strokeStyle = this.stroke;\n        context.stroke();\n    }\n    _doStrokeLowlight(context) {\n        if (this.strokeDash)\n            context.setLineDash(this.strokeDash);\n        if (this.strokeWidth)\n            context.lineWidth = this.strokeWidth;\n        context.strokeStyle = this.lowlightStroke;\n        context.lineWidth = this.lowlightWidth;\n        context.stroke();\n    }\n}\nexport { LinkRenderer };\n","import { LinkRenderer } from './LinkRenderer';\nimport { partition } from 'lodash';\nconst PI6 = Math.PI / 6;\nclass NaturalCurveRenderer extends LinkRenderer {\n    constructor(style) {\n        super(style);\n        this._arrowheadSize = 10;\n        this._highlight = null;\n    }\n    render(context, x, y) {\n        context.save();\n        const [highlight, lowlight] = partition(this._links, link => link === this._highlight);\n        if (highlight.length) {\n            context.beginPath();\n            const [hx, hy] = this._drawLinks(highlight, context, x, y);\n            this._doStrokeHighlight(context);\n            context.beginPath();\n            this._drawArrows(hx, hy, context);\n            this._doStrokeHighlight(context);\n            this._doFillHighlight(context);\n            context.beginPath();\n            const [lx, ly] = this._drawLinks(lowlight, context, x, y);\n            this._doStroke(context);\n            context.beginPath();\n            this._drawArrows(lx, ly, context);\n            this._doStroke(context);\n            this._doFill(context);\n        }\n        else {\n            context.beginPath();\n            const [arrowx, arrowy] = this._drawLinks(lowlight, context, x, y);\n            if (this._highlight === null) {\n                this._doStroke(context);\n                context.beginPath();\n                this._drawArrows(arrowx, arrowy, context);\n                this._doStroke(context);\n                this._doFill(context);\n            }\n            else {\n                this._doStrokeLowlight(context);\n                context.beginPath();\n                this._drawArrows(arrowx, arrowy, context);\n                this._doStrokeLowlight(context);\n                this._doFillLowlight(context);\n            }\n        }\n        context.restore();\n    }\n    highlight(link) {\n        this._highlight = link;\n    }\n    _arrow(x, y, ng, xs, ys) {\n        const sz = this._arrowheadSize;\n        xs.push(x - sz * Math.sin(ng - PI6));\n        ys.push(y - sz * Math.cos(ng - PI6));\n        xs.push(x);\n        ys.push(y);\n        xs.push(x - sz * Math.sin(ng + PI6));\n        ys.push(y - sz * Math.cos(ng + PI6));\n    }\n    _drawArrows(x, y, context) {\n        const n = x.length;\n        for (let i = 0; i < n; i += 3) {\n            context.moveTo(x[i], y[i]);\n            context.lineTo(x[i + 1], y[i + 1]);\n            context.lineTo(x[i + 2], y[i + 2]);\n            context.closePath();\n        }\n    }\n    _drawLinks(links, context, x, y) {\n        const arrowx = [];\n        const arrowy = [];\n        links.forEach(link => {\n            const path = link.path;\n            if (path) {\n                path.apply(context, x, y);\n                const angle = path.angleAlong(1, x, y) + Math.PI;\n                const arrow = path.pointAlong(1, x, y);\n                this._arrow(arrow.x, arrow.y, angle, arrowx, arrowy);\n            }\n        });\n        return [arrowx, arrowy];\n    }\n}\nexport { NaturalCurveRenderer };\n","class Path {\n}\nfunction transformed(p, x, y) {\n    return {\n        x: x(p.x) + (p.dx ? p.dx : 0),\n        y: y(p.y) + (p.dy ? p.dy : 0)\n    };\n}\nexport { Path, transformed };\n","import { Path, transformed } from './Path';\nclass CubicBezier extends Path {\n    constructor(start, c1, c2, end) {\n        super();\n        this._start = start;\n        this._c1 = c1;\n        this._c2 = c2;\n        this._end = end;\n    }\n    angleAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const c1 = transformed(this._c1, x, y);\n        const c2 = transformed(this._c2, x, y);\n        const e = transformed(this._end, x, y);\n        const u = 1 - t;\n        const dx = u * u * (c1.x - s.x) + 2 * t * u * (c2.x - c1.x) + t * t * (e.x - c2.x);\n        const dy = u * u * (c1.y - s.y) + 2 * t * u * (c2.y - c1.y) + t * t * (e.y - c2.y);\n        return Math.atan2(dx, dy) - Math.PI;\n    }\n    apply(context, x, y) {\n        const s = transformed(this._start, x, y);\n        const c1 = transformed(this._c1, x, y);\n        const c2 = transformed(this._c2, x, y);\n        const e = transformed(this._end, x, y);\n        context.moveTo(s.x, s.y);\n        context.bezierCurveTo(c1.x, c1.y, c2.x, c2.y, e.x, e.y);\n    }\n    pointAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const c1 = transformed(this._c1, x, y);\n        const c2 = transformed(this._c2, x, y);\n        const e = transformed(this._end, x, y);\n        const u = 1 - t;\n        return {\n            x: u * u * u * s.x + 3 * t * u * u * c1.x + 3 * t * t * u * c2.x + t * t * t * e.x,\n            y: u * u * u * s.y + 3 * t * u * u * c1.y + 3 * t * t * u * c2.y + t * t * t * e.y\n        };\n    }\n    points() {\n        return [this._start, this._c1, this._c2, this._end];\n    }\n}\nexport { CubicBezier };\n","import { Path, transformed } from './Path';\nclass Line extends Path {\n    constructor(start, end) {\n        super();\n        this._start = start;\n        this._end = end;\n    }\n    angleAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const e = transformed(this._end, x, y);\n        return Math.atan2(s.x - e.x, s.y - e.y);\n    }\n    apply(context, x, y) {\n        const s = transformed(this._start, x, y);\n        const e = transformed(this._end, x, y);\n        context.moveTo(s.x, s.y);\n        context.lineTo(e.x, e.y);\n    }\n    pointAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const e = transformed(this._end, x, y);\n        return {\n            x: s.x + t * (e.x - s.x),\n            y: s.y + t * (e.y - s.y)\n        };\n    }\n    points() {\n        return [this._start, this._end];\n    }\n}\nexport { Line };\n","import { Path, transformed } from './Path';\nclass QuadraticBezier extends Path {\n    constructor(start, control, end) {\n        super();\n        this._start = start;\n        this._control = control;\n        this._end = end;\n    }\n    angleAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const c = transformed(this._control, x, y);\n        const e = transformed(this._end, x, y);\n        const u = 1 - t;\n        const dx = 2 * u * (c.x - s.x) + 2 * t * (e.x - c.x);\n        const dy = 2 * u * (c.y - s.y) + 2 * t * (e.y - c.y);\n        return Math.atan2(dx, dy) - Math.PI;\n    }\n    apply(context, x, y) {\n        const s = transformed(this._start, x, y);\n        const c = transformed(this._control, x, y);\n        const e = transformed(this._end, x, y);\n        context.moveTo(s.x, s.y);\n        context.quadraticCurveTo(c.x, c.y, e.x, e.y);\n    }\n    pointAlong(t, x, y) {\n        const s = transformed(this._start, x, y);\n        const c = transformed(this._control, x, y);\n        const e = transformed(this._end, x, y);\n        const u = 1 - t;\n        return {\n            x: u * u * s.x + 2 * u * t * c.x + t * t * e.x,\n            y: u * u * s.y + 2 * u * t * c.y + t * t * e.y\n        };\n    }\n    points() {\n        return [this._start, this._control, this._end];\n    }\n}\nexport { QuadraticBezier };\n","class LinkSet {\n    constructor() {\n        this._all = new Map();\n        this._map = new Map();\n        this._ind = new Map();\n    }\n    /**\n     * Add a link that goes from source to target.\n     * @param source The source Node\n     * @param target The target Node\n     * @param link The link connecting the source and target nodes\n     */\n    add(source, target, link) {\n        this._addDirectional(source, target, link);\n        this._addNonDirectional(source, target, link);\n    }\n    /**\n     * Get all links between nodes a and b, regardless of direction\n     * @param a A Node\n     * @param b A node\n     */\n    allBetween(a, b) {\n        return this._getNonDirectional(a, b);\n    }\n    /**\n     * Get links beginning at source and ending at target\n     * @param source The source Node\n     * @param target The target Node\n     */\n    between(source, target) {\n        const targetmap = this._map.get(source);\n        return targetmap\n            ? targetmap.get(target) || []\n            : [];\n    }\n    /**\n     * Execute the provided callback for every link in the set\n     * @param callback The function to execute for each link. Arguments are:\n     * * link: The current link being processed\n     * * source: The source Node\n     * * target: The target Node\n     * * group: All link\n     */\n    forEach(callback) {\n        this._map.forEach((targetmap, source) => {\n            targetmap.forEach((links, target) => {\n                const group = this._getNonDirectional(source, target);\n                links.forEach(link => callback(link, source, target, group));\n            });\n        });\n    }\n    /**\n     * Get the index of this link among all links that connect the same\n     * two nodes. Indices are signed to indicate direction groups. Returns\n     * undefined if link is not in set.\n     * @param link The link\n     */\n    indexOf(link) {\n        return this._ind.get(link);\n    }\n    _addDirectional(source, target, link) {\n        if (!this._map.has(source))\n            this._map.set(source, new Map());\n        const targetmap = this._map.get(source);\n        if (!targetmap.has(target))\n            targetmap.set(target, []);\n        targetmap.get(target).push(link);\n    }\n    _addNonDirectional(source, target, link) {\n        // Look for source -> target -> links\n        if (this._all.has(source)) {\n            const targetmap = this._all.get(source);\n            if (!targetmap.has(target))\n                targetmap.set(target, []);\n            const len = targetmap.get(target).push(link);\n            this._ind.set(link, len - 1);\n            return;\n        }\n        // Look for target -> source -> links\n        if (this._all.has(target)) {\n            const sourcemap = this._all.get(target);\n            if (!sourcemap.has(source))\n                sourcemap.set(source, []);\n            const len = sourcemap.get(source).push(link);\n            this._ind.set(link, 1 - len);\n            return;\n        }\n        // Neither exists, so create source -> target -> links\n        this._all.set(source, new Map([[target, [link]]]));\n        this._ind.set(link, 0);\n    }\n    _getNonDirectional(source, target) {\n        if (this._all.has(source)) {\n            const targetmap = this._all.get(source);\n            if (targetmap.has(target)) {\n                return targetmap.get(target);\n            }\n        }\n        if (this._all.has(target)) {\n            const sourcemap = this._all.get(target);\n            if (sourcemap.has(source)) {\n                return sourcemap.get(source);\n            }\n        }\n        return [];\n    }\n}\nexport { LinkSet };\n","import { isDefined } from 'ts-is-present';\nimport { LinkSet } from './LinkSet';\nclass Router {\n    constructor() {\n        this._bundleMap = new LinkSet();\n        this._edgeLinkMap = new Map();\n        this._groupLinkMap = new Map();\n        this._linkEdgeMap = new Map();\n        this._nameNodeMap = new Map();\n        this._nodeEdgeMap = new Map();\n        this._ungroupedLinks = [];\n        this._collapse = true;\n        this._nodeShapeMap = new Map();\n    }\n    /**\n     * Get all links in the provided groups. If no groups are provided, all\n     * links are returned.\n     * @param groups An array of group names\n     */\n    getLinks(groups) {\n        if (groups) {\n            return groups\n                .map(group => this._groupLinkMap.get(group))\n                .filter(isDefined)\n                .reduce((acc, cur) => acc.concat(cur), []);\n        }\n        return Array.from(this._linkEdgeMap.keys());\n    }\n    /**\n     * Get a map of links to edge arrays. A single link can be used to represent\n     * multiple edges, and this map can be used to determine which edges are\n     * represented by any given link.\n     */\n    getLinkMap() {\n        return this._linkEdgeMap;\n    }\n    /**\n     * Get all links whose edges are not part of a group\n     */\n    getUngroupedLinks() {\n        return this._ungroupedLinks;\n    }\n    /**\n     * Set the nodes and edges and recalculate all links.\n     * @param nodes An array of nodes\n     * @param edges An array of edges\n     * @param shapes The shape renderers used to render the nodes\n     */\n    setData(nodes, edges, shapes) {\n        // Create a map of node names to nodes\n        this._bundleMap = new LinkSet();\n        this._edgeLinkMap = new Map();\n        this._groupLinkMap = new Map();\n        this._linkEdgeMap = new Map();\n        this._nameNodeMap = new Map(nodes.map(node => [node.id, node]));\n        this._nodeEdgeMap = buildNodeEdgeMap(this._nameNodeMap, edges);\n        this._ungroupedLinks = [];\n        // Create the map of nodes to shapes, which subclasses will\n        // likely need when calculating routes\n        this._nodeShapeMap = new Map();\n        shapes.forEach(shape => shape.nodes().forEach(node => this._nodeShapeMap.set(node, shape)));\n        // Place edges into groups that represent collapsed edges\n        const collapsed = this._collapse ? collapseEdges(edges) : edges.map(edge => [edge]);\n        // Create a single link for each set of edges\n        collapsed.forEach((edgeset) => {\n            if (edgeset.length) {\n                const groupname = edgeset[0].group;\n                const sourceName = edgeset[0].source;\n                const targetName = edgeset[0].target;\n                const source = this._nameNodeMap.get(sourceName);\n                const target = this._nameNodeMap.get(targetName);\n                if (source && target) {\n                    // Create the link (initially empty)\n                    const link = {\n                        path: undefined,\n                        labels: []\n                    };\n                    // Save the link -> edgeset\n                    this._linkEdgeMap.set(link, edgeset);\n                    // Save the edge -> link\n                    edgeset.forEach(edge => {\n                        this._edgeLinkMap.set(edge, link);\n                    });\n                    // Save to bundle map\n                    this._bundleMap.add(source, target, link);\n                    // Save to group\n                    if (groupname) {\n                        if (!this._groupLinkMap.has(groupname))\n                            this._groupLinkMap.set(groupname, []);\n                        this._groupLinkMap.get(groupname).push(link);\n                    }\n                    else {\n                        this._ungroupedLinks.push(link);\n                    }\n                }\n            }\n        });\n        this.updateLinks();\n    }\n    /**\n     * Calculate all links\n     */\n    updateLinks() {\n        this._bundleMap.forEach(this.calculateLink.bind(this));\n    }\n    /**\n     * Calculate links connected to the given node. Returns the array of links\n     * that were recalculated.\n     * @param node A node\n     */\n    updateLinksConnectedTo(node) {\n        // Get the set of edges that connect to the node\n        const edges = this._nodeEdgeMap.get(node);\n        if (edges) {\n            const recalculated = new Set();\n            edges.forEach(edge => {\n                const link = this._edgeLinkMap.get(edge);\n                if (link && !recalculated.has(link)) {\n                    const source = this._nameNodeMap.get(edge.source);\n                    const target = this._nameNodeMap.get(edge.target);\n                    if (source && target) {\n                        const group = this._bundleMap.allBetween(source, target);\n                        this.calculateLink(link, source, target, group);\n                    }\n                    recalculated.add(link);\n                }\n            });\n            return Array.from(recalculated);\n        }\n        return [];\n    }\n    /**\n     * Calculate the pixel offsets for the first and last points of a link.\n     * These offsets place links (the origins and arrowheads) at the edges\n     * of the shapes rather than the centers.\n     * @param link The link to process\n     * @param source The source point shape renderer\n     * @param target The target point shape renderer\n     * @private\n     */\n    _calcalateShapeOffsets(link, source, target) {\n        const points = link.path ? link.path.points() : [];\n        if (points.length < 2)\n            return;\n        if (source) {\n            const src = points[0];\n            const nxt = points[1];\n            calculateShapeOffset(src, nxt, source);\n        }\n        if (target) {\n            const trg = points[points.length - 1];\n            const prv = points[points.length - 2];\n            calculateShapeOffset(trg, prv, target);\n        }\n    }\n}\nfunction buildNodeEdgeMap(nodes, edges) {\n    const map = new Map();\n    edges.forEach(edge => {\n        const source = nodes.get(edge.source);\n        const target = nodes.get(edge.target);\n        if (source && target) {\n            if (!map.has(source))\n                map.set(source, []);\n            if (!map.has(target))\n                map.set(target, []);\n            map.get(source).push(edge);\n            map.get(target).push(edge);\n        }\n    });\n    return map;\n}\nfunction calculateShapeOffset(center, other, shape) {\n    const ng = Math.atan2(center.y - other.y, other.x - center.x);\n    const offset = shape.intersect(ng);\n    center.dx = offset.x;\n    center.dy = offset.y;\n}\nfunction collapseEdges(edges) {\n    const groups = new Map();\n    const ungrouped = [];\n    // Place edges into groups\n    edges.forEach(edge => {\n        if (edge.group) {\n            if (!groups.has(edge.group))\n                groups.set(edge.group, []);\n            groups.get(edge.group).push(edge);\n        }\n        else {\n            ungrouped.push(edge);\n        }\n    });\n    // For each group, collapse edges that have the same source and target\n    const allgroups = [ungrouped, ...Array.from(groups.values())];\n    const collapsed = [];\n    allgroups.forEach(edgegroup => {\n        const edgemap = new Map();\n        edgegroup.forEach(edge => {\n            const id = edge.source + edge.target;\n            if (!edgemap.has(id))\n                edgemap.set(id, []);\n            edgemap.get(id).push(edge);\n        });\n        collapsed.push(...Array.from(edgemap.values()));\n    });\n    return collapsed;\n}\nexport { Router };\n","import { CubicBezier } from '../paths/CubicBezier';\nimport { Line } from '../paths/Line';\nimport { QuadraticBezier } from '../paths/QuadraticBezier';\nimport { distance } from '../types/Point';\nimport { Router } from './Router';\nclass BundleRouter extends Router {\n    constructor() {\n        super();\n        this._collapse = true;\n        this._factor = 0.25;\n    }\n    calculateLink(link, source, target, group) {\n        const srcPoint = {\n            x: source.x,\n            y: source.y\n        };\n        const trgPoint = {\n            x: target.x,\n            y: target.y\n        };\n        const sourceShape = this._nodeShapeMap.get(source);\n        const targetShape = this._nodeShapeMap.get(target);\n        if (source === target && sourceShape) {\n            const points = sourceShape.selfLoopPoints(source);\n            link.path = new CubicBezier(points[0], points[1], points[2], points[3]);\n        }\n        else {\n            const index = this._bundleMap.indexOf(link);\n            const points = index !== undefined && group.length > 1\n                ? this._bundlePoints(srcPoint, trgPoint, index, group.length)\n                : [srcPoint, trgPoint];\n            if (points.length === 2) {\n                link.path = new Line(points[0], points[1]);\n            }\n            if (points.length === 3) {\n                link.path = new QuadraticBezier(points[0], points[1], points[2]);\n            }\n            this._calcalateShapeOffsets(link, sourceShape, targetShape);\n        }\n    }\n    getFactor() {\n        return this._factor;\n    }\n    setFactor(factor) {\n        this._factor = factor;\n    }\n    _bundlePoints(source, target, index, length) {\n        if (this._factor < 0.005)\n            return [source, target];\n        // Calculate the bundle width based on distance between source and target nodes\n        const size = this._factor * distance(source, target);\n        // Calculate perpendicular angle\n        let rt = Math.sign(index) || 1;\n        let ng = Math.atan2(target.y - source.y, target.x - source.x) + rt * Math.PI / 2;\n        // Calculate center point\n        const cx = (source.x + target.x) / 2;\n        const cy = (source.y + target.y) / 2;\n        // Calculate \"bottom\" point\n        const bx = cx + (size / 2) * Math.cos(ng);\n        const by = cy + (size / 2) * Math.sin(ng);\n        // Flip the angle by 180 degrees\n        ng -= Math.PI;\n        // Translate based on index percentage\n        const percent = Math.abs(index) / (length - 1);\n        const mid = {\n            x: bx + percent * size * Math.cos(ng),\n            y: by + percent * size * Math.sin(ng)\n        };\n        return [source, mid, target];\n    }\n}\nexport { BundleRouter };\n","function distance(a, b) {\n    const x = b.x - a.x;\n    const y = b.y - a.y;\n    return Math.sqrt(x * x + y * y);\n}\nexport { distance };\n","import { isEqual } from 'lodash';\nimport { defaults } from '../types/util';\n/**\n * Lazily apply style attributes to another label style\n * @param source\n * @param target\n */\nfunction applyLabelStyleAttributes(target, source) {\n    defaults(target, source, ['font', 'color']);\n}\n/**\n * Create a clone of a label style\n * @param style\n */\nfunction cloneLabelStyle(style) {\n    const clone = {};\n    applyLabelStyleAttributes(clone, style);\n    return clone;\n}\n/**\n * Returns true if the styles are equivalent, false otherwise\n * @param a\n * @param b\n */\nfunction equivalentLabelStyles(a, b) {\n    return isEqual(a, b);\n}\nexport { applyLabelStyleAttributes, cloneLabelStyle, equivalentLabelStyles };\n","import { equivalentStrokes } from '../types/util';\nimport { defaults } from '../types/util';\nfunction applyLinkStyleAttributes(target, source) {\n    defaults(target, source, ['stroke', 'strokeDash', 'strokeWidth']);\n}\nfunction cloneLinkStyle(style) {\n    const clone = {};\n    applyLinkStyleAttributes(clone, style);\n    return clone;\n}\nfunction equivalentLinkStyles(a, b) {\n    return a.stroke === b.stroke\n        && equivalentStrokes(a.strokeDash, b.strokeDash)\n        && a.strokeWidth === b.strokeWidth;\n}\nexport { applyLinkStyleAttributes, cloneLinkStyle, equivalentLinkStyles };\n","import { applyLabelStyleAttributes, cloneLabelStyle } from './LabelStyle';\nimport { applyLinkStyleAttributes, cloneLinkStyle } from './LinkStyle';\nimport { applyShapeAttributes, applyShapeStyleAttributes, cloneShapeStyle } from './ShapeStyle';\n// Helper functions\nfunction _isEdgeStyle(style) {\n    return style.groups !== undefined;\n}\nfunction _isNodeStyle(style) {\n    return style.nodes !== undefined;\n}\n// Parsing functions\nfunction parseLabelStyles(style) {\n    const labelStyles = new Map();\n    const getData = (style) => {\n        if (_isEdgeStyle(style))\n            return style.groups;\n        if (_isNodeStyle(style))\n            return style.nodes;\n        return [];\n    };\n    const nest = (style, parent) => {\n        let clone = cloneLabelStyle(style.label || {});\n        if (parent)\n            applyLabelStyleAttributes(clone, parent);\n        if (style.children) {\n            style.children.forEach((child) => {\n                nest(child, clone);\n            });\n        }\n        labelStyles.set(clone, getData(style));\n    };\n    nest(style);\n    return labelStyles;\n}\nfunction parseLinkStyles(style) {\n    const linkStyles = new Map();\n    const nest = (style, parent) => {\n        let clone = cloneLinkStyle(style.link || {});\n        if (parent)\n            applyLinkStyleAttributes(clone, parent);\n        if (style.children) {\n            style.children.forEach(child => {\n                nest(child, clone);\n            });\n        }\n        linkStyles.set(clone, style.groups);\n    };\n    nest(style);\n    return linkStyles;\n}\nfunction parseShapeStyles(style) {\n    const shapeStyles = new Map();\n    const nest = (style, parent) => {\n        let clone = cloneShapeStyle(style.shape || {});\n        if (parent) {\n            applyShapeAttributes(clone, parent);\n            applyShapeStyleAttributes(clone, parent);\n        }\n        if (style.children) {\n            style.children.forEach(child => {\n                nest(child, clone);\n            });\n        }\n        shapeStyles.set(clone, style.nodes);\n    };\n    nest(style);\n    return shapeStyles;\n}\nexport { parseLabelStyles, parseLinkStyles, parseShapeStyles };\n","import { LinkLabeller } from '../labellers/LinkLabeller';\nimport { LinkLabelRenderer } from '../renderers/labels/LinkLabelRenderer';\nimport { NaturalCurveRenderer } from '../renderers/links/NaturalCurveRenderer';\nimport { BundleRouter } from '../routers/BundleRouter';\nimport { parseLabelStyles, parseLinkStyles } from '../styles/StyleParsers';\nclass EdgeManager {\n    constructor() {\n        this._labeller = new LinkLabeller();\n        this._router = new BundleRouter();\n        this._nodes = [];\n        this._edges = [];\n        this._shapes = [];\n        this._styles = [];\n        this._links = [];\n        this._labels = [];\n    }\n    getEdges() {\n        return this._edges;\n    }\n    getLabelPlacement() {\n        return this._labeller.getPlacement();\n    }\n    getRouter() {\n        return this._router;\n    }\n    labelRenderers() {\n        return this._labels;\n    }\n    linkRenderers() {\n        return this._links;\n    }\n    setEdges(edges) {\n        this._edges = edges;\n        return this;\n    }\n    setLabelPlacement(placement) {\n        this._labeller.setPlacement(placement);\n        return this;\n    }\n    setNodes(nodes) {\n        this._nodes = nodes;\n        return this;\n    }\n    setShapes(shapes) {\n        this._shapes = shapes;\n        return this;\n    }\n    setStyles(styles) {\n        this._styles = styles;\n        return this;\n    }\n    update() {\n        // Reroute links\n        this._router.setData(this._nodes, this._edges, this._shapes);\n        // Recalculate renderers\n        this._recalculateRenderers();\n    }\n    updateEdgesConnectedTo(node) {\n        this._router.updateLinksConnectedTo(node);\n    }\n    _calculateLabelRenderers() {\n        // Recalculate label placement\n        this._labeller.setLinkMap(this._router.getLinkMap());\n        this._labeller.update();\n        // An array to store renderers\n        const renderers = [];\n        // Create a set of all links\n        const linkset = new Set(this._router.getLinks());\n        // Flatten styles and build renderers\n        this._styles.forEach(style => {\n            parseLabelStyles(style).forEach((groups, labelstyle) => {\n                // Create the renderer\n                const labelRenderer = new LinkLabelRenderer(labelstyle);\n                // Get the combined list of links in all groups this\n                // renderer is responsible for\n                const links = this._router.getLinks(groups);\n                // Remove these links from the link set\n                links.forEach(link => linkset.delete(link));\n                // Set the links for this renderer\n                labelRenderer.links(links);\n                // Add to the list of renderers\n                renderers.push(labelRenderer);\n            });\n        });\n        // Create a default renderer for links not yet assigned\n        if (linkset.size > 0) {\n            const defaultRenderer = new LinkLabelRenderer();\n            const remaining = Array.from(linkset.values());\n            defaultRenderer.links(remaining);\n            renderers.push(defaultRenderer);\n        }\n        return renderers;\n    }\n    _calculateLinkRenderers() {\n        // An array to store renderers\n        const renderers = [];\n        // Create a set of all group names in order to keep track of groups\n        // that have been assigned to a renderer\n        const groupnames = new Set();\n        this._edges.forEach(edge => {\n            if (edge.group)\n                groupnames.add(edge.group);\n        });\n        // Flatten styles and build renderers\n        this._styles.forEach(style => {\n            parseLinkStyles(style).forEach((groups, linkStyle) => {\n                // Create the renderer\n                const linkRenderer = new NaturalCurveRenderer(linkStyle);\n                // Get the links associated with these groups\n                const links = this._router.getLinks(groups);\n                // Assign the links to the renderer\n                linkRenderer.links(links);\n                // Add the renderer to the list\n                renderers.push(linkRenderer);\n                // Remove groups from set of group names\n                groups.forEach(group => groupnames.delete(group));\n            });\n        });\n        // Create a default renderer for links that are not part of a\n        // styling or whose group does not have a style defined\n        const defaultRenderer = new NaturalCurveRenderer();\n        const links = this._router\n            .getLinks(Array.from(groupnames))\n            .concat(this._router.getUngroupedLinks());\n        defaultRenderer.links(links);\n        renderers.push(defaultRenderer);\n        return renderers;\n    }\n    _recalculateRenderers() {\n        // Create new renderers\n        this._links = this._calculateLinkRenderers();\n        this._labels = this._calculateLabelRenderers();\n    }\n}\nexport { EdgeManager };\n","import * as d3 from 'd3';\nimport { Delaunay } from 'd3-delaunay';\nimport { EventDispatcher } from '../EventDispatcher';\nclass HoverManager extends EventDispatcher {\n    constructor(canvas, x, y) {\n        super();\n        this._canvas = canvas;\n        this._delaunay = null;\n        this._links = [];\n        this._transform = d3.zoomIdentity;\n        this._x = x;\n        this._y = y;\n        this._lastLink = null;\n        this._maxDist = 25;\n        this._numsections = 25;\n        d3.select(this._canvas)\n            .on('mousemove', this._onHover.bind(this));\n    }\n    render(context) {\n        if (this._delaunay) {\n            context.save();\n            this._delaunay.render(context);\n            context.strokeStyle = 'red';\n            context.lineWidth = 2;\n            context.stroke();\n            context.restore();\n        }\n    }\n    setData(linkEdgeMap) {\n        // Array of points\n        const points = [];\n        this._links = [];\n        // Create a bunch of control points for each link\n        for (let link of linkEdgeMap.keys()) {\n            const path = link.path;\n            if (path) {\n                const p = 1 / this._numsections;\n                for (let i = 0; i <= this._numsections; ++i) {\n                    points.push(path.pointAlong(p * i, this._x, this._y));\n                    this._links.push(link);\n                }\n            }\n        }\n        // Create the triangulation\n        this._delaunay = Delaunay.from(points, p => p.x, p => p.y);\n        return this;\n    }\n    setTransform(transform) {\n        this._transform = transform;\n        return this;\n    }\n    _distance(x, y, path) {\n        let min = Infinity;\n        for (let i = 0; i <= this._numsections; ++i) {\n            const p = path.pointAlong(i / this._numsections, this._x, this._y);\n            const d = distanceSq(x, y, p.x, p.y);\n            if (d < min)\n                min = d;\n        }\n        return Math.sqrt(min);\n    }\n    _onHover() {\n        const mouse = d3.mouse(this._canvas);\n        const worldx = this._transform.invertX(mouse[0]);\n        const worldy = this._transform.invertY(mouse[1]);\n        if (this._delaunay) {\n            const index = this._delaunay.find(worldx, worldy);\n            if (index < this._links.length) {\n                const link = this._links[index];\n                const path = link.path;\n                const dist = this._distance(worldx, worldy, path);\n                this._setHover(link, dist);\n            }\n        }\n    }\n    _setHover(link, distance) {\n        if (distance < this._maxDist) {\n            if (link !== this._lastLink) {\n                this._lastLink = link;\n                this.dispatchEvent({\n                    type: 'hover',\n                    link: link\n                });\n            }\n        }\n        else {\n            if (this._lastLink !== null) {\n                this._lastLink = null;\n                this.dispatchEvent({\n                    type: 'hover',\n                    link: null\n                });\n            }\n        }\n    }\n}\nfunction distanceSq(x1, y1, x2, y2) {\n    return (x2 - x1) ** 2 + (y2 - y1) ** 2;\n}\nexport { HoverManager };\n","import { Renderer } from '../Renderer';\nclass LabelRenderer extends Renderer {\n    constructor(style) {\n        super();\n        this._nodes = [];\n        this.color = LabelRenderer.defaultColor;\n        this.font = LabelRenderer.defaultFont;\n        if (style) {\n            if (style.color)\n                this.color = style.color;\n            if (style.font)\n                this.font = style.font;\n        }\n    }\n    nodes(points) {\n        return arguments.length\n            ? (this._nodes = points, this)\n            : this._nodes;\n    }\n    render(context, x, y) {\n        if (!this._nodes.length)\n            return;\n        context.save();\n        context.beginPath();\n        if (this.color)\n            context.fillStyle = this.color;\n        context.font = this.font;\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        this._nodes.forEach(node => {\n            if (!node.labels) {\n                context.fillText(node.id, x(node.x) + (node.dx ? node.dx : 0), y(node.y) + (node.dy ? node.dy : 0));\n            }\n            else {\n                const match = this.font.match(/(\\d*)px/);\n                const size = match ? match.length > 1 ? parseInt(match[1]) : 12 : 12;\n                const text = [node.id, ...node.labels];\n                const base = Math.floor((text.length * size) / 2 - size / 2) - 1;\n                text.forEach((label, index) => {\n                    context.fillText(label, x(node.x) + (node.dx ? node.dx : 0), y(node.y) + (node.dy ? node.dy : 0) - base + index * size);\n                });\n            }\n        });\n        context.restore();\n    }\n}\nLabelRenderer.defaultColor = '#333333';\nLabelRenderer.defaultFont = '14px sans-serif';\nexport { LabelRenderer };\n","import { isCircleStyle } from '../../styles/ShapeStyle';\nimport { BBox } from '../../types/BBox';\nimport { ShapeRenderer } from './ShapeRenderer';\nconst TWOPI = 2 * Math.PI;\nconst PI6 = Math.PI / 6;\nclass CircleRenderer extends ShapeRenderer {\n    constructor(style) {\n        super(style);\n        this._radius = CircleRenderer.defaultRadius;\n        if (style && isCircleStyle(style)) {\n            if (style.radius)\n                this._radius = style.radius;\n        }\n    }\n    bounds(x, y) {\n        const bounds = new BBox();\n        this._nodes.forEach(node => {\n            const nx = x(node.x);\n            const ny = y(node.y);\n            bounds.expand(nx + this._radius, ny + this._radius);\n            bounds.expand(nx - this._radius, ny - this._radius);\n        });\n        return bounds;\n    }\n    containsPoint(node, x, y, scale) {\n        scale = scale || 1;\n        const dx = x - node.x;\n        const dy = y - node.y;\n        const d2 = dx * dx + dy * dy;\n        const r = this._radius / scale;\n        return d2 < r * r;\n    }\n    intersect(angle) {\n        return {\n            x: this._radius * Math.cos(angle),\n            y: this._radius * Math.sin(angle)\n        };\n    }\n    radius(radius) {\n        return arguments.length\n            ? (this._radius = +radius, this)\n            : this._radius;\n    }\n    render(context, x, y) {\n        if (!this._nodes.length)\n            return;\n        context.save();\n        context.beginPath();\n        this._nodes.forEach(point => {\n            const px = x(point.x);\n            const py = y(point.y);\n            context.moveTo(px + this._radius, py);\n            context.arc(px, py, this._radius, 0, TWOPI);\n        });\n        this._doStrokeAndFill(context);\n        context.restore();\n    }\n    selfLoopPoints(node) {\n        const nx = node.x;\n        const ny = node.y;\n        const d = 3;\n        return [{\n                x: nx,\n                y: ny,\n                dx: this._radius * Math.cos(-PI6),\n                dy: this._radius * Math.sin(-PI6)\n            }, {\n                x: nx,\n                y: ny,\n                dx: d * this._radius * Math.cos(-PI6),\n                dy: d * this._radius * Math.sin(-PI6)\n            }, {\n                x: nx,\n                y: ny,\n                dx: d * this._radius * Math.cos(PI6),\n                dy: d * this._radius * Math.sin(PI6)\n            }, {\n                x: nx,\n                y: ny,\n                dx: this._radius * Math.cos(PI6),\n                dy: this._radius * Math.sin(PI6)\n            }];\n    }\n}\nCircleRenderer.defaultRadius = 60;\nexport { CircleRenderer };\n","import { LabelRenderer } from '../renderers/labels/LabelRenderer';\nimport { CircleRenderer } from '../renderers/shapes/CircleRenderer';\nimport { RectangleRenderer } from '../renderers/shapes/RectangleRenderer';\nimport { isCircleStyle, isRectangleStyle } from '../styles/ShapeStyle';\nimport { parseLabelStyles, parseShapeStyles } from '../styles/StyleParsers';\nclass NodeManager {\n    constructor() {\n        this._nodes = new Map();\n        this._labels = [];\n        this._shapes = [];\n        this._styles = [];\n    }\n    labelRenderers() {\n        return this._labels;\n    }\n    nodes(nodes) {\n        // Return the array nodes\n        if (!nodes)\n            return Array.from(this._nodes.values());\n        // Clear the node map\n        this._nodes = new Map();\n        // Make sure all nodes are node objects\n        const nodeobjs = nodes.map(node => {\n            if (typeof node === 'string') {\n                return {\n                    id: node,\n                    x: 0,\n                    y: 0\n                };\n            }\n            return node;\n        });\n        // Add all nodes to node map\n        nodeobjs.forEach(node => {\n            if (this._nodes.has(node.id))\n                throw Error(`Duplicate node ${node.id}`);\n            this._nodes.set(node.id, node);\n        });\n        return this;\n    }\n    shapeRenderers() {\n        return this._shapes;\n    }\n    setStyles(styles) {\n        this._styles = styles;\n        return this;\n    }\n    update() {\n        // Recalculate the renderers\n        this._shapes = this._calculateShapeRenderers();\n        this._labels = this._calculateLabelRenderers();\n    }\n    _calculateLabelRenderers() {\n        // An array to store renderers\n        const renderers = [];\n        // Create a map of node IDs to nodes\n        const nodemap = new Map(this._nodes);\n        // Flatten styles and build renderers\n        this._styles.forEach(style => {\n            parseLabelStyles(style).forEach((nodes, labelStyle) => {\n                // Create the renderer\n                let labelRenderer = new LabelRenderer(labelStyle);\n                // Extract nodes that haven't already been assigned to a renderer\n                const available = extractNodes(nodes, nodemap);\n                // Set the nodes that the renderer will render\n                labelRenderer.nodes(available);\n                // Add the renderer to the list\n                renderers.push(labelRenderer);\n            });\n        });\n        // Create a default renderer for those not yet assigned\n        if (nodemap.size > 0) {\n            const defaultRenderer = new LabelRenderer();\n            const remaining = Array.from(nodemap.values());\n            defaultRenderer.nodes(remaining);\n            renderers.push(defaultRenderer);\n        }\n        return renderers;\n    }\n    _calculateShapeRenderers() {\n        // An array to store renderers\n        const renderers = [];\n        // Create a map of node IDs to nodes\n        const nodemap = new Map(this._nodes);\n        // Flatten styles and build renderers\n        this._styles.forEach(style => {\n            parseShapeStyles(style).forEach((nodes, shapeStyle) => {\n                // Create the node renderer\n                let shapeRenderer;\n                if (isCircleStyle(shapeStyle))\n                    shapeRenderer = new CircleRenderer(shapeStyle);\n                else if (isRectangleStyle(shapeStyle))\n                    shapeRenderer = new RectangleRenderer(shapeStyle);\n                else\n                    shapeRenderer = new CircleRenderer(shapeStyle);\n                // Extract nodes that haven't already been assigned to a renderer\n                const available = extractNodes(nodes, nodemap);\n                // Set the nodes that the renderer will render\n                shapeRenderer.nodes(available);\n                // Add the renderer to the list\n                renderers.push(shapeRenderer);\n            });\n        });\n        // Create a default renderer for those not yet assigned\n        if (nodemap.size > 0) {\n            const defaultRenderer = new CircleRenderer();\n            const remaining = Array.from(nodemap.values());\n            defaultRenderer.nodes(remaining);\n            renderers.push(defaultRenderer);\n        }\n        return renderers;\n    }\n}\nfunction extractNodes(names, nodemap) {\n    const available = [];\n    names.forEach(name => {\n        if (nodemap.has(name)) {\n            available.push(nodemap.get(name));\n            nodemap.delete(name);\n        }\n    });\n    return available;\n}\nexport { NodeManager };\n","import { Renderer } from './Renderer';\nclass AxesRenderer extends Renderer {\n    constructor() {\n        super();\n        this._axesVisible = true;\n        this._gridVisible = true;\n        this._axisColor = '#bbbbbb';\n        this._gridColor = '#dddddd';\n        this._ticks = 10;\n        this._ticksize = 8;\n        this._labelpadding = 4;\n        this._gridPattern = [5, 5];\n    }\n    axesVisible(visible) {\n        this._axesVisible = visible;\n        return this;\n    }\n    gridVisible(visible) {\n        this._gridVisible = visible;\n        return this;\n    }\n    render(context, x, y) {\n        // constants\n        const x0 = align(x(0));\n        const y0 = align(y(0));\n        const xrange = x.range().map(align);\n        const yrange = y.range().map(align);\n        const ratio = Math.abs(xrange[1] / yrange[1]);\n        const tickoffset = this._ticksize / 2;\n        const xticks = x.ticks(this._ticks * ratio);\n        const yticks = y.ticks(this._ticks);\n        context.save();\n        context.beginPath();\n        if (this._gridVisible) {\n            // x-grid\n            yticks.forEach(tick => {\n                if (tick !== 0 || !this._axesVisible) {\n                    const ty = align(y(tick));\n                    context.moveTo(xrange[0], ty);\n                    context.lineTo(xrange[1], ty);\n                }\n            });\n            context.setLineDash(this._gridPattern);\n            context.lineDashOffset = -x0;\n            context.strokeStyle = this._gridColor;\n            context.stroke();\n            // y-grid\n            context.beginPath();\n            xticks.forEach(tick => {\n                if (tick !== 0 || !this._axesVisible) {\n                    const tx = align(x(tick));\n                    context.moveTo(tx, yrange[0]);\n                    context.lineTo(tx, yrange[1]);\n                }\n            });\n            context.lineDashOffset = -y0;\n            context.stroke();\n        }\n        if (this._axesVisible) {\n            // x-axis\n            context.beginPath();\n            context.moveTo(xrange[0], y0);\n            context.lineTo(xrange[1], y0);\n            // x-ticks\n            xticks.forEach(tick => {\n                if (tick !== 0) {\n                    const tx = align(x(tick));\n                    context.moveTo(tx, y0 - tickoffset);\n                    context.lineTo(tx, y0 + tickoffset);\n                }\n            });\n            // y-axis\n            context.moveTo(x0, yrange[0]);\n            context.lineTo(x0, yrange[1]);\n            // y-ticks\n            yticks.forEach(tick => {\n                if (tick !== 0) {\n                    const ty = align(y(tick));\n                    context.moveTo(x0 - tickoffset, ty);\n                    context.lineTo(x0 + tickoffset, ty);\n                }\n            });\n            // draw lines\n            context.setLineDash([]);\n            context.strokeStyle = this._axisColor;\n            context.stroke();\n            // labels\n            context.font = '10px sans-serif';\n            context.textAlign = 'center';\n            context.textBaseline = 'top';\n            context.fillStyle = this._axisColor;\n            xticks.forEach(tick => {\n                if (tick !== 0) {\n                    const tx = align(x(tick));\n                    context.fillText(tick.toString(), tx, y0 + tickoffset + this._labelpadding);\n                }\n            });\n            context.textAlign = 'left';\n            context.textBaseline = 'middle';\n            yticks.forEach(tick => {\n                if (tick !== 0) {\n                    const ty = align(y(tick));\n                    context.fillText(tick.toString(), x0 + tickoffset + this._labelpadding, ty);\n                }\n            });\n        }\n        context.restore();\n    }\n}\nfunction align(value) {\n    return Math.round(value) + 0.5;\n}\nexport { AxesRenderer };\n","import * as d3 from 'd3';\nimport { DragManager } from './managers/DragManager';\nimport { EdgeManager } from './managers/EdgeManager';\nimport { HoverManager } from './managers/HoverManager';\nimport { NodeManager } from './managers/NodeManager';\nimport { AxesRenderer } from './renderers/AxesRenderer';\nimport { BundleRouter } from './routers/BundleRouter';\nimport { BBox } from './types/BBox';\nclass Graph {\n    constructor(canvas) {\n        // Canvas rendering\n        this._canvas = canvas || null;\n        this._context = null;\n        // Renderers\n        this._axes = new AxesRenderer();\n        this._linkLabelRenderers = [];\n        this._linkRenderers = [];\n        this._nodeLabelRenderers = [];\n        this._nodeRenderers = [];\n        // Sizing, scaling\n        this._width = 0;\n        this._height = 0;\n        this._x = d3.scaleLinear();\n        this._y = d3.scaleLinear();\n        this._transform = d3.zoomIdentity;\n        this._zoom = d3.zoom();\n        // Managers\n        this._nodeManager = new NodeManager();\n        this._edgeManager = new EdgeManager();\n        this._dragManager = null;\n        this._hoverManager = null;\n        // Settings\n        this._axesVisible = true;\n        // Attempt to initialize the canvas\n        this._initializeCanvas();\n    }\n    axesVisible(visible) {\n        this._axes.axesVisible(visible);\n        return this;\n    }\n    boundingBox() {\n        const t = this._transform.invertY(0);\n        const r = this._transform.invertX(this._width);\n        const b = this._transform.invertY(this._height);\n        const l = this._transform.invertX(0);\n        return [\n            this._y.invert(t),\n            this._x.invert(r),\n            this._y.invert(b),\n            this._x.invert(l)\n        ];\n    }\n    bundleFactor(factor) {\n        const router = this._edgeManager.getRouter();\n        if (!arguments.length)\n            return router instanceof BundleRouter\n                ? router.getFactor()\n                : undefined;\n        if (router instanceof BundleRouter)\n            router.setFactor(factor);\n        return this;\n    }\n    canvas(canvas) {\n        this._canvas = canvas;\n        this._initializeCanvas();\n        return this;\n    }\n    edgeLabelPlacement(placement) {\n        return arguments.length\n            ? (this._edgeManager.setLabelPlacement(placement), this)\n            : this._edgeManager.getLabelPlacement();\n    }\n    edges(edges) {\n        if (!edges)\n            return this._edgeManager.getEdges();\n        this._edgeManager.setEdges(edges);\n        return this;\n    }\n    edgeStyles(styles) {\n        this._edgeManager.setStyles(styles);\n        return this;\n    }\n    gridVisible(visible) {\n        this._axes.gridVisible(visible);\n        return this;\n    }\n    resize() {\n        if (this._canvas) {\n            const styles = getComputedStyle(this._canvas);\n            const width = parseInt(styles.getPropertyValue('width'));\n            const height = parseInt(styles.getPropertyValue('height'));\n            this._setDimensions(width, height);\n            this._updateHoverManager();\n            this._render();\n        }\n    }\n    nodes(nodes) {\n        if (!nodes)\n            return this._nodeManager.nodes();\n        // Set the nodes, converting all strings to node objects\n        this._nodeManager.nodes(nodes);\n        // Get the node objects\n        const nodeobjs = this._nodeManager.nodes();\n        // Tell everyone else about the nodes\n        this._edgeManager.setNodes(nodeobjs);\n        return this;\n    }\n    nodeStyles(styles) {\n        this._nodeManager.setStyles(styles);\n        return this;\n    }\n    update() {\n        // Get the node renderers\n        this._nodeManager.update();\n        this._nodeRenderers = this._nodeManager.shapeRenderers();\n        // Tell the edge manager which shapes will be rendering the nodes\n        this._edgeManager.setShapes(this._nodeRenderers);\n        this._edgeManager.update();\n        // Update interactivity\n        this._updateDragManager();\n        this._updateHoverManager();\n        // Get the link renderers\n        this._linkRenderers = this._edgeManager.linkRenderers();\n        // Get the label renderers\n        this._linkLabelRenderers = this._edgeManager.labelRenderers();\n        this._nodeLabelRenderers = this._nodeManager.labelRenderers();\n        this._render();\n    }\n    zoomToFit() {\n        if (this._canvas && this._nodeRenderers.length) {\n            const width = this._width;\n            const height = this._height;\n            const bbox = new BBox();\n            this._nodeRenderers.forEach(renderer => {\n                bbox.expand(renderer.bounds(this._x, this._y));\n            });\n            const [[x0, y0], [x1, y1]] = bbox.bounds();\n            d3.select(this._canvas)\n                .transition()\n                .duration(750)\n                .call(this._zoom.transform, d3.zoomIdentity\n                .translate(this._x(0), this._y(0))\n                .scale(Math.min(8, 0.9 / Math.max((x1 - x0) / width, (y1 - y0) / height)))\n                .translate(-(x0 + x1) / 2, -(y0 + y1) / 2));\n        }\n    }\n    zoomToHome() {\n        if (this._canvas) {\n            d3.select(this._canvas)\n                .transition()\n                .duration(750)\n                .call(this._zoom.transform, d3.zoomIdentity);\n        }\n    }\n    _initializeCanvas() {\n        const canvas = this._canvas;\n        if (canvas) {\n            // Get the 2D rendering context\n            const context = canvas.getContext('2d');\n            if (context === null)\n                throw Error('Unable to initialize canvas');\n            this._context = context;\n            // Create the drag manager and hover manager\n            this._dragManager = new DragManager(canvas, this._x, this._y);\n            this._hoverManager = new HoverManager(canvas, this._x, this._y);\n            // Initialize interactivity\n            this._zoom\n                .scaleExtent([0.1, 500])\n                .on('zoom', this._zoomed.bind(this));\n            d3.select(canvas)\n                .call(this._zoom)\n                .call(this._zoom.transform, this._transform);\n            this._dragManager\n                .addEventListener('drag', event => {\n                this._edgeManager.updateEdgesConnectedTo(event.node);\n                this._render();\n            })\n                .addEventListener('end', () => {\n                if (this._hoverManager) {\n                    this._updateHoverManager();\n                    this._render();\n                }\n            });\n            this._hoverManager\n                .addEventListener('hover', event => {\n                this._linkRenderers.forEach(r => r.highlight(event.link));\n                this._linkLabelRenderers.forEach(r => r.highlight(event.link));\n                this._render();\n            });\n            this.update();\n            this.resize();\n        }\n        else {\n            this._context = null;\n            this._dragManager = null;\n        }\n    }\n    _render() {\n        const context = this._context;\n        if (context) {\n            window.requestAnimationFrame(() => {\n                const x = this._transform.rescaleX(this._x);\n                const y = this._transform.rescaleY(this._y);\n                // Clear the context\n                context.clearRect(0, 0, this._width, this._height);\n                // Render axes\n                if (this._axesVisible)\n                    this._axes.render(context, x, y);\n                // Render links\n                this._linkRenderers.forEach(renderer => {\n                    renderer.render(context, x, y);\n                });\n                // Render link labels\n                this._linkLabelRenderers.forEach(renderer => {\n                    renderer.render(context, x, y);\n                });\n                // Render nodes\n                this._nodeRenderers.forEach(renderer => {\n                    renderer.render(context, x, y);\n                });\n                // Render labels\n                this._nodeLabelRenderers.forEach(renderer => {\n                    renderer.render(context, x, y);\n                });\n            });\n        }\n    }\n    _setDimensions(width, height) {\n        if (this._canvas) {\n            this._canvas.setAttribute('width', width.toString());\n            this._canvas.setAttribute('height', height.toString());\n            this._width = width;\n            this._height = height;\n            this._x.domain([-width / 2, width / 2]).range([0, width]);\n            this._y.domain([height / 2, -height / 2]).range([0, height]);\n        }\n    }\n    _setTransform(transform) {\n        this._transform = transform;\n        if (this._dragManager)\n            this._dragManager.setTransform(transform);\n        if (this._hoverManager)\n            this._hoverManager.setTransform(transform);\n    }\n    _updateDragManager() {\n        if (this._dragManager)\n            this._dragManager.setShapes(this._nodeRenderers);\n    }\n    _updateHoverManager() {\n        if (this._hoverManager)\n            this._hoverManager.setData(this._edgeManager.getRouter().getLinkMap());\n    }\n    _zoomed() {\n        this._setTransform(d3.event.transform);\n        this._render();\n    }\n}\nexport { Graph };\n","import { StaticLayout } from './StaticLayout';\nclass GridLayout extends StaticLayout {\n    apply(graph) {\n        const bbox = graph.boundingBox();\n        const cx = (bbox[1] + bbox[3]) / 2;\n        const cy = (bbox[0] + bbox[2]) / 2;\n        const w = 0.8 * Math.abs(bbox[1] - bbox[3]);\n        const h = 0.8 * Math.abs(bbox[0] - bbox[2]);\n        const nodes = graph.nodes();\n        const ratio = w / h;\n        let r = 0, c = 0;\n        while (r * c < nodes.length) {\n            c / r < ratio ? ++c : ++r;\n        }\n        const t = cy + h / 2;\n        const l = cx - w / 2;\n        const dx = w / c;\n        const dy = h / r;\n        let row = 0, col = 0;\n        nodes.forEach(node => {\n            node.x = l + col * dx;\n            node.y = t - row * dy;\n            if (col++ === c) {\n                col = 0;\n                row++;\n            }\n        });\n    }\n}\nexport { GridLayout };\n","import { isDefined } from 'ts-is-present';\nimport { StaticLayout } from './StaticLayout';\nclass RowLayout extends StaticLayout {\n    constructor() {\n        super();\n        this._groups = [];\n    }\n    apply(graph) {\n        const bbox = graph.boundingBox();\n        const cx = (bbox[1] + bbox[3]) / 2;\n        const cy = (bbox[0] + bbox[2]) / 2;\n        const w = 0.8 * Math.abs(bbox[1] - bbox[3]);\n        const h = 0.8 * Math.abs(bbox[0] - bbox[2]);\n        const groups = [];\n        const nodemap = new Map(graph.nodes().map(node => [node.id, node]));\n        this._groups.forEach(group => {\n            const nodes = group\n                .map(id => {\n                const node = nodemap.get(id);\n                nodemap.delete(id);\n                return node;\n            })\n                .filter(isDefined);\n            if (nodes.length)\n                groups.push(nodes);\n        });\n        groups.push(Array.from(nodemap.values()));\n        const ngroup = groups.length || 1;\n        const t = cy + h / 2;\n        const l = cx - w / 2;\n        const dx = w / Math.max(...groups.map(group => group.length));\n        const dy = h / ((ngroup - 1) || 1);\n        groups.forEach((group, g) => {\n            const y = t - g * dy;\n            group.forEach((node, n) => {\n                node.x = l + dx * n;\n                node.y = y;\n            });\n        });\n    }\n    groups(groups) {\n        this._groups = groups;\n        return this;\n    }\n}\nexport { RowLayout };\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance } from 'alloy-ts';\n\n// Sterling view types\nexport type MainView = 'graph' | 'table' | 'source';\nexport type TableView = 'settings' | 'evaluator' | null;\nexport type GraphView = 'node' | 'edge' | 'layout' | 'settings' | 'evaluator' | null;\nexport type SourceView = 'files' | 'evaluator' | null;\n\n// Sterling state\nexport interface SterlingState {\n    instance: AlloyInstance | null\n    mainView: MainView\n    tableView: TableView\n    graphView: GraphView\n    sourceView: SourceView\n    welcomeDescription: string\n    welcomeTitle: string\n}\n\nconst initialState: SterlingState = {\n    instance: null,\n    mainView: 'graph',\n    tableView: null,\n    graphView: null,\n    sourceView: 'files',\n    welcomeDescription: 'Use Alloy to generate an instance.',\n    welcomeTitle: 'Welcome to Sterling'\n};\n\nconst sterlingSlice = createSlice({\n    name: 'sterling',\n    initialState: initialState,\n    reducers: {\n\n        setGraphView (state, action: PayloadAction<GraphView>) {\n            state.graphView = action.payload === state.graphView\n                ? null\n                : action.payload;\n        },\n\n        setInstance (state, action: PayloadAction<AlloyInstance | null>) {\n\n            state.instance = action.payload;\n\n        },\n\n        setMainView (state, action: PayloadAction<MainView>) {\n            state.mainView = action.payload;\n        },\n\n        setSourceView (state, action: PayloadAction<SourceView>) {\n            state.sourceView = action.payload === state.sourceView\n                ? null\n                : action.payload;\n        },\n\n        setTableView (state, action: PayloadAction<TableView>) {\n            state.tableView = action.payload === state.tableView\n                ? null\n                : action.payload;\n        }\n\n    }\n});\n\nexport const {\n    setGraphView,\n    setInstance,\n    setMainView,\n    setSourceView,\n    setTableView\n} = sterlingSlice.actions;\nexport default sterlingSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance } from 'alloy-ts';\nimport { List, Map } from 'immutable';\nimport { setInstance } from '../../../../sterling/sterlingSlice'\n\nexport interface DataState {\n    asAttribute: Map<string, boolean>\n    atoms: Map<string, string[]>\n    collapseProjections: boolean\n    projections: Map<string, string>\n    unprojected: List<string>\n}\n\nconst initialState: DataState = {\n    asAttribute: Map(),\n    atoms: Map(),\n    collapseProjections: false,\n    projections: Map(),\n    unprojected: List()\n};\n\nconst dataSlice = createSlice({\n    name: 'graphdata',\n    initialState: initialState,\n    reducers: {\n        addProjection (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            const atoms = state.atoms.get(sig);\n            if (atoms && atoms.length) {\n                const atom = atoms[0];\n                state.projections = state.projections.set(sig, atom);\n                const index = state.unprojected.indexOf(sig);\n                if (index !== -1)\n                    state.unprojected = state.unprojected.delete(index);\n            }\n        },\n        nextAtom (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            const cur = state.projections.get(sig);\n            const atm = state.atoms.get(sig);\n            if (cur && atm) {\n                const idx = atm.indexOf(cur);\n                const nxt = idx + 1;\n                if (idx !== -1 && nxt < atm.length) {\n                    state.projections = state.projections.set(sig, atm[nxt]);\n                }\n            }\n        },\n        previousAtom (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            const cur = state.projections.get(sig);\n            const atm = state.atoms.get(sig);\n            if (cur && atm) {\n                const idx = atm.indexOf(cur);\n                const nxt = idx - 1;\n                if (idx !== -1 && nxt >= 0) {\n                    state.projections = state.projections.set(sig, atm[nxt]);\n                }\n            }\n        },\n        removeProjection (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            state.projections = state.projections.delete(sig);\n            state.unprojected = state.unprojected.push(sig).sort(alphabetical);\n        },\n        setProjection (state, action: PayloadAction<{sig: string, atom: string}>) {\n            const { sig, atom } = action.payload;\n            if (state.projections.has(sig) && state.projections.get(sig) !== atom) {\n                state.projections = state.projections.set(sig, atom);\n            }\n        },\n        toggleAsAttribute (state, action: PayloadAction<string|null>) {\n            const field = action.payload;\n            if (field) {\n                const curr = state.asAttribute.get(field);\n                state.asAttribute = state.asAttribute.set(field, !curr);\n            }\n        },\n        toggleCollapseProjections (state) {\n            state.collapseProjections = !state.collapseProjections\n        },\n    },\n    extraReducers: build =>\n        build.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance) {\n\n                const univ = instance.signatures().find(sig => sig.id() === 'univ');\n\n                if (univ) {\n\n                    const signatures = univ.subTypes();\n                    const fields = instance.fields();\n                    const skolems = instance.skolems().filter(s => s.arity() > 1);\n                    const both = [...fields, ...skolems];\n\n                    // Keep any existing projections\n                    state.projections = Map<string, string>().withMutations(map => {\n                        signatures.forEach(sig => {\n                            const atom = state.projections.get(sig.id());\n                            if (atom && sig.findAtom(atom)) {\n                                map.set(sig.id(), atom);\n                            }\n                        });\n                    });\n\n                    // Keep any fields set to display as attributes\n                    state.asAttribute = Map(both.map(item => {\n                        const id = item.id();\n                        return state.asAttribute.has(id)\n                            ? [id, state.asAttribute.get(id)!]\n                            : [id, false];\n                    }));\n\n                    // Create the list of unprojected signatures\n                    state.unprojected = List<string>().withMutations(list => {\n                        signatures.forEach(sig => {\n                            const id = sig.id();\n                            const count = sig.atoms(true).length;\n                            if (count && !state.projections.has(id))\n                                list.push(id);\n                        });\n                    }).sort(alphabetical);\n\n                    // Extract atoms\n                    state.atoms = Map(signatures.map(sig => [\n                            sig.id(),\n                            sig.atoms(true).map(atom => atom.name())\n                        ]));\n\n\n                } else {\n\n                    state.asAttribute = Map();\n                    state.atoms = Map();\n                    state.projections = Map();\n                    state.unprojected = List();\n\n                }\n\n            } else {\n\n                state.atoms = Map();\n                state.projections = Map();\n                state.unprojected = List();\n\n            }\n\n        })\n});\n\nfunction alphabetical (a: string, b: string): number {\n    return a.localeCompare(b);\n}\n\nexport const {\n    addProjection,\n    nextAtom,\n    previousAtom,\n    removeProjection,\n    setProjection,\n    toggleAsAttribute,\n    toggleCollapseProjections\n} = dataSlice.actions;\nexport default dataSlice.reducer;\n","import * as d3 from 'd3-color';\nimport * as schemes from 'd3-scale-chromatic';\n\nconst POPPER_MODIFIERS = {\n    preventOverflow: {\n        enabled: false\n    },\n    hide: {\n        enabled: false\n    }\n};\n\nconst COLOR_SCHEMES: [string, string[]][] = [\n    ['Tableu', colors(\"4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab\")],\n    ['Turbo', [0, 1, 2, 4, 5, 6, 7].map(i => turboScheme(i/8)).map(c => d3.rgb(c).hex())],\n    ['Categorical', schemes.schemeCategory10.slice()],\n    ['Accent', schemes.schemeAccent.slice()],\n    ['Dark', schemes.schemeDark2.slice()],\n    ['Pastel', schemes.schemePastel1.slice()],\n    ['Paired', schemes.schemePaired.slice()]\n];\n\nconst DEFAULT_COLORS = [\"#f44336\", \"#e91e63\", \"#9c27b0\", \"#673ab7\", \"#3f51b5\",\n    \"#2196f3\", \"#03a9f4\", \"#00bcd4\", \"#009688\", \"#4caf50\", \"#8bc34a\", \"#cddc39\",\n    \"#ffc107\", \"#ff9800\", \"#ff5722\", \"#795548\", \"#607d8b\",\n    \"#333333\", \"#777777\", \"#bbbbbb\", \"#ffffff\"];\n\nfunction background (color?: string | null): string | undefined {\n    if (!color) return;\n    const c = d3.color(color);\n    return c ? c.hex() : undefined;\n}\n\nfunction backgroundGradient (colors: string[]): string {\n    if (!colors.length) return '';\n    const percent = 100 / colors.length;\n    const strings = colors.map((color, i) => `${color} ${i*percent}% ${(i+1)*percent}%`);\n    return `linear-gradient(to right, ${strings.join(',')})`;\n}\n\nfunction colors (specifier: string): string[] {\n    let n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\n    while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\n    return colors;\n}\n\nfunction foreground (color?: string | null): string | undefined {\n    if (!color) return;\n    const c = d3.color(color);\n    if (!c) return;\n    const rgb = c.rgb();\n    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000 > 125\n        ? '#000000'\n        : '#ffffff';\n}\n\nfunction turboScheme (t: number): string {\n    t = Math.max(0, Math.min(1, t));\n    return \"rgb(\"\n        + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + \", \"\n        + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + \", \"\n        + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))\n        + \")\";\n}\n\nexport {\n    COLOR_SCHEMES,\n    DEFAULT_COLORS,\n    POPPER_MODIFIERS,\n    background,\n    backgroundGradient,\n    foreground\n}\n","import { Icon, Tag } from '@blueprintjs/core';\nimport { AlloyField, AlloySignature, AlloySkolem } from 'alloy-ts';\nimport * as React from 'react';\nimport { SigFieldSkolem } from './tableTypes';\n\nexport interface IAlloyTagProps {\n    fill?: boolean\n    nameFunction?: (item: SigFieldSkolem) => string\n}\n\nexport interface ISignatureTagProps extends IAlloyTagProps {\n    signature: AlloySignature | string\n}\n\nexport interface IFieldTagProps extends IAlloyTagProps {\n    field: AlloyField | string\n}\n\nexport interface ISkolemTagProps extends IAlloyTagProps {\n    skolem: AlloySkolem | string\n}\n\nclass SignatureTag extends React.Component<ISignatureTagProps> {\n\n    static className = 'sig-tag';\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const name = typeof props.signature === 'string'\n            ? props.signature\n            : props.nameFunction\n                ? props.nameFunction(props.signature)\n                : props.signature.name();\n\n        return (\n            <Tag className={SignatureTag.className} fill={props.fill}>\n                { name }\n            </Tag>\n        );\n\n    }\n\n}\n\nclass FieldTag extends React.Component<IFieldTagProps> {\n\n    static className = 'field-tag';\n\n    render (): React.ReactNode {\n\n        const name = typeof this.props.field === 'string'\n            ? this.props.field\n            : this.props.nameFunction\n                ? this.props.nameFunction(this.props.field)\n                : this.props.field.name();\n\n        const tokens = name.split('<:');\n\n        return (\n            <Tag\n                className={FieldTag.className}\n                fill={true}>\n                { FieldTag.FieldTagEls(tokens) }\n            </Tag>\n        )\n\n    }\n\n    public static FieldTagEls (tokens: Array<string>): React.ReactElement {\n\n        if (tokens.length !== 2)\n            return <>{tokens.join('')}</>;\n\n        return (<>\n            {tokens[0]}\n            <Icon\n                icon='symbol-triangle-down'\n                iconSize={14}\n                style={{\n                    padding: '1px',\n                    transform: 'rotate(90deg)'\n                }}/>\n            {tokens[1]}\n        </>);\n\n    }\n\n}\n\nclass SkolemTag extends React.Component<ISkolemTagProps> {\n\n    static className = 'skolem-tag';\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const name = typeof props.skolem === 'string'\n            ? props.skolem\n            : props.nameFunction\n                ? props.nameFunction(props.skolem)\n                : props.skolem.name();\n\n        return (\n            <Tag className={SkolemTag.className} fill={true}>\n                { name }\n            </Tag>\n\n        );\n\n    }\n\n}\n\nexport {\n    SignatureTag,\n    FieldTag,\n    SkolemTag\n}\n","import { AlloyField, AlloySkolem } from 'alloy-ts';\nimport { FieldTag } from '../../../table/TableTags';\nimport { Tree } from '../../graphTypes';\n\nfunction buildFieldTree (fields: AlloyField[], hideEmpty: boolean): Tree | null {\n\n    const flds = hideEmpty\n        ? fields.filter(field => field.tuples().length)\n        : fields;\n\n    return {\n        id: 'Fields',\n        children: flds.map(field => {\n            return {\n                id: field.id(),\n                label: FieldTag.FieldTagEls(field.id().split('<:')),\n                icon: 'flows',\n                children: []\n            }\n        })\n    };\n\n}\n\nfunction buildSkolemTree (skolems: AlloySkolem[]): Tree | null {\n\n    return {\n        id: 'Skolems',\n        children: skolems\n            .map(skolem => {\n                return {\n                    id: skolem.id(),\n                    icon: 'flows',\n                    children: []\n                }\n            })\n    };\n\n}\n\nexport {\n    buildFieldTree,\n    buildSkolemTree\n}\n","import {\n    cloneLabelStyle,\n    cloneLinkStyle,\n    LabelStyle,\n    LinkStyle\n} from '@atdyer/graph-js';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyField, AlloyInstance, AlloySkolem } from 'alloy-ts';\nimport { Map } from 'immutable';\nimport { setInstance } from '../../../../sterling/sterlingSlice';\nimport { Tree } from '../../graphTypes';\nimport { COLOR_SCHEMES } from '../../util';\nimport { buildFieldTree, buildSkolemTree } from './edgeTypes';\n\nexport interface EdgeStylingState {\n    collapsed: Map<string, boolean>\n    collapseEdgeStyle: boolean\n    collapseScheme: boolean\n    fields: AlloyField[]\n    hideEmptyFields: boolean\n    labelStyles: Map<string, LabelStyle>\n    linkStyles: Map<string, LinkStyle>\n    selected: string | null\n    skolems: AlloySkolem[]\n    treeField: Tree | null\n    treeSkolem: Tree | null\n}\n\nconst initialState: EdgeStylingState = {\n    collapsed: Map({\n        Fields: false,\n        Skolems: false\n    }),\n    collapseEdgeStyle: false,\n    collapseScheme: false,\n    fields: [],\n    hideEmptyFields: true,\n    labelStyles: Map(),\n    linkStyles: Map(),\n    selected: null,\n    skolems: [],\n    treeField: null,\n    treeSkolem: null\n};\n\nconst edgeStylingSlice = createSlice({\n    name: 'edgestyles',\n    initialState: initialState,\n    reducers: {\n        clearAll (state) {\n            state.labelStyles = state.labelStyles.map(() => ({}));\n            state.linkStyles = state.linkStyles.map(() => ({}));\n        },\n        clearCurrent (state) {\n            if (state.selected) {\n                state.labelStyles = state.labelStyles.set(state.selected, {});\n                state.linkStyles = state.linkStyles.set(state.selected, {});\n            }\n        },\n        collapseTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, true);\n        },\n        expandTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, false);\n        },\n        selectTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            if (state.linkStyles.has(target)\n                || target === 'Fields'\n                || target === 'Skolems') state.selected = target;\n        },\n        setColorScheme (state, action: PayloadAction<string[]>) {\n            const colors = action.payload;\n            if (!colors.length) return;\n            state.linkStyles = state.linkStyles.withMutations(styles => {\n                [...state.fields, ...state.skolems].forEach((item, index) => {\n                    const id = item.id();\n                    const color = colors[index % colors.length];\n                    const link = state.linkStyles.get(id);\n                    if (link) {\n                        const newlink = cloneLinkStyle(link);\n                        newlink.stroke = color;\n                        styles.set(id, newlink);\n                    }\n                });\n            });\n            state.labelStyles = state.labelStyles.withMutations(styles => {\n                [...state.fields, ...state.skolems].forEach((item, index) => {\n                    const id = item.id();\n                    const color = colors[index % colors.length];\n                    const label = state.labelStyles.get(id);\n                    if (label) {\n                        const newlabel = cloneLabelStyle(label);\n                        newlabel.color = color;\n                        styles.set(id, newlabel);\n                    }\n                });\n            });\n        },\n        setLabelColor (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const label = state.labelStyles.get(state.selected);\n                if (label) {\n                    const color = action.payload;\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    color === null\n                        ? delete newlabel.color\n                        : newlabel.color = color;\n                    state.labelStyles = state.labelStyles.set(state.selected, newlabel);\n                }\n            }\n        },\n        setLabelSize (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const label = state.labelStyles.get(state.selected);\n                if (label) {\n                    const size = parseInt(action.payload);\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    isNaN(size) || size === 0\n                        ? delete newlabel.font\n                        : newlabel.font = `${size}px sans-serif`;\n                    state.labelStyles = state.labelStyles.set(state.selected, newlabel);\n                }\n            }\n        },\n        setStroke (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const link = state.linkStyles.get(state.selected);\n                if (link) {\n                    const color = action.payload;\n                    const newlink = cloneLinkStyle(link)!;\n                    color === null\n                        ? delete newlink.stroke\n                        : newlink.stroke = color;\n                    state.linkStyles = state.linkStyles.set(state.selected, newlink);\n                }\n            }\n        },\n        setStrokeWidth (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const link = state.linkStyles.get(state.selected);\n                if (link) {\n                    const width = parseInt(action.payload);\n                    const newlink = cloneLinkStyle(link)!;\n                    isNaN(width) || width === 0\n                        ? delete newlink.strokeWidth\n                        : newlink.strokeWidth = width;\n                    state.linkStyles = state.linkStyles.set(state.selected, newlink);\n                }\n            }\n        },\n        toggleCollapseEdgeStyle (state) {\n            state.collapseEdgeStyle = !state.collapseEdgeStyle;\n        },\n        toggleCollapseScheme (state) {\n            state.collapseScheme = !state.collapseScheme;\n        },\n        toggleHideEmptyFields (state) {\n            state.hideEmptyFields = !state.hideEmptyFields;\n            state.treeField = buildFieldTree(state.fields as AlloyField[], state.hideEmptyFields);\n        }\n    },\n    extraReducers: builder =>\n        builder.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance) {\n\n                const fields = instance.fields();\n                const skolems = instance.skolems().filter(s => s.arity() > 1);\n                const both = [...fields, ...skolems];\n\n                state.fields = fields;\n                state.skolems = skolems;\n                state.treeField = buildFieldTree(fields, state.hideEmptyFields);\n                state.treeSkolem = buildSkolemTree(skolems);\n\n                // Keep any existing label styles\n                state.labelStyles = Map(both.map(item => {\n                    const id = item.id();\n                    return state.labelStyles.has(id)\n                        ? [id, cloneLabelStyle(state.labelStyles.get(id)!)]\n                        : [id, {}]\n                }));\n\n                // Keep any exiting link styles\n                state.linkStyles = Map(both.map(item => {\n                    const id = item.id();\n                    return state.linkStyles.has(id)\n                        ? [id, cloneLinkStyle(state.linkStyles.get(id)!)]\n                        : [id, {}]\n                }));\n\n                // If they don't already exist, create empty link and label\n                // styles for the two categories we've got (fields and skolems)\n                if (!state.labelStyles.has('Fields'))\n                    state.labelStyles = state.labelStyles.set('Fields', {});\n                if (!state.labelStyles.has('Skolems'))\n                    state.labelStyles = state.labelStyles.set('Skolems', {});\n                if (!state.linkStyles.has('Fields'))\n                    state.linkStyles = state.linkStyles.set('Fields', {\n                        strokeWidth: 2\n                    });\n                if (!state.linkStyles.has('Skolems'))\n                    state.linkStyles = state.linkStyles.set('Skolems', {\n                        strokeWidth: 2\n                    });\n\n                // For the Forge folks, let's apply a default color scheme to\n                // anything that isn't already colored (except for the categories).\n                const defaultScheme = COLOR_SCHEMES[2][1]\n                    .concat(COLOR_SCHEMES[1][1])\n                    .concat(COLOR_SCHEMES[0][1]);\n                let nextColor = 0;\n                state.linkStyles = state.linkStyles.withMutations(styles => {\n                    [...state.fields, ...state.skolems].forEach((item) => {\n                        const id = item.id();\n                        const link = state.linkStyles.get(id);\n                        if (link && !link.stroke && item.tuples().length) {\n                            const newlink = cloneLinkStyle(link);\n                            newlink.stroke = defaultScheme[nextColor % defaultScheme.length];\n                            styles.set(id, newlink);\n                            nextColor += 1;\n                        }\n                    });\n                });\n                nextColor = 0;\n                state.labelStyles = state.labelStyles.withMutations(styles => {\n                    [...state.fields, ...state.skolems].forEach((item) => {\n                        const id =item.id();\n                        const label = state.labelStyles.get(id);\n                        if (label && !label.color && item.tuples().length) {\n                            const newlabel = cloneLabelStyle(label);\n                            newlabel.color = defaultScheme[nextColor % defaultScheme.length];\n                            styles.set(id, newlabel);\n                            nextColor += 1;\n                        }\n                    });\n                });\n\n            } else {\n\n                state.fields = [];\n                state.labelStyles = Map();\n                state.linkStyles = Map();\n                state.selected = null;\n                state.skolems = [];\n                state.treeField = null;\n                state.treeSkolem = null;\n\n            }\n\n        })\n});\n\nexport const {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setColorScheme,\n    setLabelColor,\n    setLabelSize,\n    setStroke,\n    setStrokeWidth,\n    toggleCollapseEdgeStyle,\n    toggleCollapseScheme,\n    toggleHideEmptyFields\n} = edgeStylingSlice.actions;\nexport default edgeStylingSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { LabelPlacement } from '@atdyer/graph-js';\n\nexport interface GraphSettingsState {\n    axesVisible: boolean\n    bundleFactor: number\n    collapseEdgeSettings: boolean\n    collapseGraphSettings: boolean\n    edgeLabelPlacement: LabelPlacement\n    gridVisible: boolean\n}\n\nconst initialState: GraphSettingsState = {\n    axesVisible: false,\n    bundleFactor: 0.15,\n    collapseEdgeSettings: false,\n    collapseGraphSettings: false,\n    gridVisible: false,\n    edgeLabelPlacement: 'spread'\n};\n\nconst graphSettingsSlice = createSlice({\n    name: 'graphsettings',\n    initialState: initialState,\n    reducers: {\n        setBundleFactor (state, action: PayloadAction<number>) {\n            const value = action.payload;\n            if (value >= 0) state.bundleFactor = value;\n        },\n        setLabelPlacement (state, action: PayloadAction<LabelPlacement>) {\n            state.edgeLabelPlacement = action.payload;\n        },\n        toggleAxesVisible (state) { state.axesVisible = !state.axesVisible },\n        toggleCollapseEdgeSettings (state) { state.collapseEdgeSettings = !state.collapseEdgeSettings },\n        toggleCollapseGraphSettings (state) { state.collapseGraphSettings = !state.collapseGraphSettings },\n        toggleGridVisible (state) { state.gridVisible = !state.gridVisible }\n    }\n});\n\nexport const {\n    setBundleFactor,\n    setLabelPlacement,\n    toggleAxesVisible,\n    toggleCollapseEdgeSettings,\n    toggleCollapseGraphSettings,\n    toggleGridVisible\n} = graphSettingsSlice.actions;\nexport default graphSettingsSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport type Alignment = 'UL' | 'UR' | 'DL' | 'DR' | undefined;\nexport type Direction = 'TB' | 'BT' | 'LR' | 'RL';\nexport type Ranker = 'network-simplex' | 'tight-tree' | 'longest-path';\n\nexport interface LayoutState {\n    align: Alignment\n    collapseLayout: boolean\n    collapseQuickLayout: boolean\n    collapseZoom: boolean\n    nodesep: number\n    rankdir: Direction\n    ranker: Ranker\n    ranksep: number\n}\n\nconst initialState: LayoutState = {\n    align: undefined,\n    collapseLayout: false,\n    collapseQuickLayout: false,\n    collapseZoom: false,\n    nodesep: 100,\n    rankdir: 'BT',\n    ranker: 'network-simplex',\n    ranksep: 200\n};\n\nconst layoutSlice = createSlice({\n    name: 'layout',\n    initialState: initialState,\n    reducers: {\n        setAlign (state, action: PayloadAction<Alignment>) {\n            state.align = action.payload;\n        },\n        setNodeSep (state, action: PayloadAction<number>) {\n            state.nodesep = action.payload;\n        },\n        setRankDir (state, action: PayloadAction<Direction>) {\n            state.rankdir = action.payload;\n        },\n        setRanker (state, action: PayloadAction<Ranker>) {\n            state.ranker = action.payload;\n        },\n        setRankSep (state, action: PayloadAction<number>) {\n            state.ranksep = action.payload;\n        },\n        toggleCollapseLayout (state) {\n            state.collapseLayout = !state.collapseLayout;\n        },\n        toggleCollapseQuickLayout (state) {\n            state.collapseQuickLayout = !state.collapseQuickLayout;\n        },\n        toggleCollapseZoom (state) {\n            state.collapseZoom = !state.collapseZoom;\n        }\n    }\n});\n\nexport const {\n    setAlign,\n    setNodeSep,\n    setRankDir,\n    setRanker,\n    setRankSep,\n    toggleCollapseLayout,\n    toggleCollapseQuickLayout,\n    toggleCollapseZoom\n} = layoutSlice.actions;\nexport default layoutSlice.reducer;\n","import { AlloySignature } from 'alloy-ts';\nimport { Tree } from '../../graphTypes';\n\nfunction buildTypeTree (univ: AlloySignature | null, hideEmpty: boolean): Tree | null {\n\n    if (!univ) return null;\n\n    const populate = (sig: AlloySignature): Tree => {\n\n        const subs = hideEmpty\n            ? sig.subTypes().filter(s => s.atoms().length || s.subTypes().length)\n            : sig.subTypes();\n\n        const children = subs.map(populate);\n        return {\n            id: sig.id(),\n            icon: 'group-objects',\n            children\n        };\n\n    };\n\n    return populate(univ);\n\n}\n\nexport {\n    buildTypeTree\n}\n","import {\n    CircleStyle,\n    cloneLabelStyle,\n    cloneShapeStyle,\n    convertToShape,\n    LabelStyle,\n    RectangleStyle,\n    ShapeStyle\n} from '@atdyer/graph-js';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance, AlloySignature } from 'alloy-ts';\nimport { Map } from 'immutable';\nimport { setInstance } from '../../../../sterling/sterlingSlice';\nimport { Tree } from '../../graphTypes';\nimport { foreground } from '../../util';\nimport { buildTypeTree } from './nodeTypes';\n\nexport interface NodeStylingState {\n    collapsed: Map<string, boolean>\n    collapseNodeStyle: boolean\n    collapseScheme: boolean\n    hideDisconnected: Map<string, boolean>\n    hideEmptySets: boolean\n    labels: Map<string, LabelStyle>\n    nodeTree: Tree | null\n    selected: string | null\n    shapes: Map<string, ShapeStyle>\n    signatures: AlloySignature[]\n    univ: AlloySignature | null\n}\n\nconst initialState: NodeStylingState = {\n    collapsed: Map(),\n    collapseNodeStyle: false,\n    collapseScheme: false,\n    hideDisconnected: Map(),\n    hideEmptySets: true,\n    labels: Map(),\n    nodeTree: null,\n    selected: null,\n    shapes: Map(),\n    signatures: [],\n    univ: null\n};\n\nconst nodeStylingSlice = createSlice({\n    name: 'nodestyles',\n    initialState: initialState,\n    reducers: {\n        clearAll (state) {\n            state.labels = state.labels.map(() => ({}));\n            state.shapes = state.shapes.map(() => ({}));\n        },\n        clearCurrent (state) {\n            if (state.selected) {\n                state.labels = state.labels.set(state.selected, {});\n                state.shapes = state.shapes.set(state.selected, {});\n            }\n        },\n        collapseTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, true);\n        },\n        expandTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, false);\n        },\n        selectTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            if (state.shapes.has(target)) state.selected = target;\n        },\n        setColorScheme (state, action: PayloadAction<string[]>) {\n            const colors = action.payload;\n            if (!colors.length) return;\n            state.shapes = state.shapes.withMutations(styles => {\n                let next = 0;\n                state.signatures.forEach(signature => {\n                    const id = signature.id();\n                    const shape = state.shapes.get(id);\n                    if (shape && signature.atoms().length) {\n                        const newshape = cloneShapeStyle(shape);\n                        newshape.fill = colors[next++ % colors.length];\n                        styles.set(id, newshape);\n                    }\n                });\n            });\n            state.labels = state.labels.withMutations(styles => {\n                state.signatures.forEach(signature => {\n                    const id = signature.id();\n                    const shape = state.shapes.get(id);\n                    const label = state.labels.get(id);\n                    if (label && shape && shape.fill) {\n                        const newlabel = cloneLabelStyle(label);\n                        newlabel.color = foreground(shape.fill);\n                        styles.set(id, newlabel);\n                    }\n                });\n            })\n\n            // state.shapes = state.shapes.withMutations(styles => {\n            //     signatures.forEach(signature => {\n            //         const id = signature.id();\n            //         const shape = state.shapes.get(id);\n            //         if (shape && !shape.fill) {\n            //             const newshape = cloneShapeStyle(shape);\n            //             newshape.fill = '#ffd700';\n            //             styles.set(id, newshape);\n            //         }\n            //     });\n            // });\n            // state.labels = state.labels.withMutations(styles => {\n            //     signatures.forEach((signature) => {\n            //         const id = signature.id();\n            //         const shape = state.shapes.get(id);\n            //         const label = state.labels.get(id);\n            //         if (label && shape && shape.fill) {\n            //             const newlabel = cloneLabelStyle(label);\n            //             newlabel.color = foreground(shape.fill);\n            //             styles.set(id, newlabel);\n            //         }\n            //     });\n            // });\n        },\n        setFill (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape) {\n                    const color = action.payload;\n                    const newshape = shape ? cloneShapeStyle(shape) : {};\n                    color === null\n                        ? delete newshape.fill\n                        : newshape.fill = color;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setHeight (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape && shape.type === 'rectangle') {\n                    const height = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape) as RectangleStyle;\n                    isNaN(height) || height === 0\n                        ? delete newshape.height\n                        : newshape.height = height;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setLabelColor (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const label = state.labels.get(state.selected);\n                if (label) {\n                    const color = action.payload;\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    color === null\n                        ? delete newlabel.color\n                        : newlabel.color = color;\n                    state.labels = state.labels.set(state.selected, newlabel);\n                }\n            }\n        },\n        setLabelSize (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const label = state.labels.get(state.selected);\n                if (label) {\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    const size = parseInt(action.payload);\n                    isNaN(size) || size === 0\n                        ? delete newlabel.font\n                        : newlabel.font = `${size}px sans-serif`;\n                    state.labels = state.labels.set(state.selected, newlabel);\n                }\n            }\n        },\n        setRadius (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape && shape.type === 'circle') {\n                    const radius = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape) as CircleStyle;\n                    isNaN(radius) || radius === 0\n                        ? delete newshape.radius\n                        : newshape.radius = radius;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setShape (state, action: PayloadAction<'circle' | 'rectangle' | null>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                const type = action.payload;\n                if (shape === undefined) return;\n                if ((shape && shape.type !== type) || shape !== type) {\n                    const newshape = convertToShape(shape, type);\n                    state.shapes = state.shapes.set(\n                        state.selected,\n                        newshape\n                    );\n                }\n            }\n        },\n        setStroke (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape) {\n                    const color = action.payload;\n                    const newshape = cloneShapeStyle(shape)!;\n                    color === null\n                        ? delete newshape.stroke\n                        : newshape.stroke = color;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setStrokeWidth (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape) {\n                    const width = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape)!;\n                    isNaN(width) || width === -1\n                        ? delete newshape.strokeWidth\n                        : newshape.strokeWidth = width;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setWidth (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape && shape.type === 'rectangle') {\n                    const width = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape) as RectangleStyle;\n                    isNaN(width) || width === 0\n                        ? delete newshape.width\n                        : newshape.width = width;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        toggleCollapseNodeStyle (state) {\n            state.collapseNodeStyle = !state.collapseNodeStyle;\n        },\n        toggleCollapseScheme (state) {\n            state.collapseScheme = !state.collapseScheme;\n        },\n        toggleHideDisconnected (state) {\n            const selected = state.selected;\n            if (selected) {\n                const next = !state.hideDisconnected.get(selected);\n                state.hideDisconnected = state.hideDisconnected.set(selected, next);\n            }\n        },\n        toggleHideEmptySets (state) {\n            state.hideEmptySets = !state.hideEmptySets;\n            state.nodeTree = buildTypeTree(state.univ as AlloySignature, state.hideEmptySets);\n        }\n    },\n    extraReducers: builder =>\n        builder.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance !== null) {\n\n                const signatures = instance.signatures();\n                const univ = signatures.find(sig => sig.id() === 'univ') || null;\n                state.signatures = signatures;\n\n                // Build the signature tree using only IDs\n                state.univ = univ;\n                state.nodeTree = buildTypeTree(univ, state.hideEmptySets);\n\n                // For all maps, keeps existing signatures, get rid of ones that\n                // no longer exist, and add new ones\n                state.collapsed = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.collapsed.has(id)\n                        ? [id, !!state.collapsed.get(id)]\n                        : [id, false];\n                }));\n\n                state.hideDisconnected = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.hideDisconnected.has(id)\n                        ? [id, !!state.hideDisconnected.get(id)]\n                        : [id, true];\n                }));\n\n                state.labels = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.labels.has(id)\n                        ? [id, cloneLabelStyle(state.labels.get(id)!)]\n                        : [id, {}];\n                }));\n\n                state.shapes = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.shapes.has(id)\n                        ? [id, cloneShapeStyle(state.shapes.get(id)!)]\n                        : [id, {}];\n                }));\n\n                // Any nodes not already colored, give a color\n                state.shapes = state.shapes.withMutations(styles => {\n                    signatures.forEach(signature => {\n                        const id = signature.id();\n                        const shape = state.shapes.get(id);\n                        if (shape && !shape.fill) {\n                            const newshape = cloneShapeStyle(shape);\n                            newshape.fill = '#ecd12e';\n                            styles.set(id, newshape);\n                        }\n                    });\n                });\n                state.labels = state.labels.withMutations(styles => {\n                    signatures.forEach((signature) => {\n                        const id = signature.id();\n                        const shape = state.shapes.get(id);\n                        const label = state.labels.get(id);\n                        if (label && shape && shape.fill) {\n                            const newlabel = cloneLabelStyle(label);\n                            newlabel.color = foreground(shape.fill);\n                            styles.set(id, newlabel);\n                        }\n                    });\n                });\n\n                // If an item was selected, make sure it still exists\n                if (state.selected && !state.shapes.has(state.selected)){\n                    state.selected = null;\n                }\n\n            } else {\n\n                state.collapsed = Map();\n                state.hideDisconnected = Map();\n                state.labels = Map();\n                state.nodeTree = null;\n                state.shapes = Map();\n                state.selected = null;\n                state.univ = null;\n\n            }\n\n        })\n});\n\nexport const {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setColorScheme,\n    setFill,\n    setHeight,\n    setLabelColor,\n    setLabelSize,\n    setRadius,\n    setShape,\n    setStroke,\n    setStrokeWidth,\n    setWidth,\n    toggleCollapseNodeStyle,\n    toggleCollapseScheme,\n    toggleHideDisconnected,\n    toggleHideEmptySets\n} = nodeStylingSlice.actions;\nexport default nodeStylingSlice.reducer;\n","import {\n    AlloyElement,\n    AlloyField,\n    AlloySignature,\n    AlloySkolem, sorting\n} from 'alloy-ts';\n\nexport enum HorizontalAlignment { Left, Center, Right}\nexport enum LayoutDirection { Row, Column}\nexport enum SortDirection { Ascending, Descending}\nexport enum SortMethod { Alphabetical, Builtin, Group, Size}\nexport enum TablesType { All, Signatures, Fields, Skolems, Select}\n\nexport type AlloyNameFn = (item: AlloyElement) => string;\nexport type AlloySortFn = (a: AlloyElement, b: AlloyElement) => number;\nexport type SigFieldSkolem = AlloySignature | AlloyField | AlloySkolem;\nexport type SortType = {\n    method: SortMethod\n    direction: SortDirection\n};\n\nexport const SKOLEM_COLORS = [\n    \"#2965CC\", \"#29A634\", \"#D99E0B\", \"#D13913\", \"#8F398F\",\n    \"#00B3A4\", \"#DB2C6F\", \"#9BBF30\", \"#96622D\", \"#7157D9\"\n];\n\nfunction buildNameFunction (removeThis: boolean): AlloyNameFn {\n    return (item: AlloyElement) => {\n        return removeThis\n            ? item.id().replace(/^this\\//, '')\n            : item.id();\n    }\n}\n\nfunction buildSortFunction (type: SortType, nameFunction: AlloyNameFn): AlloySortFn {\n    if (type.method === SortMethod.Size) {\n        return sorting.sizeSort(type.direction === SortDirection.Ascending);\n    }\n    if (type.method === SortMethod.Alphabetical) {\n        return sorting.alphabeticalSort(nameFunction, type.direction === SortDirection.Ascending);\n    }\n    if (type.method === SortMethod.Group) {\n        return sorting.groupSort();\n    }\n    return () => 0;\n}\n\nfunction getAlignClass (alignment: HorizontalAlignment): string {\n    return alignment === HorizontalAlignment.Left ? 'left' :\n        alignment === HorizontalAlignment.Center ? 'center' :\n            alignment === HorizontalAlignment.Right ? 'right' : '';\n}\n\nfunction getLayoutClass (direction: LayoutDirection): string {\n    return direction === LayoutDirection.Row ? 'row' :\n        direction === LayoutDirection.Column ? 'column' : '';\n}\n\nexport {\n    getAlignClass,\n    buildNameFunction,\n    buildSortFunction,\n    getLayoutClass\n}\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { Graph } from '@atdyer/graph-js';\nimport { createSlice } from '@reduxjs/toolkit';\nimport dataSlice from './drawer-views/data/dataSlice';\nimport edgeStylingSlice from './drawer-views/edge-styling/edgeStylingSlice';\nimport graphSettingsSlice from './drawer-views/graph-settings/graphSettingsSlice';\nimport layoutSlice from './drawer-views/layout/layoutSlice';\nimport nodeStylingSlice from './drawer-views/node-styling/nodeStylingSlice';\n\nexport interface GraphState {\n    graph: Graph\n}\n\nconst initialState: GraphState = {\n    graph: new Graph(),\n};\n\nconst graphSlice = createSlice({\n    name: 'graph',\n    initialState: initialState,\n    reducers: {}\n});\n\nexport default combineReducers({\n    dataSlice,\n    edgeStylingSlice,\n    graphSlice: graphSlice.reducer,\n    graphSettingsSlice,\n    layoutSlice,\n    nodeStylingSlice\n});\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloySource } from 'alloy-ts';\nimport { setInstance } from '../../sterling/sterlingSlice';\n\nexport interface SourceState {\n    selected: AlloySource | null\n}\n\nconst initialState: SourceState = {\n    selected: null\n};\n\nconst sourceSlice = createSlice({\n    name: 'source',\n    initialState: initialState,\n    reducers: {\n        setSelected (state, action: PayloadAction<AlloySource>) {\n            state.selected = action.payload;\n        }\n    },\n    extraReducers: build =>\n        build.addCase(setInstance, state => { state.selected = null })\n});\n\nexport const {\n    setSelected\n} = sourceSlice.actions;\nexport default sourceSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance, AlloySkolem } from 'alloy-ts';\nimport { setInstance } from '../../sterling/sterlingSlice';\nimport {\n    HorizontalAlignment,\n    LayoutDirection,\n    SigFieldSkolem,\n    SKOLEM_COLORS,\n    SortDirection,\n    SortMethod,\n    SortType,\n    TablesType\n} from './tableTypes';\n\n// Table view state\nexport interface TableState {\n    alignment: HorizontalAlignment\n    collapseData: boolean\n    collapseLayout: boolean\n    collapseTables: boolean\n    data: SigFieldSkolem[]\n    dataSelected: SigFieldSkolem[]\n    highlightSkolems: boolean\n    layoutDirection: LayoutDirection\n    removeBuiltin: boolean\n    removeEmpty: boolean\n    removeThis: boolean\n    primarySort: SortType\n    secondarySort: SortType\n    skolemColors: Map<AlloySkolem, string>\n    tablesType: TablesType\n}\n\n// The initial table view state\nconst initialState: TableState = {\n    alignment: HorizontalAlignment.Left,\n    collapseData: false,\n    collapseLayout: false,\n    collapseTables: false,\n    data: [],\n    dataSelected: [],\n    highlightSkolems: true,\n    layoutDirection: LayoutDirection.Row,\n    removeBuiltin: true,\n    removeEmpty: true,\n    removeThis: true,\n    primarySort: {\n        method: SortMethod.Group,\n        direction: SortDirection.Descending\n    },\n    secondarySort: {\n        method: SortMethod.Size,\n        direction: SortDirection.Descending\n    },\n    skolemColors: new Map(),\n    tablesType: TablesType.All\n};\n\n// The table slice\nconst tableSlice = createSlice({\n    name: 'table',\n    initialState: initialState,\n    reducers: {\n        clearSelectedData (state) { state.dataSelected = [] },\n        deselectData (state, action: PayloadAction<SigFieldSkolem>) {\n            const index = state.dataSelected.indexOf(action.payload);\n            if (index !== -1) {\n                state.dataSelected.splice(index, 1);\n            }\n            state.tablesType = TablesType.Select;\n        },\n        selectData (state, action: PayloadAction<SigFieldSkolem>) {\n            if (!state.dataSelected.includes(action.payload)) {\n                state.dataSelected.push(action.payload);\n            }\n            state.tablesType = TablesType.Select;\n        },\n        setAlignment (state, action: PayloadAction<HorizontalAlignment>) { state.alignment = action.payload },\n        setLayoutDirection (state, action: PayloadAction<LayoutDirection>) { state.layoutDirection = action.payload },\n        setSort (state, action: PayloadAction<SortType>) {\n            if (state.primarySort.method !== action.payload.method) {\n                state.secondarySort = state.primarySort;\n            }\n            state.primarySort = action.payload;\n        },\n        setTableTypes (state, action: PayloadAction<TablesType>) { state.tablesType = action.payload },\n        toggleCollapseData (state) { state.collapseData = !state.collapseData },\n        toggleCollapseLayout (state) { state.collapseLayout = !state.collapseLayout },\n        toggleCollapseTables (state) { state.collapseTables = !state.collapseTables },\n        toggleHighlightSkolems (state) {\n            state.highlightSkolems = !state.highlightSkolems;\n            if (state.highlightSkolems && state.tablesType === TablesType.Skolems) {\n                state.tablesType = TablesType.All;\n            }\n        },\n        toggleRemoveBuiltin (state) { state.removeBuiltin = !state.removeBuiltin },\n        toggleRemoveEmpty (state) { state.removeEmpty = !state.removeEmpty },\n        toggleRemoveThis (state) { state.removeThis = !state.removeThis }\n    },\n    extraReducers: builder =>\n        builder.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance) {\n\n                const skolems = instance.skolems();\n\n                state.data = [\n                    ...instance.signatures(),\n                    ...instance.fields(),\n                    ...skolems\n                ];\n\n                state.skolemColors = new Map(skolems.map((skolem, i) => {\n                    return [skolem, SKOLEM_COLORS[i % skolems.length]];\n                }));\n\n                state.dataSelected = state.dataSelected.filter(item => {\n                    return state.data.find(curr => curr.id() === item.id()) !== undefined;\n                })\n\n            }\n\n        })\n});\n\nexport const {\n    clearSelectedData,\n    deselectData,\n    selectData,\n    setAlignment,\n    setLayoutDirection,\n    setSort,\n    setTableTypes,\n    toggleCollapseData,\n    toggleCollapseLayout,\n    toggleCollapseTables,\n    toggleHighlightSkolems,\n    toggleRemoveBuiltin,\n    toggleRemoveEmpty,\n    toggleRemoveThis\n} = tableSlice.actions;\n\nexport default tableSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport graphSlice from './features/graph/graphSlice';\nimport sourceSlice from './features/source/sourceSlice';\nimport sterlingSlice from './sterling/sterlingSlice';\nimport tableSlice from './features/table/tableSlice';\n\n\nexport const sterlingApp = combineReducers({\n    graphSlice,\n    sourceSlice,\n    sterlingSlice,\n    tableSlice\n});\n\nexport type RootState = ReturnType<typeof sterlingApp>;\n","import { SterlingConnection } from '../sterling/SterlingConnection';\nimport { EventDispatcher } from '../util/EventDispatcher';\n\nexport interface Expression {\n    id: number\n    expression: string\n    error: boolean\n    result: null | boolean | number | string\n}\n\nclass Evaluator extends EventDispatcher {\n\n    private _connection: SterlingConnection;\n    private _expressions: Expression[];\n    private _pending: Expression | null;\n\n    protected static _nextid: number = 0;\n\n    constructor (connection: SterlingConnection) {\n\n        super();\n\n        this._connection = connection;\n        this._expressions = [];\n        this._pending = null;\n\n        connection.addEventListener('eval', event => {\n            this._parse(event.data);\n        });\n\n    }\n\n    clear (): void {\n\n        this._expressions = [];\n\n    }\n\n    evaluate (expression: string): void {\n\n        this._request({\n            id: Evaluator._nextid++,\n            error: false,\n            expression: expression,\n            result: null\n        });\n\n    }\n\n    expressions (): Expression[] {\n\n        return this._expressions;\n\n    }\n\n    private _parse (response: string): void {\n\n        const expression = this._pending;\n        const tokens = response.match(/(-?\\d+):(.*)/);\n\n        if (tokens === null) return;\n\n        const id = parseInt(tokens[1]);\n\n        if (expression && expression.id === id) {\n\n            const result = tokens[2].trim();\n\n            if (result.slice(0, 4) === 'ERR:') {\n                expression.result = result.slice(4);\n                expression.error = true;\n            }\n            else {\n                expression.result = result;\n                expression.error = false;\n            }\n\n            this._expressions.push(expression);\n            this._setPending(null);\n\n        }\n\n    }\n\n    private _request (expression: Expression): void {\n\n        this._setPending(expression);\n\n        const submitted = this._connection.requestEvaluateExpression(\n            expression.id,\n            expression.expression\n        );\n\n        if (!submitted) {\n\n            this._parse(`${expression.id}:ERR:Error: Not Connected`);\n\n        }\n\n    }\n\n    private _setPending (expression: Expression | null): void {\n\n        this._pending = expression;\n\n        if (expression !== null) {\n\n            this.dispatchEvent({\n                type: 'pending'\n            });\n\n        } else {\n            \n            this.dispatchEvent({\n                type: 'ready'\n            });\n            \n        }\n\n    }\n\n}\n\nexport {\n    Evaluator\n}\n","import React from 'react';\n\ninterface EvaluatorTableProps {\n    result: string\n}\n\nconst EvaluatorTable: React.FunctionComponent<EvaluatorTableProps> = props => {\n\n    return (\n        <table className={'bp3-html-table bp3-html-table-condensed bp3-html-table-striped .bp3-interactive'}>\n            <tbody>\n            {\n                parseResult(props.result).map((row, i) => (\n                    <tr key={i}>\n                        {\n                            row.map((col, j) => (\n                                <td key={j}>\n                                    { col }\n                                </td>\n                            ))\n                        }\n                    </tr>\n                ))\n            }\n            </tbody>\n        </table>\n    );\n\n};\n\nfunction parseResult (result: string): string[][] {\n\n    if (result[0] === '{' && result[result.length-1] === '}') {\n\n        const text = result.slice(1, -1);\n        const rows = text.split(',');\n        return rows.map(row => {\n            return row.split('->');\n        });\n\n    }\n\n    return [];\n\n}\n\nexport default EvaluatorTable;\n","import {\n    Button,\n    Callout,\n    Icon,\n    Intent,\n    NonIdealState, Tooltip\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { Evaluator, Expression } from './Evaluator';\nimport EvaluatorTable from './EvaluatorTable';\n\nexport interface IEvaluatorProps {\n    evaluator: Evaluator\n}\n\ninterface IEvaluatorState {\n    count: number\n    expressions: Expression[]\n    history: number\n    table: boolean\n}\n\nconst MESSAGE = 'The evaluator allows you to type in Alloy expressions and see ' +\n    'their values. For example, \\'univ\\' shows the list of atoms. Type an ' +\n    'expression below and press Enter to evaluate (you can press the up and down ' +\n    'arrow keys to recall old inputs).';\n\nclass EvaluatorView extends React.Component<IEvaluatorProps, IEvaluatorState> {\n\n    private readonly _botRef: React.RefObject<HTMLDivElement>;\n    private readonly _textRef: React.RefObject<HTMLTextAreaElement>;\n\n    constructor (props: IEvaluatorProps) {\n\n        super(props);\n\n        const evaluator = props.evaluator;\n        evaluator.addEventListener('pending', this._onPending);\n        evaluator.addEventListener('ready', this._onReady);\n\n        this._botRef = React.createRef();\n        this._textRef = React.createRef();\n\n        const expressions = props.evaluator.expressions();\n        this.state = {\n            count: expressions.length,\n            expressions: expressions,\n            history: expressions.length,\n            table: false\n        }\n\n    }\n\n    componentDidMount(): void {\n\n        this._scrollDown();\n\n    }\n\n    componentDidUpdate(prevProps: Readonly<IEvaluatorProps>, prevState: Readonly<IEvaluatorState>): void {\n\n        if (prevState.count !== this.state.count) {\n\n            this._scrollDown();\n\n        }\n\n    }\n\n    componentWillUnmount(): void {\n\n        const evaluator = this.props.evaluator;\n        evaluator.removeEventListener('pending', this._onPending);\n        evaluator.removeEventListener('ready', this._onReady);\n\n    }\n\n    render (): React.ReactNode {\n\n        const state = this.state;\n        const SuccessIcon = <Icon icon={'blank'} iconSize={12}/>;\n        const ErrorIcon = <Icon icon={'cross'} iconSize={12}/>;\n\n        state.history < state.count\n            ? this._setText(state.expressions[state.history].expression)\n            : this._setText('');\n\n        return (\n            <div className={'evaluator'}>\n                <div className={'evaluator-bar bp3-dark'}>\n                    <Tooltip\n                        content={'Clear'}\n                        hoverOpenDelay={500}\n                        intent={Intent.PRIMARY}>\n                        <Button\n                            small={true}\n                            minimal={true}\n                            icon={'clean'}\n                            onClick={() => {\n                                this.props.evaluator.clear();\n                                const expressions = this.props.evaluator.expressions();\n                                this.setState({\n                                    expressions: expressions,\n                                    count: expressions.length,\n                                    history: expressions.length\n                                });\n                            }}/>\n                    </Tooltip>\n                    <Tooltip\n                        content={state.table ? 'Display Text' : 'Display Tables'}\n                        hoverOpenDelay={500}\n                        intent={Intent.PRIMARY}>\n                        <Button\n                            small={true}\n                            minimal={true}\n                            icon={state.table ? 'align-left' : 'th'}\n                            onClick={() => this.setState({ table: !state.table })}/>\n                    </Tooltip>\n                </div>\n                <div className={'evaluator-output'}>\n                    {\n                        state.expressions.length\n                            ? state.expressions.map(expression => (\n                                <Callout\n                                    key={expression.id}\n                                    icon={expression.error ? ErrorIcon : SuccessIcon}\n                                    title={expression.expression}\n                                    intent={expression.error ? Intent.DANGER : Intent.NONE}\n                                >\n                                    {\n                                        state.table && isTableable(expression) && typeof expression.result === 'string'\n                                            ? <EvaluatorTable result={expression.result}/>\n                                            : expression.result\n                                    }\n                                </Callout>\n                            ))\n                            : <NonIdealState\n                                title={'Evaluator'}\n                                description={MESSAGE}\n                                icon={'console'}/>\n                    }\n                    <div ref={this._botRef}/>\n                </div>\n                <div className={'evaluator-input'}>\n                    <textarea\n                        autoComplete={'off'}\n                        placeholder={'Enter an expression...'}\n                        spellCheck={'false'}\n                        onKeyDown={this._onKeyDown}\n                        ref={this._textRef}\n                    />\n                </div>\n            </div>\n        );\n\n    }\n\n    private _onDown = (): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            const pos = textarea.selectionStart;\n            const len = textarea.value.length;\n\n            if (pos === len) {\n\n                const history = this.state.history < this.state.count\n                    ? this.state.history + 1\n                    : this.state.count;\n\n                this.setState({\n                    history: history\n                });\n\n            }\n        }\n\n    };\n\n    private _onEnter = (): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            const value = textarea.value;\n            textarea.value = '';\n\n            if (value.length)\n                this.props.evaluator.evaluate(value);\n\n        }\n\n    };\n\n    private _onKeyDown = (event: React.KeyboardEvent): void => {\n        const key = event.key;\n        switch (key) {\n            case 'Enter':\n                event.preventDefault();\n                this._onEnter();\n                break;\n            case 'ArrowUp':\n                this._onUp();\n                break;\n            case 'ArrowDown':\n                this._onDown();\n                break;\n            default:\n                break;\n        }\n    };\n\n    private _onPending = (): void => {\n\n        this._setActive(false);\n\n    };\n\n    private _onReady = (): void => {\n\n        this._setActive(true);\n        const expressions = this.props.evaluator.expressions();\n        this.setState({\n            count: expressions.length,\n            expressions: expressions,\n            history: expressions.length\n        });\n\n    };\n\n    private _onUp = (): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            if (textarea.selectionStart === 0) {\n\n                const history = this.state.history > 0\n                    ? this.state.history - 1\n                    : 0;\n\n                this.setState({\n                    history: history\n                });\n\n            }\n\n        }\n\n    };\n\n    private _scrollDown = (): void => {\n\n        const bottom = this._botRef.current;\n\n        if (bottom) {\n\n            bottom.scrollIntoView();\n\n        }\n\n    };\n\n    private _setActive = (active: boolean): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            textarea.readOnly = !active;\n\n        }\n\n    };\n\n    private _setText = (text: string): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            textarea.value = text;\n\n        }\n\n    };\n\n}\n\nfunction isTableable (expression: Expression): boolean {\n    const r = expression.result;\n    return !expression.error\n        && typeof r === 'string'\n        && r.length > 0\n        && r[0] === '{' && r[r.length-1] === '}';\n}\n\nexport default EvaluatorView;\n","import { Button, Collapse } from '@blueprintjs/core';\nimport React, { CSSProperties } from 'react';\n\ninterface ISectionProps {\n    collapsed?: boolean\n    onToggle?: () => void\n    style?: CSSProperties\n    title?: string\n}\n\nconst Section: React.FunctionComponent<ISectionProps> = props => {\n\n    const collapseIcon = props.collapsed ? 'expand-all' : 'collapse-all';\n\n    return (\n        <div\n            className={`section ${props.collapsed ? 'collapsed' : ''}`}\n            style={props.style}>\n            {\n                !!props.title &&\n                <div className='header'>\n                    <div className='title'>\n                        {props.title.toUpperCase()}\n                    </div>\n                    {\n                        props.onToggle && <Button\n                            icon={collapseIcon}\n                            minimal={true}\n                            onClick={props.onToggle}/>\n                    }\n                </div>\n            }\n            <Collapse\n                isOpen={!props.collapsed}\n                keepChildrenMounted={true}>\n                <div className='body'>\n                    {props.children}\n                </div>\n            </Collapse>\n        </div>\n    );\n};\n\nclass SterlingDrawer extends React.Component {\n\n    static Section = Section;\n\n    render (): React.ReactNode {\n\n        return (\n            <div className={'drawer'}>\n                { this.props.children }\n            </div>\n        );\n\n    }\n\n}\n\nexport default SterlingDrawer;\n","import { Button, ButtonGroup, Tooltip } from '@blueprintjs/core';\nimport React from 'react';\nimport { backgroundGradient, COLOR_SCHEMES } from '../util';\n\ninterface QuickColorSchemeProps {\n    onClick: (scheme: string[]) => void\n}\n\nconst QuickColorScheme: React.FunctionComponent<QuickColorSchemeProps> = props => (\n    <ButtonGroup minimal={true} style={{\n        flexWrap: 'wrap',\n        maxHeight: '15px',\n        overflow: 'hidden'\n    }}>\n        {\n            COLOR_SCHEMES.map(([name, scheme]) => (\n                <Tooltip content={name} key={name}>\n                    <Button minimal={true} style={{\n                        background: backgroundGradient(scheme.slice(0, 6)),\n                        margin: '0 5px',\n                        minWidth: '40px',\n                        minHeight: '15px'\n                    }} onClick={() => props.onClick(scheme)}/>\n                </Tooltip>\n            ))\n        }\n    </ButtonGroup>\n);\n\nexport default QuickColorScheme;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport QuickColorScheme from '../../drawer-components/QuickColorScheme';\nimport { setColorScheme, toggleCollapseScheme } from './edgeStylingSlice';\n\nconst mapState = (state: RootState) => ({\n    collapse: state.graphSlice.edgeStylingSlice.collapseScheme\n});\n\nconst mapDispatch = {\n    setColorScheme,\n    toggleCollapseScheme\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype QuickEdgeStylingProps = ConnectedProps<typeof connector>;\n\nconst QuickEdgeStyling: React.FunctionComponent<QuickEdgeStylingProps> = props => {\n\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapse}\n            onToggle={props.toggleCollapseScheme}\n            title={'Quick Color Scheme'}>\n            <QuickColorScheme onClick={props.setColorScheme}/>\n        </SterlingDrawer.Section>\n    );\n};\n\nexport default connector(QuickEdgeStyling);\n","import { LabelPlacement } from '@atdyer/graph-js';\nimport { FormGroup, HTMLSelect, NumericInput } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport {\n    setBundleFactor,\n    setLabelPlacement,\n    toggleCollapseEdgeSettings\n} from './graphSettingsSlice';\n\nconst LABEL_PLACEMENT_OPTIONS = [\n    { value: 'center', label: 'Center' },\n    { value: 'join', label: 'Join' },\n    { value: 'spread', label: 'Spread' }\n];\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.graphSettingsSlice\n});\n\nconst mapDispatch = {\n    setBundleFactor,\n    setLabelPlacement,\n    toggleCollapseEdgeSettings\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype EdgeSettingsProps = ConnectedProps<typeof connector>;\n\nconst EdgeSettings: React.FunctionComponent<EdgeSettingsProps> = props => (\n    <SterlingDrawer.Section\n        collapsed={props.collapseEdgeSettings}\n        onToggle={props.toggleCollapseEdgeSettings}\n        title={'Edge Settings'}>\n        <FormGroup inline={true} label={'Bundle Factor'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                fill={false}\n                value={props.bundleFactor}\n                min={0}\n                minorStepSize={0.001}\n                stepSize={0.01}\n                majorStepSize={0.1}\n                onValueChange={value => props.setBundleFactor(value)}/>\n        </FormGroup>\n        <FormGroup inline={true} label={'Label Placement'}>\n            <HTMLSelect\n                minimal={true}\n                options={LABEL_PLACEMENT_OPTIONS}\n                value={props.edgeLabelPlacement}\n                onChange={event => {\n                    props.setLabelPlacement(event.target.value as LabelPlacement)\n                }}/>\n        </FormGroup>\n    </SterlingDrawer.Section>\n);\n\nexport default connector(EdgeSettings);\n","import { DagreLayout } from '@atdyer/graph-js';\nimport { Button, FormGroup, HTMLSelect, NumericInput } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport {\n    Alignment, Direction, Ranker,\n    setAlign,\n    setNodeSep,\n    setRankDir,\n    setRanker,\n    setRankSep,\n    toggleCollapseLayout\n} from './layoutSlice';\n\nconst ALIGN_OPTIONS = [\n    { value: 'undefined', label: '---' },\n    { value: 'UL', label: 'Bottom Left'},\n    { value: 'UR', label: 'Bottom Right'},\n    { value: 'DL', label: 'Top Left' },\n    { value: 'DR', label: 'Top Right' }\n];\n\nconst DIRECTION_OPTIONS = [\n    { value: 'TB', label: 'Bottom to Top' },\n    { value: 'BT', label: 'Top to Bottom' },\n    { value: 'LR', label: 'Left to Right' },\n    { value: 'RL', label: 'Right to Left' }\n];\n\nconst RANKER_OPTIONS = [\n    { value: 'network-simplex', label: 'Network Simplex' },\n    { value: 'tight-tree', label: 'Tight Tree' },\n    { value: 'longest-path', label: 'Longest Path' }\n];\n\nconst mapState = (state: RootState) => ({\n    collapseLayout: state.graphSlice.layoutSlice.collapseLayout,\n    graph: state.graphSlice.graphSlice.graph,\n    options: state.graphSlice.layoutSlice\n});\n\nconst mapDispatch = {\n    setAlign,\n    setNodeSep,\n    setRankDir,\n    setRanker,\n    setRankSep,\n    toggleCollapseLayout\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype LayoutProps = ConnectedProps<typeof connector>;\n\nconst Layout: React.FunctionComponent<LayoutProps> = props => {\n\n    const options = Object.assign({}, props.options);\n\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapseLayout}\n            onToggle={props.toggleCollapseLayout}\n            title={'Layout'}>\n            <FormGroup inline={true} label={'Align'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={ALIGN_OPTIONS}\n                    value={options.align === undefined ? 'undefined' : options.align}\n                    onChange={event => {\n                        const value = event.target.value === 'undefined' ? undefined : event.target.value;\n                        props.setAlign(value as Alignment)\n                    }}/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Node Separation'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    value={options.nodesep}\n                    onValueChange={value => props.setNodeSep(value)}/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Ranking Method'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={RANKER_OPTIONS}\n                    value={options.ranker}\n                    onChange={event =>\n                        props.setRanker(event.target.value as Ranker)\n                    }/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Rank Direction'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={DIRECTION_OPTIONS}\n                    value={options.rankdir}\n                    onChange={event =>\n                        props.setRankDir(event.target.value as Direction)\n                    }/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Rank Separation'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    value={options.ranksep}\n                    onValueChange={value => props.setRankSep(value)}/>\n            </FormGroup>\n            <Button\n                minimal={true}\n                text={'Apply Layout'}\n                onClick={() => {\n                    if (props.graph) {\n                        const dagre = new DagreLayout();\n                        dagre.apply(props.graph, options);\n                        props.graph.update();\n                    }\n                }}/>\n        </SterlingDrawer.Section>\n    );\n\n};\n\nexport default connector(Layout);\n","import { Button } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport { toggleCollapseZoom } from './layoutSlice';\n\nconst mapState = (state: RootState) => ({\n    collapseZoom: state.graphSlice.layoutSlice.collapseZoom,\n    graph: state.graphSlice.graphSlice.graph\n});\n\nconst mapDispatch = {\n    toggleCollapseZoom\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype ZoomSettingsProps = ConnectedProps<typeof connector>;\n\nconst ZoomSettings: React.FunctionComponent<ZoomSettingsProps> = props => (\n    <SterlingDrawer.Section\n        collapsed={props.collapseZoom}\n        onToggle={props.toggleCollapseZoom}\n        title={'Zoom Settings'}>\n        <Button\n            icon={'home'}\n            text={'Default Zoom'}\n            minimal={true}\n            onClick={() => {\n                props.graph.zoomToHome();\n            }}/>\n        <Button\n            icon={'zoom-to-fit'}\n            text={'Zoom to Fit'}\n            minimal={true}\n            onClick={() => {\n                props.graph.zoomToFit();\n            }}/>\n    </SterlingDrawer.Section>\n);\n\nexport default connector(ZoomSettings);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport QuickColorScheme from '../../drawer-components/QuickColorScheme';\nimport { setColorScheme, toggleCollapseScheme } from './nodeStylingSlice';\n\nconst mapState = (state: RootState) => ({\n    collapse: state.graphSlice.nodeStylingSlice.collapseScheme\n});\n\nconst mapDispatch = {\n    setColorScheme,\n    toggleCollapseScheme\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype QuickNodeStylingProps = ConnectedProps<typeof connector>;\n\nconst QuickNodeStyling: React.FunctionComponent<QuickNodeStylingProps> = props => {\n\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapse}\n            onToggle={props.toggleCollapseScheme}\n            title={'Quick Color Scheme'}>\n            <QuickColorScheme onClick={props.setColorScheme}/>\n        </SterlingDrawer.Section>\n    )\n\n};\n\nexport default connector(QuickNodeStyling);\n","import {\n    Button,\n    ControlGroup,\n    HTMLSelect,\n    Popover,\n    Position,\n    Text\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport { POPPER_MODIFIERS } from '../../util';\nimport {\n    addProjection,\n    nextAtom,\n    previousAtom,\n    removeProjection,\n    setProjection,\n    toggleCollapseProjections\n} from '../data/dataSlice';\n\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.dataSlice\n});\n\nconst mapDispatch = {\n    addProjection,\n    nextAtom,\n    previousAtom,\n    removeProjection,\n    setProjection,\n    toggleCollapseProjections\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype ProjectionsProps = ConnectedProps<typeof connector>;\n\nconst Projections: React.FunctionComponent<ProjectionsProps> = props => {\n\n    const projections = props.projections.toArray();\n\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapseProjections}\n            onToggle={props.toggleCollapseProjections}\n            title={'Projections'}>\n            <div className={'projections'}>\n                {\n                    projections.map(projection => {\n                        const sig = projection[0];\n                        const atom = projection[1];\n                        const atoms = props.atoms.get(sig) || [];\n                        return <React.Fragment key={sig}>\n                            <Text ellipsize={true}>{ sig }</Text>\n                            <HTMLSelect\n                                minimal={true}\n                                onChange={event => {\n                                    props.setProjection({\n                                        sig: sig,\n                                        atom: event.target.value\n                                    })\n                                }}\n                                options={atoms}\n                                value={atom}/>\n                            <div className={'buttons'}>\n                                <Button\n                                    icon={'chevron-left'}\n                                    minimal={true}\n                                    onClick={() => props.previousAtom(sig)}/>\n                                <Button\n                                    icon={'cross'}\n                                    minimal={true}\n                                    onClick={() => props.removeProjection(sig)}/>\n                                <Button\n                                    icon={'chevron-right'}\n                                    minimal={true}\n                                    onClick={() => props.nextAtom(sig)}/>\n                            </div>\n                        </React.Fragment>\n                    })\n                }\n            </div>\n            {\n                props.unprojected.size > 0 && (\n                    <Popover\n                        className={'centered'}\n                        hasBackdrop={true}\n                        modifiers={POPPER_MODIFIERS}\n                        position={Position.BOTTOM}\n                        usePortal={true}\n                        wrapperTagName={'div'}>\n                        <Button\n                            icon={'add'}\n                            minimal={true}\n                            text={'Add Projection'}/>\n                        <ControlGroup vertical={true}>\n                            {\n                                props.unprojected.map(sig => (\n                                    <Button\n                                        key={sig}\n                                        minimal={true}\n                                        onClick={() => props.addProjection(sig)}\n                                        text={sig}/>\n                                ))\n                            }\n                        </ControlGroup>\n                    </Popover>\n                )\n            }\n        </SterlingDrawer.Section>\n    );\n\n};\n\nexport default connector(Projections);\n","import {\n    Button,\n    FormGroup,\n    NumericInput,\n    Popover,\n    Position\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {\n    background,\n    POPPER_MODIFIERS,\n    DEFAULT_COLORS,\n    foreground\n} from '../util';\n\ninterface ILabelStyle {\n    color?: string\n    size?: number\n    onChangeColor: (color: string | null) => void\n    onChangeSize: (size: string) => void\n}\n\nconst LabelStyler: React.FunctionComponent<ILabelStyle> = props => {\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Label Size (px)'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    min={0}\n                    minorStepSize={null}\n                    onValueChange={(_, strVal) => props.onChangeSize(strVal)}\n                    placeholder={'Inheret'}\n                    value={props.size}/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Label Color'}>\n                {\n                    props.color &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeColor(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(props.color),\n                            color: foreground(props.color)\n                        }}\n                        text={props.color || 'Inheret'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(props.color)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeColor(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n        </>\n    );\n\n};\n\nexport default LabelStyler;\n","import { IconName, ITreeNode, MaybeElement } from '@blueprintjs/core';\nimport { Map } from 'immutable';\n\nexport type Tree = {\n    id: string\n    icon?: IconName | MaybeElement\n    label?: string | JSX.Element\n    children: Tree[]\n}\n\nfunction mapTreeToNodes (tree: Tree | null, collapsed: Map<string, boolean>, selected: string | null): ITreeNode {\n\n    if (tree === null) return {\n        id: 'error',\n        label: 'No Instance',\n        icon: 'error'\n    };\n\n    const populate = (t: Tree): ITreeNode => {\n        const childNodes = t.children.map(populate);\n        return {\n            id: t.id,\n            label: t.label ? t.label : t.id,\n            icon: t.icon,\n            isExpanded: !collapsed.get(t.id),\n            isSelected: t.id === selected,\n            hasCaret: !!childNodes.length,\n            childNodes\n        }\n    };\n\n    return populate(tree);\n\n}\n\nexport {\n    mapTreeToNodes\n}\n","import { Button, FormGroup, NumericInput, Popover } from '@blueprintjs/core';\nimport { Position } from '@blueprintjs/core/lib/esm/common/position';\nimport React from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {\n    background,\n    DEFAULT_COLORS,\n    foreground,\n    POPPER_MODIFIERS\n} from '../../../util';\n\ninterface ILinkStyle {\n    stroke?: string\n    strokeWidth?: number\n    onChangeStroke: (color: string | null) => void\n    onChangeStrokeWidth: (width: string) => void\n}\n\nconst LinkStyler: React.FunctionComponent<ILinkStyle> = props => {\n\n    const stroke = props.stroke;\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Stroke'}>\n                {\n                    props.stroke &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeStroke(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(stroke),\n                            color: foreground(stroke)\n                        }}\n                        text={stroke || 'Inherit'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(stroke)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeStroke(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n            <FormGroup inline={true} label={'Stroke Width'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    min={0}\n                    onValueChange={(_, strVal) => props.onChangeStrokeWidth(strVal)}\n                    placeholder={'Inherit'}\n                    value={props.strokeWidth}/>\n            </FormGroup>\n        </>\n    );\n\n};\n\nexport default LinkStyler;\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    Divider, FormGroup,\n    NonIdealState, Switch,\n    Tooltip,\n    Tree\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport LabelStyler from '../../drawer-components/LabelStyler';\nimport { mapTreeToNodes } from '../../graphTypes';\nimport LinkStyler from './components/LinkStyler';\nimport {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setLabelColor,\n    setLabelSize,\n    setStroke,\n    setStrokeWidth,\n    toggleCollapseEdgeStyle,\n    toggleHideEmptyFields\n} from './edgeStylingSlice';\nimport { toggleAsAttribute } from '../data/dataSlice';\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.edgeStylingSlice,\n    asAttribute: state.graphSlice.dataSlice.asAttribute\n});\n\nconst mapDispatch = {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setLabelColor,\n    setLabelSize,\n    setStroke,\n    setStrokeWidth,\n    toggleAsAttribute,\n    toggleCollapseEdgeStyle,\n    toggleHideEmptyFields\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype EdgeStylingProps = ConnectedProps<typeof connector>;\n\nconst EdgeStyling: React.FunctionComponent<EdgeStylingProps> = props => {\n\n    const selected = props.selected;\n\n    // Link properties\n    const link = selected ? props.linkStyles.get(selected) || {} : {};\n    const attr = selected ? props.asAttribute.get(selected) : false;\n    const stroke = link ? link.stroke : undefined;\n    const strokeWidth = link ? link.strokeWidth : undefined;\n\n    // Label properties\n    const label = selected ? props.labelStyles.get(selected) || {} : {};\n    const labelColor = label ? label.color : undefined;\n    const font = label ? label.font : undefined;\n    const match = font ? font.match(/(\\d*)px/) : [];\n    const labelSize = match\n        ? match.length > 1\n            ? parseInt(match[1])\n            : undefined\n        : undefined;\n\n    // Tree properties\n    const fieldTree = mapTreeToNodes(props.treeField, props.collapsed, selected);\n    const skolemTree = mapTreeToNodes(props.treeSkolem, props.collapsed, selected);\n    const isempty = fieldTree.id === 'error' && skolemTree.id === 'error';\n    const hasskolem = skolemTree.childNodes && skolemTree.childNodes.length;\n    const trees = (isempty || !hasskolem) ? [fieldTree] : [fieldTree, skolemTree];\n    const hideFld = props.hideEmptyFields;\n    fieldTree.secondaryLabel = (\n        <Tooltip\n            content={hideFld ? 'Show Empty Fields' : 'Hide Empty Fields'}>\n            <Button\n                icon={hideFld ? 'eye-off' : 'eye-open'}\n                minimal={true}\n                onClick={props.toggleHideEmptyFields}/>\n        </Tooltip>\n    );\n\n\n    return (\n        <>\n            <SterlingDrawer.Section\n                collapsed={props.collapseEdgeStyle}\n                onToggle={props.toggleCollapseEdgeStyle}\n                title={'Edge Styling'}>\n                <Tree\n                    contents={trees}\n                    onNodeClick={node => props.selectTreeNode(node.id.toString())}\n                    onNodeCollapse={node => props.collapseTreeNode(node.id.toString())}\n                    onNodeExpand={node => props.expandTreeNode(node.id.toString())}/>\n                <Divider/>\n                {\n                    selected\n                        ? (\n                            <>\n                                <FormGroup>\n                                    <Switch\n                                        alignIndicator={Alignment.RIGHT}\n                                        checked={attr}\n                                        label={'Show as Attribute'}\n                                        onChange={() => props.toggleAsAttribute(selected)}/>\n                                </FormGroup>\n                                <LinkStyler\n                                    stroke={stroke}\n                                    strokeWidth={strokeWidth}\n                                    onChangeStroke={props.setStroke}\n                                    onChangeStrokeWidth={props.setStrokeWidth}/>\n                                <LabelStyler\n                                    color={labelColor}\n                                    size={labelSize}\n                                    onChangeColor={props.setLabelColor}\n                                    onChangeSize={props.setLabelSize}/>\n                                <ButtonGroup\n                                    fill={true}\n                                    minimal={true}>\n                                    <Button\n                                        icon={'clean'}\n                                        onClick={props.clearCurrent}\n                                        text={'Clear Selected'}/>\n                                    <Button\n                                        icon={'clean'}\n                                        onClick={props.clearAll}\n                                        text={'Clear All'}/>\n                                </ButtonGroup>\n                            </>\n                        )\n                        : (\n                            <NonIdealState\n                                title={'Edge Styling'}\n                                description={'Select a field or skolem from the tree'}\n                                icon={'style'}/>\n\n                        )\n                }\n            </SterlingDrawer.Section>\n        </>\n    )\n};\n\nexport default connector(EdgeStyling);\n","import { Alignment, Switch } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport {\n    toggleAxesVisible,\n    toggleCollapseGraphSettings,\n    toggleGridVisible\n} from './graphSettingsSlice';\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.graphSettingsSlice\n});\n\nconst mapDispatch = {\n    toggleAxesVisible,\n    toggleCollapseGraphSettings,\n    toggleGridVisible\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype GraphSettingsProps = ConnectedProps<typeof connector>;\n\nconst GraphSettings: React.FunctionComponent<GraphSettingsProps> = props => (\n    <SterlingDrawer.Section\n        collapsed={props.collapseGraphSettings}\n        onToggle={props.toggleCollapseGraphSettings}\n        title={'Graph Settings'}>\n        <Switch\n            alignIndicator={Alignment.RIGHT}\n            checked={props.axesVisible}\n            label={'Display Axes'}\n            onChange={props.toggleAxesVisible}/>\n        <Switch\n            alignIndicator={Alignment.RIGHT}\n            checked={props.gridVisible}\n            label={'Display Grid'}\n            onChange={props.toggleGridVisible}/>\n    </SterlingDrawer.Section>\n);\n\nexport default connector(GraphSettings);\n","import {\n    CircleLayout,\n    DagreLayout,\n    GridLayout,\n    RowLayout\n} from '@atdyer/graph-js';\nimport { Button, ButtonGroup, Tooltip } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport { toggleCollapseQuickLayout } from './layoutSlice';\n\n// Map redux state to layout settings props\nconst mapState = (state: RootState) => ({\n    collapseQuickLayout: state.graphSlice.layoutSlice.collapseQuickLayout,\n    graph: state.graphSlice.graphSlice.graph,\n    instance: state.sterlingSlice.instance\n});\n\nconst mapDispatch = {\n    toggleCollapseQuickLayout\n};\n\n// Create connector\nconst connector = connect(mapState, mapDispatch);\n\n// Create props for things from redux\ntype LayoutProps = ConnectedProps<typeof connector>;\n\n// The layout and projections component\nconst QuickLayout: React.FunctionComponent<LayoutProps> = props => {\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapseQuickLayout}\n            onToggle={props.toggleCollapseQuickLayout}\n            title={'Quick Layout'}>\n            <ButtonGroup minimal={true}>\n                <Tooltip content={'Circle Layout'}>\n                    <Button icon={'layout-circle'} onClick={() => {\n                        if (props.graph) {\n                            const circle = new CircleLayout();\n                            circle.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n                <Tooltip content={'Grid Layout'}>\n                    <Button icon={'layout-grid'} onClick={() => {\n                        if (props.graph) {\n                            const grid = new GridLayout();\n                            grid.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n                <Tooltip content={'Grouped Row Layout'}>\n                    <Button icon={'layout-linear'} onClick={() => {\n                        if (props.graph && props.instance) {\n                            const row = new RowLayout();\n                            const univ = props.instance.signatures().find(sig => sig.id() === 'univ');\n                            if (univ) {\n                                row.groups(univ.subTypes().map(sig => sig.atoms(true).map(atom => atom.name())))\n                            }\n                            row.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n                <Tooltip content={'Layered Layout'}>\n                    <Button icon={'layout-hierarchy'} onClick={() => {\n                        if (props.graph) {\n                            const dagre = new DagreLayout();\n                            dagre.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n            </ButtonGroup>\n        </SterlingDrawer.Section>\n    );\n};\n\nexport default connector(QuickLayout);\n","import { CircleStyle, RectangleStyle, ShapeStyle } from '@atdyer/graph-js';\nimport { FormGroup, HTMLSelect, NumericInput } from '@blueprintjs/core';\nimport React from 'react';\n\ninterface IShapeSelector {\n    shape: ShapeStyle\n    onSetHeight: (height: string) => void\n    onSetRadius: (radius: string) => void\n    onSetShape: (shape: 'circle' | 'rectangle' | null) => void\n    onSetWidth: (width: string) => void\n}\n\nconst ShapeSelector: React.FunctionComponent<IShapeSelector> = props => {\n\n    const shape = props.shape;\n    const type = shape ? shape.type || 'inherit' : 'inherit';\n\n    const options = [\n        { value: 'inherit', label: 'Inherit' },\n        { value: 'circle', label: 'Circle' },\n        { value: 'rectangle', label: 'Rectangle' }\n    ];\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Shape'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={options}\n                    value={type}\n                    onChange={event => {\n                        let value = event.target.value;\n                        props.onSetShape(valueToShape(value));\n                    }}\n                />\n            </FormGroup>\n            {\n                type === 'circle' ?\n                    <CircleProps\n                        style={shape as CircleStyle}\n                        onSetRadius={props.onSetRadius}/> :\n                type === 'rectangle' ?\n                    <RectangleProps\n                        style={shape as RectangleStyle}\n                        onSetWidth={props.onSetWidth}\n                        onSetHeight={props.onSetHeight}/> :\n                null\n            }\n        </>\n    )\n};\n\ninterface ICircleProps {\n    style: CircleStyle\n    onSetRadius: (radius: string) => void\n}\nconst CircleProps: React.FunctionComponent<ICircleProps> = props => {\n    const radius = props.style.radius;\n    return (\n        <FormGroup inline={true} label={'Radius'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                fill={false}\n                min={0}\n                onValueChange={(_, strVal) => props.onSetRadius(strVal)}\n                placeholder={'Inherit'}\n                value={radius || undefined}/>\n        </FormGroup>\n    )\n};\n\ninterface IRectangleProps {\n    style: RectangleStyle,\n    onSetHeight: (height: string) => void\n    onSetWidth: (width: string) => void\n}\nconst RectangleProps: React.FunctionComponent<IRectangleProps> = props => {\n    const width = props.style.width;\n    const height = props.style.height;\n    return <>\n        <FormGroup inline={true} label={'Width'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                fill={false}\n                min={0}\n                onValueChange={(_, strVal) => props.onSetWidth(strVal)}\n                placeholder={'Inherit'}\n                value={width || undefined}\n                />\n        </FormGroup>\n        <FormGroup inline={true} label={'Height'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                min={0}\n                onValueChange={(_, strVal) => props.onSetHeight(strVal)}\n                placeholder={'Inherit'}\n                value={height || undefined}\n            />\n        </FormGroup>\n    </>;\n};\n\nfunction valueToShape (value: string): (null | 'circle' | 'rectangle') {\n    if (value === 'circle' || value === 'rectangle') return value;\n    return null;\n}\n\nexport default ShapeSelector;\n","import {\n    Button,\n    FormGroup,\n    NumericInput,\n    Popover,\n    Position\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {\n    background,\n    foreground,\n    POPPER_MODIFIERS,\n    DEFAULT_COLORS\n} from '../../../util';\n\ninterface IShapeStyle {\n    fill?: string\n    stroke?: string\n    strokeWidth?: number\n    onChangeFill: (color: string|null) => void\n    onChangeStroke: (color: string|null) => void\n    onChangeStrokeWidth: (width: string) => void\n}\n\nconst ShapeStyler: React.FunctionComponent<IShapeStyle> = props => {\n\n    const fill = props.fill;\n    const stroke = props.stroke;\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Fill'}>\n                {\n                    fill &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeFill(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(fill),\n                            color: foreground(fill)\n                        }}\n                        text={fill || 'Inherit'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(fill)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeFill(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n            <FormGroup inline={true} label={'Stroke'}>\n                {\n                    stroke &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeStroke(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(stroke),\n                            color: foreground(stroke)\n                        }}\n                        text={stroke || 'Inherit'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(stroke)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeStroke(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n            <FormGroup inline={true} label={'Stroke Width'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    min={-1}\n                    onValueChange={(_, strVal) => props.onChangeStrokeWidth(strVal)}\n                    placeholder={'Inherit'}\n                    value={props.strokeWidth}/>\n            </FormGroup>\n        </>\n    );\n};\n\nexport default ShapeStyler;\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    Divider, FormGroup,\n    NonIdealState, Switch,\n    Tooltip,\n    Tree\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport LabelStyler from '../../drawer-components/LabelStyler';\nimport { mapTreeToNodes } from '../../graphTypes';\nimport ShapeSelector from './components/ShapeSelector';\nimport ShapeStyler from './components/ShapeStyler';\nimport {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setFill,\n    setHeight,\n    setLabelColor,\n    setLabelSize,\n    setRadius,\n    setShape,\n    setStroke,\n    setStrokeWidth,\n    setWidth,\n    toggleCollapseNodeStyle,\n    toggleHideDisconnected,\n    toggleHideEmptySets\n} from './nodeStylingSlice';\n\n// Map redux state to node styling props\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.nodeStylingSlice\n});\n\n// Actions\nconst mapDispatch = {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setFill,\n    setHeight,\n    setLabelColor,\n    setLabelSize,\n    setRadius,\n    setShape,\n    setStroke,\n    setStrokeWidth,\n    setWidth,\n    toggleCollapseNodeStyle,\n    toggleHideDisconnected,\n    toggleHideEmptySets\n};\n\n// Create connector\nconst connector = connect(mapState, mapDispatch);\n\n// Create props for things from redux\ntype NodeStylingProps = ConnectedProps<typeof connector>;\n\nconst NodeStyling: React.FunctionComponent<NodeStylingProps> = props => {\n\n    const selected = props.selected;\n\n    // Hide disconnected\n    const hideDisconnected = props.selected\n        ? props.hideDisconnected.get(props.selected)\n        : false;\n\n    // Shape properties\n    const shape = selected ? props.shapes.get(selected) || {} : {};\n    const fill = shape ? shape.fill : undefined;\n    const stroke = shape ? shape.stroke : undefined;\n    const strokeWidth = shape ? shape.strokeWidth : undefined;\n\n    // Label properties\n    const label = selected ? props.labels.get(selected) || {} : {};\n    const labelColor = label ? label.color : undefined;\n    const font = label ? label.font : undefined;\n    const match = font ? font.match(/(\\d*)px/) : [];\n    const labelSize = match\n        ? match.length > 1\n            ? parseInt(match[1])\n            : undefined\n        : undefined;\n\n    // Tree properties\n    const tree = mapTreeToNodes(props.nodeTree, props.collapsed, selected);\n    const hide = props.hideEmptySets;\n    tree.secondaryLabel = (\n        <Tooltip\n            content={hide ? 'Show Empty Sets' : 'Hide Empty Sets'}>\n            <Button\n                icon={hide ? 'eye-off' : 'eye-open'}\n                minimal={true}\n                onClick={props.toggleHideEmptySets}/>\n        </Tooltip>\n    );\n\n\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapseNodeStyle}\n            onToggle={props.toggleCollapseNodeStyle}\n            title={'Node Styling'}>\n            <Tree\n                contents={[tree]}\n                onNodeClick={node => props.selectTreeNode(node.id.toString())}\n                onNodeCollapse={node => props.collapseTreeNode(node.id.toString())}\n                onNodeExpand={node => props.expandTreeNode(node.id.toString())}\n            />\n            <Divider/>\n            {\n                selected\n                    ? (\n                        <>\n                            <FormGroup\n                                contentClassName={'fill'}\n                                inline={true}>\n                                <Switch\n                                    alignIndicator={Alignment.RIGHT}\n                                    checked={hideDisconnected}\n                                    onChange={props.toggleHideDisconnected}\n                                    label={'Hide Disconnected Nodes'}/>\n                            </FormGroup>\n                            <ShapeSelector\n                                shape={shape}\n                                onSetHeight={props.setHeight}\n                                onSetRadius={props.setRadius}\n                                onSetShape={props.setShape}\n                                onSetWidth={props.setWidth}\n                            />\n                            <ShapeStyler\n                                fill={fill}\n                                stroke={stroke}\n                                strokeWidth={strokeWidth}\n                                onChangeFill={props.setFill}\n                                onChangeStroke={props.setStroke}\n                                onChangeStrokeWidth={props.setStrokeWidth}\n                            />\n                            <LabelStyler\n                                color={labelColor}\n                                size={labelSize}\n                                onChangeColor={props.setLabelColor}\n                                onChangeSize={props.setLabelSize}/>\n                            <ButtonGroup\n                                fill={true}\n                                minimal={true}>\n                                <Button\n                                    icon={'clean'}\n                                    onClick={props.clearCurrent}\n                                    text={'Clear Selected'}/>\n                                <Button\n                                    icon={'clean'}\n                                    onClick={props.clearAll}\n                                    text={'Clear All'}/>\n                            </ButtonGroup>\n                        </>\n                    )\n                    : (\n                        <NonIdealState\n                            title={'Node Styling'}\n                            description={'Select a type or set from the tree'}\n                            icon={'style'}/>\n                    )\n            }\n\n        </SterlingDrawer.Section>\n    );\n};\n\nexport default connector(NodeStyling);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport QuickEdgeStyling from './drawer-views/edge-styling/QuickEdgeStyling';\nimport EdgeSettings from './drawer-views/graph-settings/EdgeSettings';\nimport Layout from './drawer-views/layout/Layout';\nimport ZoomSettings from './drawer-views/layout/ZoomSettings';\nimport QuickNodeStyling from './drawer-views/node-styling/QuickNodeStyling';\nimport Projections from './drawer-views/projections/Projections';\nimport EdgeStyling from './drawer-views/edge-styling/EdgeStyling';\nimport GraphSettings from './drawer-views/graph-settings/GraphSettings';\nimport QuickLayout from './drawer-views/layout/QuickLayout';\nimport NodeStyling from './drawer-views/node-styling/NodeStyling';\n\n// Map redux state to graph settings props\nconst mapState = (state: RootState) => ({\n    view: state.sterlingSlice.graphView\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype GraphStageProps = ConnectedProps<typeof connector>;\n\n// The graph settings component\nconst GraphDrawer: React.FunctionComponent<GraphStageProps> = props => {\n\n    if (props.view === 'node') return (\n        <>\n            <Projections/>\n            <QuickNodeStyling/>\n            <NodeStyling/>\n        </>\n    );\n    if (props.view === 'edge') return (\n        <>\n            <QuickEdgeStyling/>\n            <EdgeStyling/>\n        </>\n    );\n    if (props.view === 'layout') return (\n        <>\n            <QuickLayout/>\n            <Layout/>\n            <ZoomSettings/>\n        </>\n    );\n    if (props.view === 'settings') return (\n        <>\n            <GraphSettings/>\n            <EdgeSettings/>\n        </>\n    );\n\n    return null;\n};\n\nexport default connector(GraphDrawer);\n","import {\n    cloneLabelStyle,\n    cloneShapeStyle, DagreLayout,\n    EdgeStyle, Graph, Node,\n    NodeStyle\n} from '@atdyer/graph-js';\nimport { NonIdealState } from '@blueprintjs/core';\nimport {\n    AlloyField,\n    AlloyInstance,\n    AlloySignature,\n    AlloySkolem\n} from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport { generateGraph } from './graphData';\n\nconst DEFAULT_EDGE_STYLES: EdgeStyle[] = [];\n\nconst DEFAULT_NODE_STYLES: NodeStyle[] = [{\n    nodes: [],\n    shape: { type: 'circle' }\n}];\n\n// Map redux state to graph settings props\nconst mapState = (state: RootState) => ({\n    asAttribute: state.graphSlice.dataSlice.asAttribute,\n    bundleFactor: state.graphSlice.graphSettingsSlice.bundleFactor,\n    description: state.sterlingSlice.welcomeDescription,\n    edgeLabelPlacement: state.graphSlice.graphSettingsSlice.edgeLabelPlacement,\n    edgeLabels: state.graphSlice.edgeStylingSlice.labelStyles,\n    graph: state.graphSlice.graphSlice.graph,\n    hideDisconnected: state.graphSlice.nodeStylingSlice.hideDisconnected,\n    instance: state.sterlingSlice.instance,\n    links: state.graphSlice.edgeStylingSlice.linkStyles,\n    nodeLabels: state.graphSlice.nodeStylingSlice.labels,\n    projections: state.graphSlice.dataSlice.projections,\n    shapes: state.graphSlice.nodeStylingSlice.shapes,\n    settings: state.graphSlice.graphSettingsSlice,\n    title: state.sterlingSlice.welcomeTitle\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype GraphStageProps = ConnectedProps<typeof connector>;\n\n// Create a node cache\nconst NODE_CACHE = new Map<string, Node>();\n\n// The graph stage component\nclass GraphStage extends React.Component<GraphStageProps> {\n\n    private _ref: React.RefObject<HTMLCanvasElement>;\n\n    constructor (props: GraphStageProps) {\n\n        super(props);\n\n        this._ref = React.createRef<HTMLCanvasElement>();\n\n    }\n\n    componentDidMount (): void {\n\n        const canvas = this._ref.current;\n        const props = this.props;\n        const graph = props.graph;\n        const instance = props.instance;\n\n        if (instance) this._update(graph, instance);\n        if (canvas) this.props.graph.canvas(canvas);\n\n        graph.update();\n\n    }\n\n    componentDidUpdate (prevProps: GraphStageProps): void {\n\n        const props = this.props;\n        const graph = props.graph;\n        const instance = props.instance;\n        const common = prevProps.instance && instance ? anyInCommon(prevProps.instance, instance) : false;\n\n        if (instance) this._update(graph, instance);\n\n        // Always update the layout for the Forge folks\n        // const didProjectionsUpdate = prevProps.projections !== props.projections;\n        //\n        // if (!prevProps.instance || props.instance !== prevProps.instance || didProjectionsUpdate) {\n        //     const dagre = new DagreLayout();\n        //     dagre.apply(graph, {\n        //         nodesep: 100,\n        //         rankdir: 'BT',\n        //         ranksep: 150\n        //     });\n        // }\n\n        if (!common) {\n            NODE_CACHE.clear();\n        }\n\n        if (!prevProps.instance || (instance && !common)) {\n            const dagre = new DagreLayout();\n            dagre.apply(graph, {\n                nodesep: 100,\n                rankdir: 'BT',\n                ranksep: 150\n            });\n        }\n\n        graph.update();\n\n    }\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        return this.props.instance\n            ? <canvas className={'graph'} ref={this._ref}/>\n            : <NonIdealState\n                title={props.title}\n                description={props.description}\n                icon={'graph'}/>;\n\n    }\n\n    private _buildEdgeStyles (): EdgeStyle[] {\n\n        const instance = this.props.instance;\n        const links = this.props.links;\n        const labels = this.props.edgeLabels;\n\n        if (!instance) return DEFAULT_EDGE_STYLES;\n\n        const fields = instance.fields();\n        const skolems = instance.skolems().filter(s => s.arity() > 1);\n\n        const toStyle = (item: AlloyField | AlloySkolem): EdgeStyle => {\n            const id = item.id();\n            return {\n                groups: [id],\n                link: links.get(id),\n                label: labels.get(id)\n            }\n        };\n\n        const fieldStyle: EdgeStyle = {\n            groups: [],\n            link: links.get('Fields'),\n            label: labels.get('Fields'),\n            children: fields.map(toStyle)\n        };\n\n        const skolemStyle: EdgeStyle = {\n            groups: [],\n            link: links.get('Skolems'),\n            label: labels.get('Skolems'),\n            children: skolems.map(toStyle)\n        };\n\n        return [fieldStyle, skolemStyle];\n\n    }\n\n    private _buildNodeStyles (): NodeStyle[] {\n\n        const instance = this.props.instance;\n        const shapes = this.props.shapes;\n        const labels = this.props.nodeLabels;\n\n        if (!instance) return DEFAULT_NODE_STYLES;\n\n        const univ = instance.signatures().find(sig => sig.id() === 'univ');\n\n        if (!univ) return DEFAULT_NODE_STYLES;\n\n        const populate = (sig: AlloySignature): NodeStyle => {\n\n            const children = sig.subTypes().map(populate);\n            const shape = shapes.get(sig.id());\n            const label = labels.get(sig.id());\n\n            return {\n                nodes: sig.atoms().map(atom => atom.name()),\n                shape: shape ? cloneShapeStyle(shape) : undefined,\n                label: label ? cloneLabelStyle(label) : undefined,\n                children\n            }\n\n        };\n\n        const styletree = populate(univ);\n        if (!styletree.shape) styletree.shape = {};\n        if (!styletree.shape.type) styletree.shape.type = 'rectangle';\n\n        return [styletree];\n\n    }\n\n    private _update (graph: Graph, instance: AlloyInstance): void {\n\n        const props = this.props;\n        const settings = props.settings;\n\n        if (instance) {\n\n            const [nodes, edges] = generateGraph(\n                instance,\n                graph.nodes(),\n                NODE_CACHE,\n                props.projections,\n                props.asAttribute,\n                props.hideDisconnected\n            );\n\n            // Cache the nodes\n            nodes.forEach(node => NODE_CACHE.set(node.id, node));\n\n            // Set the nodes and edges\n            graph.nodes(nodes);\n            graph.edges(edges);\n            graph.bundleFactor(props.bundleFactor);\n            graph.edgeLabelPlacement(props.edgeLabelPlacement);\n\n            // Create the styles\n            graph.nodeStyles(this._buildNodeStyles());\n            graph.edgeStyles(this._buildEdgeStyles());\n\n        } else {\n\n            graph.nodes([]);\n            graph.edges([]);\n\n        }\n\n        graph.axesVisible(settings.axesVisible);\n        graph.gridVisible(settings.gridVisible);\n\n        const canvas = this._ref.current;\n        if (canvas) this.props.graph.canvas(canvas);\n\n    }\n\n}\n\nfunction anyInCommon (a: AlloyInstance, b: AlloyInstance): boolean {\n    const atoms = new Set();\n    a.atoms().forEach(atom => {\n        if (!atom.type().isBuiltin()) atoms.add(atom.id());\n    });\n    const batoms = b.atoms();\n    for (let i=0; i<batoms.length; ++i) {\n        const atom = batoms[i];\n        if (!atom.type().isBuiltin() && atoms.has(atom.id())) return true;\n    }\n    return false;\n}\n\nexport default connector(GraphStage);\n","import { Edge, Node } from '@atdyer/graph-js';\nimport {\n    AlloyAtom,\n    AlloyField,\n    AlloyInstance,\n    AlloySignature,\n    AlloySkolem,\n    AlloyTuple\n} from 'alloy-ts';\nimport { Map as IMap, Set } from 'immutable';\nimport { isDefined } from 'ts-is-present';\n\nfunction generateGraph (\n    instance: AlloyInstance,\n    existingNodes: Node[],\n    nodeCache: Map<string, Node>,\n    projections: IMap<string, string>,\n    attributes: IMap<string, boolean>,\n    hideDisconnected: IMap<string, boolean>\n): [Node[], Edge[]] {\n\n    /**\n     * Need instance, existing nodes, projections, fields that are rendered as attributes, and\n     * whether or not to render disconnected nodes for each signature.\n     * With these five things we can build the set of nodes (updating any existing ones):\n     * {\n     *     id: atom name\n     *     x: 0\n     *     y: 0\n     *     labels: [\n     *         ...skolems,\n     *         ...fields as attributes\n     *     ]\n     * }\n     *\n     * and the set of edges:\n     * {\n     *     source: source node (after projections)\n     *     target: target node (after projections)\n     *     group: field or skolem name\n     *     label: field or skolem name [any atom names that fall betweet source and target]\n     * }\n     */\n\n    // Create a map of Signature objects to their projected Atom objects and a\n    // set of all projected atoms\n    const _projections: IMap<AlloySignature, AlloyAtom|undefined> = IMap(instance.signatures().map(sig => {\n        const id = sig.id();\n        return projections.has(id)\n            ? [sig, getAtom(projections.get(id)!)]\n            : [sig, undefined];\n    }));\n\n    // Project every tuple of every field, remove empty tuples and empty fields\n    const fields = IMap<AlloyField, AlloyTuple[]>(instance.fields().map(field => {\n        return [\n            field,\n            field.tuples().map(project).filter(isDefined).filter(hasAtoms)\n        ];\n    })).filter(tuples => tuples.length > 0);\n\n    // Project every tuple of every skolem, remove empty tuples and empty skolems\n    const skolems = IMap<AlloySkolem, AlloyTuple[]>(instance.skolems().map(skolem => {\n        return [\n            skolem,\n            skolem.tuples().map(project).filter(isDefined).filter(hasAtoms)\n        ];\n    })).filter(tuples => tuples.length > 0);\n\n    // Check for anything wonky happening during projection. Within a single\n    // field or skolem, the arity of every tuple should be identical and positive\n    // const fieldsOK = fields.every(tuplesSameArity);\n    // const skolemsOK = skolems.every(tuplesSameArity);\n    // if (!fieldsOK || !skolemsOK) {\n    //     console.error('OH GOD NO!!!!');\n    // } else {\n    //     console.log('HOORAY!');\n    // }\n\n    // Separate fields into those that will be edges and those that will be labels.\n    // Fields that will be labels must have an arity greater than 1 (otherwise the label would be empty)\n    const edgeFields = fields.filter((tuples, field) => !isAttribute(field) && tuples[0].arity() > 1);\n    const labelFields = fields.filter((tuples, field) => isAttribute(field) || tuples[0].arity() === 1);\n\n    // Separate skolems into those that will be edges and those that will be labels\n    const edgeSkolems = skolems.filter(tuples => tuples[0].arity() > 1);\n    const labelSkolems = skolems.filter(tuples => tuples[0].arity() === 1);\n\n    // Create an empty list for edges\n    const edges: Edge[] = [];\n\n    // Create all edges, building a set of connected atoms\n    const connected = Set<AlloyAtom>().withMutations(connected => {\n        edgeFields.forEach((tuples, field) => {\n            tuples.forEach(tuple => buildEdge(field, tuple));\n        });\n        edgeSkolems.forEach((tuples, skolem) => {\n            tuples.forEach(tuple => buildEdge(skolem, tuple));\n        });\n        function buildEdge (item: AlloyField | AlloySkolem, tuple: AlloyTuple) {\n            const atoms = tuple.atoms();\n            const source = atoms[0];\n            const target = atoms[atoms.length - 1];\n            const middle = atoms.slice(1, atoms.length - 1);\n            const label = item.name() + (middle.length ? ` [${middle.join(', ')}]` : '');\n            connected.add(source);\n            connected.add(target);\n            edges.push({\n                source: source.name(),\n                target: target.name(),\n                group: item.id(),\n                label: label\n            });\n        }\n    });\n\n    // Create the labels for each atom\n    const labelMap = IMap<AlloyAtom, string[]>()\n        .withMutations(map => {\n\n            labelFields.forEach(addLabel);\n            labelSkolems.forEach(addLabel);\n\n            function addLabel (tuples: AlloyTuple[], item: AlloyField|AlloySkolem) {\n\n                // Create a map of atoms to labels for this particular field/skolem\n                const labels = IMap<AlloyAtom, string[]>()\n                    .withMutations(labels => {\n                        tuples.forEach(tuple => {\n                            const atoms = tuple.atoms();\n                            const target = atoms[0];\n                            const label = atoms.slice(1).map(atom => atom.name()).join('->');\n                            if (!labels.has(target)) labels.set(target, []);\n                            if (label.length) labels.get(target)!.push(label);\n                        });\n                    });\n\n                // Combine all labels for this particular field/skolem and add\n                // them to the appropriate atom\n                labels.forEach((labels, atom) => {\n                    const paren = item.expressionType() === 'field' && !isAttribute(item);\n                    const joined = labels.length ? `: ${labels.join(', ')}` : '';\n                    const label = `${item.name()}${joined}`;\n                    if (!map.has(atom)) map.set(atom, []);\n                    map.get(atom)!.push(paren ? `(${label})` : label);\n                });\n\n            }\n\n        });\n\n    // Debug print\n    // labelMap.forEach((labels, atom) => console.log(atom.name(), labels));\n\n    // Create nodes\n    const nodes: Node[] = instance.atoms().map(atom => {\n\n        // First determine if the atom should be visible. It's visible if it's\n        // connected or if its type is not explicitly hidden.\n        const type = atom.type();\n        const visible = connected.has(atom) || !hideDisconnected.get(type.id());\n\n        if (visible) {\n\n            // If it's visible, look for an existing node, otherwise create a new one\n            const node = existingNodes.find(node => node.id === atom.name())\n                || nodeCache.get(atom.name())\n                || {\n                    id: atom.name(),\n                    x: 0,\n                    y: 0\n                };\n\n            // Get any labels associated with this atom\n            node.labels = labelMap.get(atom);\n\n            return node;\n\n        }\n\n        return undefined;\n\n    }).filter(isDefined);\n\n    return [nodes, edges];\n\n    /**\n     * Find an atom in the instance provided to the generateGraph function\n     * @param atom\n     */\n    function getAtom (atom: string): AlloyAtom | undefined {\n        return instance.atoms().find(a => a.name() === atom);\n    }\n\n    /**\n     * Returns true if a tuple has atoms\n     * @param tuple\n     */\n    function hasAtoms (tuple: AlloyTuple): boolean {\n        return tuple.arity() > 0;\n    }\n\n    /**\n     * Returns true if the item is to be displayed as an attribute\n     * @param item\n     */\n    function isAttribute (item: AlloyField | AlloySkolem): boolean {\n        return !!attributes.get(item.id());\n    }\n\n    /**\n     * Project a tuple using the projections provided to the generateGraph function.\n     * A tuple that has no types with projections will remain unchanged. A tuple\n     * that has projected types but any atoms of those types are not the projected\n     * atom will be removed completely (ie. return undefined). A tuple that has\n     * projected types will have a projection if all of the atoms are of their\n     * respective projected types.\n     * @param tuple\n     */\n    function project (tuple: AlloyTuple): AlloyTuple | undefined {\n\n        const projectedAtoms = tuple\n            .types()\n            .map(projectable)\n            .map(sig => _projections.get(sig));\n\n        if (projectedAtoms.some(isDefined)) {\n\n            const atoms = tuple.atoms();\n            const keep = atoms.every((atom, index) => projectedAtoms[index] === undefined || projectedAtoms[index] === atom);\n\n            if (keep) {\n\n                return new AlloyTuple(tuple.id(), atoms.filter((atom, index) => {\n                    return projectedAtoms[index] === undefined;\n                }));\n\n            }\n\n        } else {\n\n            return tuple;\n\n        }\n\n    }\n\n    /**\n     * Only top level signatures (those that are direct descendants of univ)\n     * can be projected. This function return the top level type of any signature\n     * in the instance.\n     * @param signature\n     */\n    function projectable (signature: AlloySignature): AlloySignature {\n        return signature.typeHierarchy()[1];\n    }\n\n    /**\n     * Returns true if there are tuples in the list and they are all the same arity\n     * @param tuples\n     */\n    // function tuplesSameArity (tuples: AlloyTuple[]): boolean {\n    //     if (!tuples.length) return false;\n    //     const arity = tuples[0].arity();\n    //     return tuples.every(tuple => tuple.arity() === arity);\n    // }\n\n}\n\nexport {\n    generateGraph\n}\n","import {\n    Button,\n    Classes, Navbar,\n    NavbarDivider,\n    NavbarHeading\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../rootReducer';\nimport { setMainView } from '../../../sterling/sterlingSlice';\n\nconst mapState = (state: RootState) => ({\n    view: state.sterlingSlice.mainView\n});\n\nconst mapDispatch = {\n    setMainView\n};\n\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\ntype ViewNavigationProps = ConnectedProps<typeof connector>;\n\nconst ViewGroup: React.FunctionComponent<ViewNavigationProps> = props => {\n\n    return (\n        <Navbar.Group>\n            <NavbarHeading className={'nav-heading'}>\n                Sterling\n            </NavbarHeading>\n            <NavbarDivider/>\n            <Button\n                active={props.view === 'graph'}\n                className={Classes.MINIMAL}\n                icon={'graph'}\n                large={true}\n                text={'Graph'}\n                onClick={() => props.setMainView('graph')}\n            />\n            <Button\n                active={props.view === 'table'}\n                className={Classes.MINIMAL}\n                icon={'th'}\n                large={true}\n                text={'Table'}\n                onClick={() => props.setMainView('table')}\n            />\n            <Button\n                active={props.view === 'source'}\n                className={Classes.MINIMAL}\n                icon={'document'}\n                large={true}\n                text={'Source'}\n                onClick={() => props.setMainView('source')}\n            />\n            <NavbarDivider/>\n        </Navbar.Group>\n    );\n\n};\n\nexport default connector(ViewGroup);\n","import {\n    Button,\n    Menu,\n    MenuDivider,\n    MenuItem,\n    Navbar,\n    NavbarDivider,\n    Popover,\n    Tag\n} from '@blueprintjs/core';\nimport { AlloyInstance } from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport { setInstance } from '../../sterling/sterlingSlice';\nimport ViewGroup from './components/ViewGroup';\n\nconst mapState = (state: RootState) => ({\n    instance: state.sterlingSlice.instance\n});\n\nconst mapDispatch = {\n    setInstance\n};\n\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\ntype StaticNavbarProps = ConnectedProps<typeof connector>;\n\nconst StaticNavbar: React.FunctionComponent<StaticNavbarProps> = props => {\n\n    const command = props.instance ? props.instance.command() : '';\n    const fileref = React.createRef<HTMLInputElement>();\n\n    const setInstance = (text: string | ArrayBuffer | null) => {\n        if (typeof text === 'string' && text.length) {\n            try {\n                const instance = new AlloyInstance(text);\n                props.setInstance(instance);\n            } catch (e) {\n                props.setInstance(null);\n            }\n        } else {\n            props.setInstance(null);\n        }\n    };\n\n    const onFileChange = () => {\n        if (fileref.current) {\n            const files = fileref.current.files;\n            if (files && files.length) {\n                const file = files[0];\n                const reader = new FileReader();\n                reader.addEventListener('load', event => {\n                    setInstance(event.target ? event.target.result : null);\n                });\n                reader.readAsText(file);\n            }\n        }\n    };\n\n    const fetchExample = (path: string) => {\n        fetch(path)\n            .then(response => response.text())\n            .then(setInstance)\n            .catch(() => setInstance(null));\n    };\n\n    return (\n        <Navbar fixedToTop className={'nav bp3-dark'}>\n            <ViewGroup/>\n            <Navbar.Group className={'collapsing'}>\n                {\n                    command.length > 0 &&\n                    <Tag minimal={true}>\n                        { command }\n                    </Tag>\n                }\n                <NavbarDivider/>\n                <input\n                    type={'file'}\n                    style={{ display: 'none' }}\n                    onChange={onFileChange}\n                    ref={fileref}/>\n                <Popover>\n                    <Button\n                        rightIcon={'caret-down'}\n                        intent={'success'}\n                        large={true}\n                        text={'Open'}/>\n                    <Menu>\n                        <MenuItem\n                            text={'Open XML...'}\n                            onClick={() => {\n                                if (fileref.current) {\n                                    fileref.current.click();\n                                }\n                            }}/>\n                        <MenuDivider title={'Examples'}/>\n                        <MenuItem\n                            text={'Finite Element Mesh'}\n                            onClick={() => fetchExample('examples/mesh.xml')}/>\n                        <MenuItem\n                            text={'Geneaology'}\n                            onClick={() => fetchExample('examples/genealogy.xml')}/>\n                        <MenuItem\n                            text={'Mathematical Matrix'}\n                            onClick={() => fetchExample('examples/matrix.xml')}/>\n                        <MenuItem\n                            text={'River Crossing Puzzle'}\n                            onClick={() => fetchExample('examples/river-crossing.xml')}/>\n                        <MenuItem\n                            text={'Wetting and Drying'}\n                            onClick={() => fetchExample('examples/wetdry.xml')}/>\n                    </Menu>\n                </Popover>\n            </Navbar.Group>\n        </Navbar>\n    )\n};\n\nexport default connector(StaticNavbar);\n","import { Button, Navbar, NavbarDivider, Tag } from '@blueprintjs/core';\nimport React from 'react';\nimport { SterlingConnection } from '../../sterling/SterlingConnection';\nimport ViewGroup from './components/ViewGroup';\n\nexport interface SterlingNavbarProps {\n    connection: SterlingConnection\n}\n\ninterface ISterlingNavbarState {\n    command: string\n    connected: boolean\n    ready: boolean\n}\n\nclass SterlingNavbar extends React.Component<SterlingNavbarProps, ISterlingNavbarState> {\n\n    constructor (props: SterlingNavbarProps) {\n\n        super(props);\n\n        this.state = {\n            command: '',\n            connected: false,\n            ready: false\n        }\n\n    }\n\n    componentDidMount (): void {\n\n        const connection = this.props.connection;\n\n        connection\n            .addEventListener('connect', () => {\n                this.setState({ connected: true });\n            })\n            .addEventListener('disconnect', () => {\n                this.setState({ connected: false, ready: false });\n            })\n            .addEventListener('instance', event => {\n                this.setState({\n                    command: event.instance.command(),\n                    ready: this.state.connected\n                });\n            });\n\n    }\n\n    render (): React.ReactNode {\n\n        const state = this.state;\n\n        return (\n            <Navbar fixedToTop className={'nav bp3-dark'}>\n                <ViewGroup/>\n                <Navbar.Group className={'collapsing'}>\n                    {\n                        state.command.length > 0 &&\n                        <Tag minimal={true}>\n                            {state.command}\n                        </Tag>\n                    }\n                    <NavbarDivider/>\n                    <Button disabled={!state.ready}\n                            intent={state.connected ? 'success' : 'danger'}\n                            large={true}\n                            onClick={this._requestNext}\n                            rightIcon={'circle-arrow-right'}\n                            text={'Next'}\n                    />\n                </Navbar.Group>\n            </Navbar>\n        )\n\n    }\n\n    private _requestNext = () => {\n\n        this.props.connection.requestNextInstance();\n\n    }\n\n}\n\nexport default SterlingNavbar;\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    NonIdealState\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport SterlingDrawer from '../../sterling/SterlingDrawer';\nimport { setSelected } from './sourceSlice';\n\nconst mapState = (state: RootState) => ({\n    instance: state.sterlingSlice.instance,\n    selected: state.sourceSlice.selected\n});\n\nconst mapDispatch = {\n    setSelected\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype SourceDrawerProps = ConnectedProps<typeof connector>;\n\nconst SourcePlaceholder: React.FunctionComponent<SourceDrawerProps> = props => (\n    <NonIdealState\n        title={'No Files'}\n        icon={'document'}/>\n);\n\nconst SourceDrawer: React.FunctionComponent<SourceDrawerProps> = props => {\n\n    const instance = props.instance;\n\n    return <SterlingDrawer.Section title={'Model Sources'}>\n        {\n            instance\n                ? <ButtonGroup\n                    alignText={Alignment.LEFT}\n                    minimal={true}\n                    vertical={true}> {\n                    instance.sources().map(source => (\n                        <Button\n                            active={props.selected === source}\n                            icon={'document'}\n                            key={source.filename()}\n                            onClick={() => props.setSelected(source)}\n                            text={source.filename().split(/(\\\\|\\/)/g).pop()}/>\n                    ))\n                }</ButtonGroup>\n                : <SourcePlaceholder {...props}/>\n        }\n    </SterlingDrawer.Section>\n};\n\nexport default connector(SourceDrawer);\n","import { NonIdealState } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport { Light as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { githubGist } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { COMMENT } from 'highlight.js';\n\nconst STYLE = githubGist;\n\nSyntaxHighlighter.registerLanguage('alloy', function () {\n\n    let NUMBER_RE = '\\\\b\\\\d+';\n\n    return {\n        // case_insensitive\n        case_insensitive: false,\n\n        // keywords\n        keywords: 'abstract all and as assert but check disj ' +\n            'else exactly expect extends fact for fun iden iff implies ' +\n            'in Int let lone module no none not one open or pred ' +\n            'run set sig some sum univ',\n\n        // contains\n        contains: [\n\n            // hljs.COMMENT\n            COMMENT('//', '$', {}),\n            COMMENT('--', '$', {}),\n            COMMENT('/\\\\*', '\\\\*/', {}),\n\n            {\n                // className\n                className: 'number',\n                // begin\n                begin: NUMBER_RE,\n                // relevance\n                relevance: 0\n            }\n        ]\n    };\n});\n\nconst mapState = (state: RootState) => ({\n    instance: state.sterlingSlice.instance,\n    selected: state.sourceSlice.selected,\n    welcome: state.sterlingSlice.welcomeTitle,\n    welcomeDescription: state.sterlingSlice.welcomeDescription\n});\n\nconst connector = connect(mapState);\n\ntype SourceStageProps = ConnectedProps<typeof connector>;\n\nconst SourceStage: React.FunctionComponent<SourceStageProps> = props => {\n\n    if (!props.instance) {\n        return (\n            <NonIdealState\n                description={props.welcomeDescription}\n                icon={'document'}\n                title={props.welcome}/>\n        );\n    }\n\n    if (!props.selected) {\n        return (\n            <NonIdealState\n                description={'Choose a File'}\n                icon={'document'}\n                title={props.welcome}/>\n        );\n    }\n\n    return (\n        <SyntaxHighlighter\n            className={'source'}\n            language={'alloy'}\n            showLineNumbers={false}\n            style={STYLE}>\n            { props.selected.source() }\n        </SyntaxHighlighter>\n    );\n\n};\n\n\nexport default connector(SourceStage);\n","import {\n    Button,\n    Icon,\n    ITagProps,\n    Menu,\n    MenuDivider,\n    MenuItem\n} from '@blueprintjs/core';\nimport {\n    IItemListRendererProps,\n    IItemRendererProps,\n    ItemPredicate,\n    MultiSelect\n} from '@blueprintjs/select';\nimport { AlloyField, AlloySignature, AlloySkolem, sorting } from 'alloy-ts';\nimport * as React from 'react';\nimport { AlloyNameFn, SigFieldSkolem } from '../tableTypes';\nimport { FieldTag, SignatureTag } from '../TableTags';\n\nconst AlloySelect = MultiSelect.ofType<SigFieldSkolem>();\n\nexport interface IAlloyMultiSelectProps {\n    items: SigFieldSkolem[],\n    itemsSelected: SigFieldSkolem[],\n    onClearSelectedItems: () => void,\n    onDeselectItem: (item: SigFieldSkolem) => void,\n    onSelectItem: (item: SigFieldSkolem) => void,\n    nameFunction: AlloyNameFn\n}\n\nclass AlloyMultiSelect extends React.Component<IAlloyMultiSelectProps> {\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const sortItems = (items: SigFieldSkolem[]): SigFieldSkolem[] => {\n\n            const sigs = items.filter(item => item.expressionType() === 'signature');\n            const flds = items.filter(item => item.expressionType() === 'field');\n            const skls = items.filter(item => item.expressionType() === 'skolem');\n            const alpha = sorting.alphabeticalSort(this.props.nameFunction);\n            (sigs as AlloySignature[]).sort(alpha).sort(sorting.builtinSort());\n            (flds as AlloyField[]).sort(alpha);\n            (skls as AlloySkolem[]).sort(alpha);\n            return [...sigs, ...flds, ...skls];\n\n        };\n\n        const clearButton = this.props.itemsSelected.length\n            ? <Button\n                icon='cross'\n                minimal={true}\n                onClick={this.props.onClearSelectedItems}/>\n            : undefined;\n\n        return (\n            <AlloySelect\n                fill={true}\n                items={sortItems(props.items)}\n                itemPredicate={this._filterItem}\n                itemRenderer={this._renderItem}\n                itemListRenderer={this._renderList}\n                onItemSelect={this._onSelectItem}\n                popoverProps={{\n                    usePortal: false\n                }}\n                placeholder='Choose Tables...'\n                resetOnSelect={true}\n                scrollToActiveItem={true}\n                selectedItems={this.props.itemsSelected}\n                tagInputProps={{\n                    onRemove: this._onRemoveTag,\n                    rightElement: clearButton,\n                    tagProps: this._tagProps\n                }}\n                tagRenderer={this._renderTag}\n                />\n        )\n\n    }\n\n    /**\n     * Predicate used to determine if a query string exists in the name of a\n     * Signature, Field, or Skolem.\n     * @param query The query string\n     * @param item The Signature, Field, or Skolem\n     * @private\n     * @return Returns true if the query string appears in the name of the item,\n     * false otherwise.\n     */\n    private _filterItem: ItemPredicate<SigFieldSkolem> = (query: string, item: SigFieldSkolem): boolean => {\n\n        const name = item.expressionType() === 'field'\n            ? this.props.nameFunction(item).split('<:')[1]\n            : this.props.nameFunction(item);\n\n        return name.toLowerCase().indexOf(query.toLowerCase()) >= 0;\n\n    };\n\n    /**\n     * Determine if an item is currently selected\n     * @param item The item in question\n     * @private\n     * @return Returns true if the item is currently selected, false otherwise\n     */\n    private _isItemSelected = (item: SigFieldSkolem) => {\n        return this.props.itemsSelected.includes(item);\n    };\n\n    /**\n     * Event handler used when a tag is removed from the current selection\n     * @param tag The tag text\n     * @param index The index of the tag in the selected items list\n     * @private\n     */\n    private _onRemoveTag = (tag: string, index: number): void => {\n        this.props.onDeselectItem(this.props.itemsSelected[index]);\n    };\n\n    /**\n     * Event handler used when an item in the list is selected\n     * @param item The selected item\n     * @private\n     */\n    private _onSelectItem = (item: SigFieldSkolem): void => {\n\n        this._isItemSelected(item)\n            ? this.props.onDeselectItem(item)\n            : this.props.onSelectItem(item);\n\n    };\n\n    /**\n     * Custom renderer for an Alloy item in the dropdown list.\n     * @param item The Alloy item to render\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderItem = (item: SigFieldSkolem, props: IItemRendererProps): React.ReactElement | null => {\n\n        if (!props.modifiers.matchesPredicate) return null;\n        switch (item.expressionType()) {\n            case 'signature':\n                return this._renderSignature(item as AlloySignature, props);\n            case 'field':\n                return this._renderField(item as AlloyField, props);\n            case 'skolem':\n                return this._renderSkolem(item as AlloySkolem, props);\n            default:\n                return null;\n        }\n\n    };\n\n    /**\n     * Custom renderer for the contents of the dropdown list. Splits list into\n     * three categories (Signatures, Fields, Skolems) sorted alphabetically.\n     * @param props Properties describing how to render a list of items\n     * @private\n     */\n    private _renderList = (props: IItemListRendererProps<SigFieldSkolem>): React.ReactElement => {\n\n        const sigs = props.items.filter(item => item.expressionType() === 'signature');\n        const flds = props.items.filter(item => item.expressionType() === 'field');\n        const skls = props.items.filter(item => item.expressionType() === 'skolem');\n        const alpha = sorting.alphabeticalSort(this.props.nameFunction);\n        (sigs as AlloySignature[]).sort(alpha).sort(sorting.builtinSort());\n        (flds as AlloyField[]).sort(alpha);\n        (skls as AlloySkolem[]).sort(alpha);\n        const renderedSigs = sigs.map(props.renderItem).filter(item => item != null);\n        const renderedFlds = flds.map(props.renderItem).filter(item => item != null);\n        const renderedSkls = skls.map(props.renderItem).filter(item => item != null);\n        return (\n            <Menu ulRef={props.itemsParentRef}>\n                <MenuDivider title='Signatures'/>\n                {renderedSigs.length ? renderedSigs : <MenuItem disabled={true} text='None'/>}\n                <MenuDivider title='Fields'/>\n                {renderedFlds.length ? renderedFlds : <MenuItem disabled={true} text='None'/>}\n                <MenuDivider title='Skolems'/>\n                {renderedSkls.length ? renderedSkls : <MenuItem disabled={true} text='None'/>}\n            </Menu>\n        );\n\n    };\n\n    /**\n     * Custom renderer for an Alloy Signature in the dropdown list\n     * @param item The Signature\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderSignature = (item: AlloySignature, props: IItemRendererProps): React.ReactElement => {\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                key={item.id()}\n                labelElement={highlightText(this.props.nameFunction(item), props.query)}\n                icon={selected ? 'tick' : 'blank'}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for an Alloy Field in the dropdown list\n     * @param item The Field\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderField = (item: AlloyField, props: IItemRendererProps) => {\n        const name = this.props.nameFunction(item);\n        const tokens = name.split('<:');\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                key={item.id()}\n                icon={<>\n                    { selected && <Icon icon='tick'/>}\n                    <SignatureTag signature={tokens[0]}/>\n                </>}\n                labelElement={highlightText(tokens[1], props.query)}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for an Alloy Skolem in the dropdown list\n     * @param item The Skolem\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderSkolem = (item: AlloySkolem, props: IItemRendererProps) => {\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                icon={selected ? 'tick' : 'blank'}\n                key={item.id()}\n                labelElement={highlightText(item.name(), props.query)}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for tags in the select. Does not actually generate a Tag,\n     * but instead returns the node that will be used as the label of the tag.\n     * @param item The Alloy item to render\n     * @private\n     */\n    private _renderTag = (item: SigFieldSkolem): React.ReactNode => {\n\n        const name = this.props.nameFunction(item);\n        return item.expressionType() === 'field'\n            ? FieldTag.FieldTagEls(name.split('<:'))\n            : name;\n\n    };\n\n    /**\n     * Custom properties to pass to each Tag based on type of item the tag\n     * represents\n     * @param value The node\n     * @param index The index of the item in the selected items list\n     * @private\n     */\n    private _tagProps = (value: React.ReactNode, index: number): ITagProps => {\n\n        const itemType = this.props.itemsSelected[index].expressionType();\n        const tag = itemType === 'signature'\n            ? 'sig-tag' : itemType === 'field'\n                ? 'field-tag' : itemType === 'skolem'\n                    ? 'skolem-tag' : '';\n        return {\n            className: tag\n        };\n\n    }\n\n}\n\nfunction highlightText (text: string, query: string) {\n    let lastIndex = 0;\n    const words = query\n        .split(/\\s+/)\n        .filter(word => word.length > 0)\n        .map(escapeRegExpChars);\n    if (words.length === 0) {\n        return [text];\n    }\n    const regexp = new RegExp(words.join(\"|\"), \"gi\");\n    const tokens: React.ReactNode[] = [];\n    while (true) {\n        const match = regexp.exec(text);\n        if (!match) {\n            break;\n        }\n        const length = match[0].length;\n        const before = text.slice(lastIndex, regexp.lastIndex - length);\n        if (before.length > 0) {\n            tokens.push(before);\n        }\n        lastIndex = regexp.lastIndex;\n        tokens.push(<strong key={lastIndex}>{match[0]}</strong>);\n    }\n    const rest = text.slice(lastIndex);\n    if (rest.length > 0) {\n        tokens.push(rest);\n    }\n    return tokens;\n}\n\nfunction escapeRegExpChars (text: string) {\n    return text.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, \"\\\\$1\");\n}\n\nexport default AlloyMultiSelect;\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    FormGroup,\n    Radio,\n    RadioGroup,\n    Switch\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport SterlingDrawer from '../../sterling/SterlingDrawer';\nimport AlloyMultiSelect from './drawer-components/AlloyMultiSelect';\nimport {\n    clearSelectedData,\n    deselectData,\n    selectData,\n    setAlignment,\n    setLayoutDirection,\n    setSort,\n    setTableTypes,\n    toggleCollapseData,\n    toggleCollapseLayout,\n    toggleCollapseTables,\n    toggleHighlightSkolems,\n    toggleRemoveBuiltin,\n    toggleRemoveEmpty,\n    toggleRemoveThis\n} from './tableSlice';\nimport {\n    buildNameFunction,\n    HorizontalAlignment,\n    LayoutDirection,\n    SortDirection,\n    SortMethod,\n    TablesType\n} from './tableTypes';\n\n// Map redux state to table settings props\nconst mapState = (state: RootState) => ({\n    ...state.tableSlice\n});\n\n// Actions\nconst mapDispatch = {\n    clearSelectedData,\n    deselectData,\n    selectData,\n    setAlignment,\n    setLayoutDirection,\n    setSort,\n    setTableTypes,\n    toggleCollapseData,\n    toggleCollapseLayout,\n    toggleCollapseTables,\n    toggleHighlightSkolems,\n    toggleRemoveBuiltin,\n    toggleRemoveEmpty,\n    toggleRemoveThis\n};\n\n// Connect the two\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\n// Create props for things from redux\ntype TableDrawerProps = ConnectedProps<typeof connector>;\n\n// The table settings view\nconst TableDrawer: React.FunctionComponent<TableDrawerProps> = props => {\n\n    return (\n        <>\n            <SterlingDrawer.Section\n                collapsed={props.collapseTables}\n                onToggle={props.toggleCollapseTables}\n                style={{ position: 'relative', zIndex: 1 }}\n                title={'Tables'}>\n                <RadioGroup\n                    onChange={event => props.setTableTypes(parseInt(event.currentTarget.value))}\n                    selectedValue={props.tablesType}>\n                    <Radio label='All Tables' value={TablesType.All}/>\n                    <Radio label='Signatures' value={TablesType.Signatures}/>\n                    <Radio label='Fields' value={TablesType.Fields}/>\n                    <Radio label='Skolems' disabled={props.highlightSkolems} value={TablesType.Skolems}/>\n                    <Radio label='Choose Tables' value={TablesType.Select}/>\n                    <AlloyMultiSelect\n                        items={props.data}\n                        itemsSelected={props.dataSelected}\n                        onClearSelectedItems={props.clearSelectedData}\n                        onDeselectItem={props.deselectData}\n                        onSelectItem={props.selectData}\n                        nameFunction={buildNameFunction(props.removeThis)}/>\n                </RadioGroup>\n            </SterlingDrawer.Section>\n            <SterlingDrawer.Section\n                collapsed={props.collapseData}\n                onToggle={props.toggleCollapseData}\n                style={{ position: 'relative', zIndex: 0 }}\n                title={'Data Options'}>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.removeBuiltin}\n                    disabled={props.tablesType === TablesType.Select}\n                    label='Hide Built-in Signatures'\n                    onChange={props.toggleRemoveBuiltin}/>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.removeEmpty}\n                    disabled={props.tablesType === TablesType.Select}\n                    label='Hide Empty Tables'\n                    onChange={props.toggleRemoveEmpty}/>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.removeThis}\n                    label='Remove \"this\" from Signature names'\n                    onChange={props.toggleRemoveThis}/>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.highlightSkolems}\n                    label='Display Skolems as highlighted rows'\n                    onChange={props.toggleHighlightSkolems}/>\n            </SterlingDrawer.Section>\n            <SterlingDrawer.Section\n                collapsed={props.collapseLayout}\n                onToggle={props.toggleCollapseLayout}\n                style={{ position: 'relative', zIndex: 0 }}\n                title={'Layout Options'}>\n                <FormGroup inline={true} label='Layout Direction'>\n                    <ButtonGroup>\n                        <Button\n                            active={props.layoutDirection === LayoutDirection.Row}\n                            icon='vertical-distribution'\n                            onClick={() => props.setLayoutDirection(LayoutDirection.Row)}/>\n                        <Button\n                            active={props.layoutDirection === LayoutDirection.Column}\n                            icon='horizontal-distribution'\n                            onClick={() => props.setLayoutDirection(LayoutDirection.Column)}/>\n                    </ButtonGroup>\n                </FormGroup>\n                <FormGroup inline={true} label='Align'>\n                    <ButtonGroup>\n                        <Button\n                            active={props.alignment === HorizontalAlignment.Left}\n                            icon='align-left'\n                            onClick={() => props.setAlignment(HorizontalAlignment.Left)}/>\n                        <Button\n                            active={props.alignment === HorizontalAlignment.Center}\n                            icon='align-center'\n                            onClick={() => props.setAlignment(HorizontalAlignment.Center)}/>\n                        <Button\n                            active={props.alignment === HorizontalAlignment.Right}\n                            icon='align-right'\n                            onClick={() => props.setAlignment(HorizontalAlignment.Right)}/>\n                    </ButtonGroup>\n                </FormGroup>\n                <FormGroup inline={true} label='Sort'>\n                    <ButtonGroup>\n                        <Button\n                            icon='group-objects'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Group,\n                                    direction: SortDirection.Ascending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-alphabetical'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Alphabetical,\n                                    direction: SortDirection.Ascending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-alphabetical-desc'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Alphabetical,\n                                    direction: SortDirection.Descending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-numerical'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Size,\n                                    direction: SortDirection.Ascending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-numerical-desc'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Size,\n                                    direction: SortDirection.Descending\n                                });\n                            }}/>\n                    </ButtonGroup>\n                </FormGroup>\n            </SterlingDrawer.Section>\n        </>\n    )\n\n};\n\nexport default connector(TableDrawer);\n","import { Portal } from '@blueprintjs/core';\nimport React from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\ninterface IPopoverRowProps {\n    content: string | React.ReactElement,\n    colors: string[]\n}\n\ninterface IPopoverRowState {\n    enabled: boolean\n}\n\nexport default class PopoverRow extends React.Component<IPopoverRowProps, IPopoverRowState> {\n\n    public state = {\n        enabled: false\n    };\n\n    render (): React.ReactNode {\n\n        const colors = this.props.colors;\n        const thickness = this.state.enabled ? 4 : 2;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <tr onMouseEnter={this._onMouseEnter}\n                            onMouseLeave={this._onMouseLeave}\n                            ref={ref}\n                            style={{\n                                boxShadow: this._buildShadowStyle(colors, thickness)\n                            }}>\n                            {this.props.children}\n                        </tr>\n                    )}\n                </Reference>\n                <Portal>\n                    <Popper\n                        modifiers={{}}\n                        placement='right'>\n                        {({ ref, style, placement }) => (\n                            this.state.enabled &&\n                            <div\n                                ref={ref}\n                                style={{\n                                    ...style,\n                                    padding: (thickness * (colors.length - 1)) + 'px'\n                                }}\n                                data-placement={placement}>\n                                <div className='table-rowpop'>\n                                    {this.props.content}\n                                </div>\n                            </div>\n                        )}\n                    </Popper>\n                </Portal>\n            </Manager>\n        );\n\n    }\n\n    private _buildShadowStyle = (colors: string[], thickness: number): string => {\n        return colors.map((color: string, i: number) => {\n            return `0 0 0 ${(i+1) * thickness}px ${color}`\n        }).join(',');\n    };\n\n    private _onMouseEnter = () => {\n        this.setState({enabled: true});\n    };\n\n    private _onMouseLeave = () => {\n        this.setState({enabled: false});\n    };\n\n}\n","import { AlloySkolem } from 'alloy-ts';\nimport React from 'react';\n\nexport default function SkolemListPopover (skolems: AlloySkolem[], colors: string[]): React.ReactElement {\n\n    return (\n        <>\n            {\n                skolems.map((skolem: AlloySkolem, i: number) => {\n                    return (\n                        <div key={skolem.id()}\n                             style={{backgroundColor: colors[i]}}>\n                            { skolem.name() }\n                        </div>\n                    )\n                })\n            }\n        </>\n    )\n\n}\n","import { Card, NonIdealState } from '@blueprintjs/core';\nimport { AlloyField, AlloySignature, AlloySkolem, filtering } from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport FieldHTMLTable from './stage-components/FieldHTMLTable';\nimport SignatureHTMLTable from './stage-components/SignatureHTMLTable';\nimport SkolemHTMLTable from './stage-components/SkolemHTMLTable';\nimport { FieldTag, SignatureTag, SkolemTag } from './TableTags';\nimport {\n    getAlignClass,\n    AlloyNameFn,\n    buildNameFunction,\n    buildSortFunction,\n    getLayoutClass,\n    SigFieldSkolem,\n    TablesType\n} from './tableTypes';\n\n// Map redux state to table settings props\nconst mapState = (state: RootState) => ({\n    ...state.tableSlice,\n    description: state.sterlingSlice.welcomeDescription,\n    instance: state.sterlingSlice.instance,\n    title: state.sterlingSlice.welcomeTitle\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype TableStageProps = ConnectedProps<typeof connector>;\n\n// The table stage component\nconst TableStage: React.FunctionComponent<TableStageProps> = props => {\n\n    if (!props.instance) return (\n        <NonIdealState\n            title={props.title}\n            description={props.description}\n            icon={'th'}/>\n    );\n\n    const alignment = getAlignClass(props.alignment);\n    const direction = getLayoutClass(props.layoutDirection);\n    const nameFunction = buildNameFunction(props.removeThis);\n    const primarySort = buildSortFunction(props.primarySort, nameFunction);\n    const secondSort = buildSortFunction(props.secondarySort, nameFunction);\n    const type = props.tablesType;\n\n    let data = type === TablesType.All ? props.data :\n        type === TablesType.Signatures ? props.data.filter(filtering.keepSignatures) :\n        type === TablesType.Fields ? props.data.filter(filtering.keepFields) :\n        type === TablesType.Skolems ? props.data.filter(filtering.keepSkolems) :\n        type === TablesType.Select ? props.dataSelected.slice() : [];\n\n    const pass = () => true;\n    data = type === TablesType.Select\n        ? data\n        : data\n            .filter(props.removeBuiltin ? filtering.removeBuiltins : pass)\n            .filter(props.removeEmpty ? filtering.removeEmptys : pass)\n            .filter(props.highlightSkolems ? filtering.removeSkolems : pass);\n\n    data = data\n        .sort(secondSort)\n        .sort(primarySort);\n\n    return (\n        <div className={`tables ${alignment} ${direction}`}>\n            {\n                data.map(item => (\n                    <Card key={item.id()}\n                          elevation={1}>\n                        { buildTableHeader(item, nameFunction) }\n                        {\n                            item.expressionType() === 'signature' ?\n                                SignatureHTMLTable({\n                                    highlightSkolems: props.highlightSkolems,\n                                    signature: item as AlloySignature,\n                                    skolemColors: props.skolemColors\n                                }) :\n                            item.expressionType() === 'field' ?\n                                FieldHTMLTable({\n                                    field: item as AlloyField,\n                                    highlightSkolems: props.highlightSkolems,\n                                    nameFunction: nameFunction,\n                                    skolemColors: props.skolemColors\n                                }) :\n                            item.expressionType() === 'skolem' ?\n                                SkolemHTMLTable({\n                                    nameFunction: nameFunction,\n                                    skolem: item as AlloySkolem\n                                }) :\n                            null\n                        }\n                    </Card>\n                ))\n            }\n        </div>\n    );\n\n};\n\n\nfunction buildTableHeader (item: SigFieldSkolem, nameFunction: AlloyNameFn): React.ReactNode {\n\n    if (item.expressionType() === 'signature') {\n        return <SignatureTag\n            fill={true}\n            signature={item as AlloySignature}\n            nameFunction={nameFunction}/>;\n    }\n\n    if (item.expressionType() === 'field') {\n        return <FieldTag\n            fill={true}\n            field={item as AlloyField}\n            nameFunction={nameFunction}/>;\n    }\n\n    if (item.expressionType() === 'skolem') {\n        return <SkolemTag\n            fill={true}\n            skolem={item as AlloySkolem}\n            nameFunction={nameFunction}/>;\n    }\n\n    return null;\n\n}\n\n\nexport default connector(TableStage);\n","import { HTMLTable } from '@blueprintjs/core';\nimport { AlloyAtom, AlloySignature, AlloySkolem } from 'alloy-ts';\nimport React from 'react';\nimport PopoverRow from './PopoverRow';\nimport SkolemListPopover from './SkolemListPopover';\n\nexport interface ISignatureHTMLTableProps {\n    highlightSkolems: boolean,\n    signature: AlloySignature,\n    skolemColors: Map<AlloySkolem, string>\n}\n\nexport default function SignatureHTMLTable (props: ISignatureHTMLTableProps) {\n\n    const signature = props.signature;\n    const atoms: AlloyAtom[] = signature.atoms();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <tbody>\n            {\n                atoms.map((atom: AlloyAtom) => {\n\n                    const skolems = atom.skolems();\n\n                    if (props.highlightSkolems && skolems.length) {\n\n                        const colors = skolems.map(s => props.skolemColors.get(s) || '');\n\n                        return (\n                            <PopoverRow\n                                key={atom.id()}\n                                content={SkolemListPopover(skolems, colors)}\n                                colors={colors}>\n                                <td>{ atom.name() }</td>\n                            </PopoverRow>\n                        );\n\n                    } else {\n\n                        return (\n                            <tr key={atom.id()}>\n                                <td>{ atom.name() }</td>\n                            </tr>\n                        );\n\n                    }\n                })\n            }\n            </tbody>\n        </HTMLTable>\n    )\n}\n","import { HTMLTable } from '@blueprintjs/core';\nimport {\n    AlloyAtom,\n    AlloyField,\n    AlloySignature,\n    AlloySkolem,\n    AlloyTuple\n} from 'alloy-ts';\nimport React from 'react';\nimport PopoverRow from './PopoverRow';\nimport SkolemListPopover from './SkolemListPopover';\n\n\nexport interface IFieldHTMLTableProps {\n    field: AlloyField,\n    highlightSkolems: boolean,\n    nameFunction: (item: AlloySignature | AlloyField | AlloySkolem) => string,\n    skolemColors: Map<AlloySkolem, string>\n}\n\nexport default function FieldHTMLTable (props: IFieldHTMLTableProps) {\n\n    const types: AlloySignature[] = props.field.types();\n    const tuples: AlloyTuple[] = props.field.tuples();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <thead>\n            <tr>\n            {\n                types.map((sig: AlloySignature, i: number) => (\n                    <th key={sig.id() + i}>\n                        {props.nameFunction(sig)}\n                    </th>\n                ))\n            }\n            </tr>\n            </thead>\n            <tbody>\n            {\n                tuples.map((tuple: AlloyTuple) => {\n\n                    const skolems = tuple.skolems();\n\n                    if (props.highlightSkolems && skolems.length) {\n\n                        const colors = skolems.map(s => props.skolemColors.get(s) || '');\n\n                        return (\n                            <PopoverRow\n                                key={tuple.id()}\n                                content={SkolemListPopover(skolems, colors)}\n                                colors={colors}>\n                                {\n                                    tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                        <td key={tuple.id() + '[' + i + ']'}>\n                                            {atom.name()}\n                                        </td>\n                                    ))\n                                }\n                            </PopoverRow>\n                        );\n\n                    } else {\n\n                        return (\n                            <tr key={tuple.id()}>\n                                {\n                                    tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                        <td key={tuple.id() + '[' + i + ']'}>\n                                            {atom.name()}\n                                        </td>\n                                    ))\n                                }\n                            </tr>\n                        )\n\n                    }\n\n                })\n            }\n            </tbody>\n        </HTMLTable>\n    )\n\n}\n","import { HTMLTable } from '@blueprintjs/core';\nimport {\n    AlloyAtom,\n    AlloyField,\n    AlloySignature,\n    AlloySkolem,\n    AlloyTuple\n} from 'alloy-ts';\nimport React from 'react';\n\nexport interface ISkolemHTMLTableProps {\n    nameFunction: (item: AlloySignature | AlloyField | AlloySkolem) => string,\n    skolem: AlloySkolem\n}\n\nexport default function SkolemHTMLTable (props: ISkolemHTMLTableProps) {\n\n    const types: AlloySignature[] = props.skolem.types();\n    const tuples: AlloyTuple[] = props.skolem.tuples();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <thead>\n            <tr>\n            {\n                types.map((sig: AlloySignature, i: number) => (\n                    <th key={sig.id() + i}>\n                        {props.nameFunction(sig)}\n                    </th>\n                ))\n            }\n            </tr>\n            </thead>\n            <tbody>\n            {\n                tuples.map((tuple: AlloyTuple) => (\n                    <tr key={tuple.id()}>\n                        {\n                            tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                <td key={tuple.id() + '[' + i + ']'}>\n                                    {atom.name()}\n                                </td>\n                            ))\n                        }\n                    </tr>\n                ))\n            }\n            </tbody>\n        </HTMLTable>\n    );\n\n}\n","import React from 'react';\nimport { HotKeys } from 'react-hotkeys';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../rootReducer';\nimport { setMainView } from './sterlingSlice';\nimport { toggleAxesVisible, toggleGridVisible } from '../features/graph/drawer-views/graph-settings/graphSettingsSlice'\n\nconst keyMap = {\n    TOGGLE_AXES: 'shift+a',\n    TOGGLE_GRID: 'shift+g',\n    VIEW_GRAPH: 'g',\n    VIEW_SOURCE: 's',\n    VIEW_TABLE: 't',\n    ZOOM_TO_FIT: 'f',\n    ZOOM_TO_HOME: 'h'\n};\n\nconst mapState = (state: RootState) => ({\n    ...state\n});\n\nconst mapDispatch = {\n    setMainView,\n    toggleAxesVisible,\n    toggleGridVisible\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype SterlingKeyboardProps = ConnectedProps<typeof connector>;\n\nclass SterlingKeyboard extends React.Component<SterlingKeyboardProps> {\n\n    render (): React.ReactNode {\n\n        return <HotKeys className={'sterling'} keyMap={keyMap} handlers={this._handlers()}>\n            {this.props.children}\n        </HotKeys>\n\n    }\n\n    private _handlers = (): {[key: string]: () => void} => {\n\n        return {\n            TOGGLE_AXES: () => {\n                if (this.props.sterlingSlice.mainView === 'graph')\n                    this.props.toggleAxesVisible();\n            },\n            TOGGLE_GRID: () => {\n                if (this.props.sterlingSlice.mainView === 'graph')\n                    this.props.toggleGridVisible();\n            },\n            VIEW_GRAPH: () => {\n                this.props.setMainView('graph');\n            },\n            VIEW_SOURCE: () => {\n                this.props.setMainView('source');\n            },\n            VIEW_TABLE: () => {\n                this.props.setMainView('table');\n            },\n            ZOOM_TO_FIT: () => {\n                if (this.props.sterlingSlice.mainView === 'graph')\n                    this.props.graphSlice.graphSlice.graph.zoomToFit();\n            },\n            ZOOM_TO_HOME: () => {\n                if (this.props.sterlingSlice.mainView === 'graph')\n                    this.props.graphSlice.graphSlice.graph.zoomToHome();\n            }\n        }\n\n    }\n\n}\n\nexport default connector(SterlingKeyboard);\n","import {\n    Button,\n    IconName,\n    Intent,\n    MaybeElement,\n    Position,\n    Tooltip\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../rootReducer';\nimport {\n    setGraphView,\n    setMainView,\n    setSourceView,\n    setTableView\n} from './sterlingSlice';\n\n// Map redux state to sidebar props\nconst mapState = (state: RootState) => ({\n    ...state.sterlingSlice,\n});\n\n// Actions\nconst mapDispatch = {\n    setGraphView,\n    setMainView,\n    setSourceView,\n    setTableView\n};\n\n// Connect the two\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\n// Create props\nexport type SterlingSidebarProps = ConnectedProps<typeof connector>;\n\n// Sidebar button component props\ninterface SidebarButtonProps {\n    active: boolean\n    click: () => void\n    icon: IconName | MaybeElement\n    text: string\n}\n\n// A sidebar button\nconst SidebarButton: React.FunctionComponent<SidebarButtonProps> = props => (\n    <Tooltip\n        content={<span>{props.text}</span>}\n        hoverOpenDelay={500}\n        intent={Intent.PRIMARY}\n        position={Position.RIGHT}>\n        <Button\n            icon={props.icon}\n            minimal={true}\n            large={true}\n            active={props.active}\n            onClick={props.click}/>\n    </Tooltip>\n);\n\n// The sidebar view\nconst SterlingSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n\n    const mainview = props.mainView;\n    const evalActive =\n        (mainview === 'graph' && props.graphView === 'evaluator') ||\n        (mainview === 'table' && props.tableView === 'evaluator') ||\n        (mainview === 'source' && props.sourceView === 'evaluator');\n\n    return (\n        <div className={'sidebar nav bp3-dark'}>\n            {\n                mainview === 'graph' ? <GraphSidebar {...props}/> :\n                mainview === 'table' ? <TableSidebar {...props}/> :\n                mainview === 'source' ? <SourceSidebar {...props}/> :\n                null\n            }\n            <div className={'divider'}/>\n            <SidebarButton\n                active={evalActive}\n                click={() => {\n                    if (mainview === 'graph') props.setGraphView('evaluator');\n                    if (mainview === 'table') props.setTableView('evaluator');\n                    if (mainview === 'source') props.setSourceView('evaluator');\n                }}\n                icon={'console'}\n                text={'Evaluator'}/>\n        </div>\n    );\n\n};\n\n// The graph sidebar section\nconst GraphSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n\n    const view = props.graphView;\n\n    return (\n        <>\n            <SidebarButton\n                active={view === 'node'}\n                click={() => props.setGraphView('node')}\n                icon={'group-objects'}\n                text={'Projections and Node Styling'}/>\n            <SidebarButton\n                active={view === 'edge'}\n                click={() => props.setGraphView('edge')}\n                icon={'flows'}\n                text={'Edge Styling'}/>\n            <SidebarButton\n                active={view === 'layout'}\n                click={() => props.setGraphView('layout')}\n                icon={'layout-auto'}\n                text={'Layout'}/>\n            <SidebarButton\n                active={view === 'settings'}\n                click={() => props.setGraphView('settings')}\n                icon={'settings'}\n                text={'Graph Settings'}/>\n        </>\n    );\n\n};\n\nconst TableSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n    return (\n        <SidebarButton\n            active={props.tableView === 'settings'}\n            click={() => props.setTableView('settings')}\n            icon={'settings'}\n            text={'Table Settings'}/>\n    );\n};\n\nconst SourceSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n    return (\n        <SidebarButton\n            active={props.sourceView === 'files'}\n            click={() => props.setSourceView('files')}\n            icon={'document'}\n            text={'Model Sources'}/>\n    )\n};\n\nexport default connector(SterlingSidebar);\n","import React from 'react';\n\nclass SterlingStage extends React.Component {\n\n    render (): React.ReactNode {\n\n        return (\n            <div className={'stage'}>\n                { this.props.children }\n            </div>\n        );\n\n    }\n\n}\n\nexport default SterlingStage;\n","import { FocusStyleManager, ResizeSensor } from '@blueprintjs/core';\nimport { AlloyInstance } from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport SplitPane from 'react-split-pane';\nimport { Evaluator } from '../evaluator/Evaluator';\nimport EvaluatorView, { IEvaluatorProps } from '../evaluator/EvaluatorView';\nimport GraphDrawer from '../features/graph/GraphDrawer';\nimport GraphStage from '../features/graph/GraphStage';\nimport StaticNavbar from '../features/nav/StaticNavbar';\nimport SterlingNavbar from '../features/nav/SterlingNavbar';\nimport SourceDrawer from '../features/source/SourceDrawer';\nimport SourceStage from '../features/source/SourceStage';\nimport TableDrawer from '../features/table/TableDrawer';\nimport TableStage from '../features/table/TableStage';\nimport { RootState } from '../rootReducer';\nimport { SterlingConnection } from './SterlingConnection';\nimport SterlingDrawer from './SterlingDrawer';\nimport SterlingKeyboard from './SterlingKeyboard';\nimport SterlingSidebar from './SterlingSidebar';\nimport { setInstance } from './sterlingSlice';\nimport SterlingStage from './SterlingStage';\n\n\nFocusStyleManager.onlyShowFocusOnTabs();\n\n// Map redux state to sterling props\nconst mapState = (state: RootState) => ({\n    graph: state.graphSlice.graphSlice.graph,\n    ...state.sterlingSlice\n});\n\n// Actions\nconst mapDispatch = {\n    setInstance\n};\n\n// Connector\nconst connector = connect(mapState, mapDispatch);\n\n// Create props type for things from redux\ntype SterlingReduxProps = ConnectedProps<typeof connector>;\n\n// Create combined type for all props\nexport type SterlingProps = SterlingReduxProps & {\n    connection: SterlingConnection\n}\n\ninterface ISterlingState {\n    instance: AlloyInstance | null\n}\n\nclass Sterling extends React.Component<SterlingProps, ISterlingState> {\n\n    private readonly _evaluator: Evaluator;\n    private readonly _evaluatorView: React.ComponentType<IEvaluatorProps>;\n\n    constructor (props: SterlingProps) {\n\n        super(props);\n\n        this._evaluator = new Evaluator(props.connection);\n        this._evaluatorView = EvaluatorView;\n\n        this.state = {\n            instance: null\n        };\n\n    }\n\n    componentDidMount (): void {\n\n        this._initializeConnection();\n\n    }\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n        const drawerOpen =\n            (props.mainView === 'graph' && props.graphView !== null) ||\n            (props.mainView === 'table' && props.tableView !== null) ||\n            (props.mainView === 'source' && props.sourceView !== null);\n\n        return (\n                <ResizeSensor onResize={this._resize}>\n                    <SterlingKeyboard>\n                        {\n                            this._getNavbar()\n                        }\n                        <SterlingSidebar/>\n                        {\n                            !drawerOpen\n                                ? this._getStage()\n                                : (\n                                    <SplitPane\n                                        split={'vertical'}\n                                        defaultSize={350}\n                                        minSize={150}\n                                        maxSize={-150}\n                                        onChange={this._resize}\n                                    >\n                                        { this._getDrawer() }\n                                        { this._getStage() }\n                                    </SplitPane>\n                                )\n                        }\n                    </SterlingKeyboard>\n                </ResizeSensor>\n        )\n\n    }\n\n    private _getDrawer = (): React.ReactNode => {\n\n        const props = this.props;\n        const Evaluator = this._evaluatorView;\n        const evalActive =\n            (props.mainView === 'graph' && props.graphView === 'evaluator') ||\n            (props.mainView === 'table' && props.tableView === 'evaluator') ||\n            (props.mainView === 'source' && props.sourceView === 'evaluator');\n\n        return <SterlingDrawer>\n            {\n                evalActive\n                    ?\n                        <Evaluator evaluator={this._evaluator}/>\n                    :\n                        props.mainView === 'graph' ? <GraphDrawer/> :\n                        props.mainView === 'table' ? <TableDrawer/> :\n                        props.mainView === 'source' ? <SourceDrawer/> :\n                        null\n\n            }\n        </SterlingDrawer>;\n\n    };\n\n    private _getNavbar = (): React.ReactNode => {\n\n        const target = process.env.REACT_APP_BUILD_TARGET;\n        switch (target) {\n            case 'static':\n                return <StaticNavbar/>;\n            case 'alloy':\n            case 'forge':\n            default:\n                return <SterlingNavbar connection={this.props.connection}/>;\n\n        }\n\n    };\n\n    private _getStage = (): React.ReactNode => {\n\n        const view = this.props.mainView;\n\n        return (\n            <SterlingStage>\n                {\n                    view === 'table' ? <TableStage/> :\n                    view === 'graph' ? <GraphStage/> :\n                    view === 'source' ? <SourceStage/> : null\n                }\n            </SterlingStage>\n        )\n\n    };\n\n    private _initializeConnection = (): void => {\n\n        const connection = this.props.connection;\n\n        connection.addEventListener('connect', () => {\n            connection.requestCurrentInstance();\n        });\n\n        connection.addEventListener('instance', event => {\n            this.props.setInstance(event.instance);\n        });\n\n        connection.connect();\n\n    };\n\n    private _resize = (): void => {\n\n        this.props.graph.resize();\n\n    }\n\n}\n\nexport default connector(Sterling);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from '@reduxjs/toolkit';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { AlloyConnection } from './connections/AlloyConnection';\nimport { ForgeConnection } from './connections/ForgeConnection';\nimport NoConnection from './connections/NoConnection';\nimport { sterlingApp } from './rootReducer';\nimport Sterling from './sterling/Sterling';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.scss';\n\nconst target = process.env.REACT_APP_BUILD_TARGET;\nconst connection = target === 'alloy' ? new AlloyConnection()\n    : target === 'forge' ? new ForgeConnection()\n    : target === 'static' ? new NoConnection()\n    : new AlloyConnection();\nconst store = createStore(sterlingApp);\n\nReactDOM.render(\n    <Provider store={store}>\n        <Sterling connection={connection}/>\n    </Provider>,\n    document.getElementById('root'))\n;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}