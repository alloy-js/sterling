{"version":3,"sources":["util/EventDispatcher.ts","sterling/SterlingConnection.ts","connections/AlloyConnection.ts","connections/ForgeConnection.ts","sterling/sterlingSlice.ts","features/graph/drawer-views/data/dataSlice.ts","features/table/TableTags.tsx","features/graph/drawer-views/edge-styling/edgeTypes.ts","features/graph/drawer-views/edge-styling/edgeStylingSlice.ts","features/graph/drawer-views/graph-settings/graphSettingsSlice.ts","features/graph/drawer-views/layout/layoutSlice.ts","features/graph/drawer-views/node-styling/nodeTypes.ts","features/graph/drawer-views/node-styling/nodeStylingSlice.ts","features/table/tableTypes.ts","features/graph/graphSlice.ts","features/source/sourceSlice.ts","features/table/tableSlice.ts","rootReducer.ts","evaluator/Evaluator.ts","evaluator/EvaluatorView.tsx","sterling/SterlingDrawer.tsx","features/graph/util.ts","features/graph/drawer-views/edge-styling/QuickEdgeStyling.tsx","features/graph/drawer-views/graph-settings/EdgeSettings.tsx","features/graph/drawer-views/layout/Layout.tsx","features/graph/drawer-views/projections/Projections.tsx","features/graph/drawer-components/LabelStyler.tsx","features/graph/graphTypes.ts","features/graph/drawer-views/edge-styling/components/LinkStyler.tsx","features/graph/drawer-views/edge-styling/EdgeStyling.tsx","features/graph/drawer-views/graph-settings/GraphSettings.tsx","features/graph/drawer-views/layout/QuickLayout.tsx","features/graph/drawer-views/node-styling/components/ShapeSelector.tsx","features/graph/drawer-views/node-styling/components/ShapeStyler.tsx","features/graph/drawer-views/node-styling/NodeStyling.tsx","features/graph/GraphDrawer.tsx","features/graph/GraphStage.tsx","features/graph/graphData.ts","features/source/SourceDrawer.tsx","features/source/SourceStage.tsx","features/table/drawer-components/AlloyMultiSelect.tsx","features/table/TableDrawer.tsx","features/table/stage-components/PopoverRow.tsx","features/table/stage-components/SkolemListPopover.tsx","features/table/TableStage.tsx","features/table/stage-components/SignatureHTMLTable.tsx","features/table/stage-components/FieldHTMLTable.tsx","features/table/stage-components/SkolemHTMLTable.tsx","sterling/SterlingNavbar.tsx","sterling/SterlingSidebar.tsx","sterling/SterlingStage.tsx","sterling/Sterling.tsx","serviceWorker.ts","index.tsx"],"names":["EventDispatcher","_listeners","type","listener","undefined","this","listeners","indexOf","push","event","listenerarray","target","slice","forEach","callback","call","index","splice","SterlingConnection","url","_url","_ws","_auto_reconnect","_auto_reconnect_interval","_connected","_heartbeat_count","_heartbeat_id","_heartbeat_interval","_heartbeat_latency","_heartbeat_timestamp","onclose","close","_initializeConnection","_request","id","expression","data","dispatchEvent","performance","now","length","instance","AlloyInstance","e","message","WebSocket","onopen","_onOpen","bind","_onClose","onerror","_onError","onmessage","_onMessage","_reconnect","_resetHeartbeat","header","_handlePong","_handleEval","_handleXML","send","window","setTimeout","request","clearTimeout","_ping","AlloyConnection","location","hostname","port","ForgeConnection","search","sterlingSlice","createSlice","name","initialState","mainView","tableView","graphView","sourceView","welcomeDescription","welcomeTitle","reducers","setGraphView","state","action","payload","setInstance","setMainView","setSourceView","setTableView","actions","asAttribute","Map","atoms","collapseProjections","projections","unprojected","List","dataSlice","addProjection","sig","get","atom","set","delete","nextAtom","cur","atm","idx","nxt","previousAtom","removeProjection","sort","alphabetical","setProjection","has","toggleAsAttribute","field","curr","toggleCollapseProjections","extraReducers","build","addCase","univ","signatures","find","subTypes","fields","skolems","filter","s","arity","both","withMutations","map","findAtom","item","list","a","b","localeCompare","SignatureTag","props","signature","nameFunction","className","fill","React","FieldTag","tokens","split","FieldTagEls","join","icon","iconSize","style","padding","transform","SkolemTag","skolem","buildFieldTree","hideEmpty","children","tuples","label","collapsed","Fields","Skolems","collapseEdgeStyle","collapseScheme","hideEmptyFields","labelStyles","linkStyles","selected","treeField","treeSkolem","edgeStylingSlice","clearAll","clearCurrent","collapseTreeNode","expandTreeNode","selectTreeNode","setColorScheme","colors","styles","color","link","newlink","cloneLinkStyle","stroke","newlabel","cloneLabelStyle","setLabelColor","setLabelSize","size","parseInt","isNaN","font","setStroke","setStrokeWidth","width","strokeWidth","toggleCollapseEdgeStyle","toggleCollapseScheme","toggleHideEmptyFields","builder","buildSkolemTree","graphSettingsSlice","axesVisible","bundleFactor","collapseEdgeSettings","collapseGraphSettings","gridVisible","edgeLabelPlacement","setBundleFactor","value","setLabelPlacement","toggleAxesVisible","toggleCollapseEdgeSettings","toggleCollapseGraphSettings","toggleGridVisible","align","nodesep","rankdir","ranker","ranksep","layoutSlice","setAlign","setNodeSep","setRankDir","setRanker","setRankSep","buildTypeTree","populate","HorizontalAlignment","LayoutDirection","SortDirection","SortMethod","TablesType","collapseNodeStyle","hideDisconnected","hideEmptySets","labels","nodeTree","shapes","nodeStylingSlice","setFill","shape","newshape","cloneShapeStyle","setHeight","height","setRadius","radius","setShape","convertToShape","setWidth","toggleCollapseNodeStyle","toggleHideDisconnected","next","toggleHideEmptySets","graph","Graph","graphSlice","combineReducers","reducer","sourceSlice","setSelected","SKOLEM_COLORS","buildNameFunction","removeThis","replace","buildSortFunction","method","Size","sorting","sizeSort","direction","Ascending","Alphabetical","alphabeticalSort","Group","groupSort","alignment","Left","collapseData","collapseLayout","collapseTables","dataSelected","highlightSkolems","layoutDirection","Row","removeBuiltin","removeEmpty","primarySort","Descending","secondarySort","skolemColors","tablesType","All","tableSlice","clearSelectedData","deselectData","Select","selectData","includes","setAlignment","setLayoutDirection","setSort","setTableTypes","toggleCollapseData","toggleCollapseLayout","toggleCollapseTables","toggleHighlightSkolems","toggleRemoveBuiltin","toggleRemoveEmpty","toggleRemoveThis","i","sterlingApp","Evaluator","connection","_connection","_expressions","_pending","addEventListener","_parse","_nextid","error","result","response","match","trim","_setPending","requestEvaluateExpression","EvaluatorView","_botRef","_textRef","_onDown","textarea","current","selectionStart","history","count","setState","_onEnter","evaluator","evaluate","_onKeyDown","key","preventDefault","_onUp","_onPending","_setActive","_onReady","expressions","_scrollDown","bottom","scrollIntoView","active","readOnly","_setText","text","createRef","prevProps","prevState","removeEventListener","SuccessIcon","ErrorIcon","title","intent","Intent","DANGER","NONE","ref","autoComplete","placeholder","spellCheck","onKeyDown","Component","SterlingDrawer","Section","collapseIcon","toUpperCase","onToggle","minimal","onClick","isOpen","keepChildrenMounted","POPPER_MODIFIERS","preventOverflow","enabled","hide","COLOR_SCHEMES","specifier","n","Array","t","Math","max","min","round","c","d3","hex","schemes","DEFAULT_COLORS","background","backgroundGradient","percent","strings","foreground","rgb","r","g","mapDispatch","connector","connect","collapse","flexWrap","maxHeight","overflow","scheme","content","margin","minWidth","minHeight","LABEL_PLACEMENT_OPTIONS","inline","allowNumericCharactersOnly","minorStepSize","stepSize","majorStepSize","onValueChange","options","onChange","ALIGN_OPTIONS","DIRECTION_OPTIONS","RANKER_OPTIONS","Object","assign","DagreLayout","apply","update","toArray","projection","Fragment","ellipsize","hasBackdrop","modifiers","position","Position","BOTTOM","usePortal","wrapperTagName","vertical","LabelStyler","_","strVal","onChangeSize","onChangeColor","LEFT","backgroundColor","triangle","mapTreeToNodes","tree","childNodes","isExpanded","isSelected","hasCaret","LinkStyler","onChangeStroke","onChangeStrokeWidth","attr","labelColor","labelSize","fieldTree","skolemTree","isempty","hasskolem","trees","hideFld","secondaryLabel","contents","onNodeClick","node","toString","onNodeCollapse","onNodeExpand","alignIndicator","Alignment","RIGHT","checked","description","CircleLayout","GridLayout","row","RowLayout","groups","CircleProps","onSetRadius","RectangleProps","onSetWidth","onSetHeight","ShapeSelector","onSetShape","valueToShape","ShapeStyler","onChangeFill","contentClassName","view","DEFAULT_EDGE_STYLES","DEFAULT_NODE_STYLES","nodes","edgeLabels","links","nodeLabels","settings","_ref","canvas","_update","Set","isBuiltin","add","batoms","anyInCommon","toStyle","styletree","existingNodes","attributes","_projections","project","isDefined","hasAtoms","edgeFields","isAttribute","labelFields","edgeSkolems","labelSkolems","edges","connected","buildEdge","tuple","source","middle","group","labelMap","addLabel","paren","expressionType","joined","x","y","projectedAtoms","types","projectable","some","every","AlloyTuple","typeHierarchy","generateGraph","nodeStyles","_buildNodeStyles","edgeStyles","_buildEdgeStyles","SourcePlaceholder","alignText","sources","filename","pop","STYLE","githubGist","SyntaxHighlighter","registerLanguage","case_insensitive","keywords","contains","COMMENT","begin","relevance","welcome","language","showLineNumbers","AlloySelect","MultiSelect","ofType","highlightText","query","lastIndex","words","word","escapeRegExpChars","regexp","RegExp","exec","before","rest","AlloyMultiSelect","_filterItem","toLowerCase","_isItemSelected","itemsSelected","_onRemoveTag","tag","onDeselectItem","_onSelectItem","onSelectItem","_renderItem","matchesPredicate","_renderSignature","_renderField","_renderSkolem","_renderList","sigs","items","flds","skls","alpha","builtinSort","renderedSigs","renderItem","renderedFlds","renderedSkls","ulRef","itemsParentRef","disabled","labelElement","handleClick","_renderTag","_tagProps","itemType","clearButton","onClearSelectedItems","sortItems","itemPredicate","itemRenderer","itemListRenderer","onItemSelect","popoverProps","resetOnSelect","scrollToActiveItem","selectedItems","tagInputProps","onRemove","rightElement","tagProps","tagRenderer","zIndex","currentTarget","selectedValue","Signatures","Column","Center","Right","PopoverRow","_buildShadowStyle","thickness","_onMouseEnter","_onMouseLeave","Manager","Reference","onMouseEnter","onMouseLeave","boxShadow","Popper","placement","data-placement","SkolemListPopover","getAlignClass","getLayoutClass","secondSort","filtering","keepSignatures","keepFields","keepSkolems","pass","removeBuiltins","removeEmptys","removeSkolems","elevation","buildTableHeader","bordered","condensed","striped","SignatureHTMLTable","FieldHTMLTable","SkolemHTMLTable","_requestNext","requestNextInstance","command","ready","console","log","fixedToTop","Classes","MINIMAL","large","rightIcon","SidebarButton","hoverOpenDelay","PRIMARY","click","GraphSidebar","TableSidebar","SourceSidebar","mainview","evalActive","SterlingStage","FocusStyleManager","onlyShowFocusOnTabs","_evaluator","_evaluatorView","_getDrawer","_getStage","requestCurrentInstance","_resize","resize","drawerOpen","onResize","defaultSize","minSize","maxSize","Boolean","process","REACT_APP_FORGE_BUILD","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.351a7b26.chunk.js","sourcesContent":["export interface Event {\n    type: string,\n    [key: string]: any\n}\n\nclass EventDispatcher {\n\n    private _listeners?: {[key: string]: ((event: any) => void)[]};\n\n    addEventListener (type: string, listener: (event: any) => void): this {\n\n        if (this._listeners === undefined) this._listeners = {};\n\n        const listeners = this._listeners;\n\n        if (listeners[type] === undefined) {\n            listeners[type] = [];\n        }\n\n        if (listeners[type].indexOf(listener) === -1) {\n            listeners[type].push(listener);\n        }\n\n        return this;\n\n    }\n\n    dispatchEvent (event: Event): this {\n\n        if (this._listeners === undefined) return this;\n\n        const listenerarray = this._listeners[event.type];\n\n        if (listenerarray !== undefined) {\n\n            event.target = this;\n\n            const arraycopy = listenerarray.slice();\n\n            arraycopy.forEach(callback => {\n                callback.call(this, event);\n            });\n\n        }\n\n        return this;\n\n    }\n\n    hasEventListener (type: string, listener: (event: any) => void): boolean {\n\n        if (this._listeners === undefined) return false;\n\n        const listeners = this._listeners;\n\n        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\n    }\n\n    removeEventListener (type: string, listener: (event: any) => void): this {\n\n        if (this._listeners === undefined) return this;\n\n        const listenerarray = this._listeners[type];\n\n        if (listenerarray !== undefined) {\n            const index = listenerarray.indexOf(listener);\n            if (index !== -1) {\n                listenerarray.splice(index, 1);\n            }\n        }\n\n        return this;\n\n    }\n\n}\n\nexport {\n    EventDispatcher\n}\n","import { AlloyInstance } from 'alloy-ts';\nimport { EventDispatcher } from '../util/EventDispatcher';\n\n\n/**\n * Events dispatched by a SterlingConnectiong:\n *   connect: connection established\n *   disconnect: connection lost\n *   error: an error occurred\n *   eval: a response from the evaluator\n *   instance: a new instance received\n */\nabstract class SterlingConnection extends EventDispatcher {\n\n    protected _url: string;\n    protected _ws: WebSocket | null;\n\n    private _auto_reconnect: boolean;\n    private _auto_reconnect_interval: number;\n    private _connected: boolean;\n\n    _heartbeat_count: number;\n    _heartbeat_id: number;\n    _heartbeat_interval: number;\n    _heartbeat_latency: DOMHighResTimeStamp;\n    _heartbeat_timestamp: DOMHighResTimeStamp;\n\n    protected constructor (url: string) {\n\n        super();\n\n        this._url = url;\n        this._ws = null;\n\n        this._auto_reconnect = false;\n        this._auto_reconnect_interval = 5000;\n        this._connected = false;\n\n        this._heartbeat_count = 0;\n        this._heartbeat_id = 0;\n        this._heartbeat_interval = 15000;\n        this._heartbeat_latency = 0;\n        this._heartbeat_timestamp = 0;\n\n    }\n\n    /**\n     * Establish a connection with a data provider\n     */\n    connect (): void {\n\n        if (this._ws) {\n            this._ws.onclose = null;\n            this._ws.close();\n        }\n\n        this._initializeConnection();\n\n    }\n\n    requestCurrentInstance (): boolean {\n\n        return this._request('current');\n\n    }\n\n    requestEvaluateExpression (id: number, expression: string): boolean {\n\n        return this._request(`EVL:${id}:${expression}`);\n\n    }\n\n    requestNextInstance (): boolean {\n\n        return this._request('next');\n\n    }\n\n    private _handleEval (data: string): void {\n\n        this.dispatchEvent({\n            type: 'eval',\n            data: data\n        });\n\n    }\n\n    private _handlePong (): void {\n\n        this._heartbeat_latency += performance.now() - this._heartbeat_timestamp;\n        this._heartbeat_count += 1;\n\n    }\n\n    private _handleXML (data: string): void {\n\n        if (data.length) {\n            try {\n                this.dispatchEvent({\n                    type: 'instance',\n                    instance: new AlloyInstance(data)\n                });\n            } catch (e) {\n                this.dispatchEvent({\n                    type: 'error',\n                    message: 'Invalid instance data'\n                });\n            }\n        }\n\n    }\n\n    private _initializeConnection () {\n\n        this._ws = new WebSocket(this._url);\n        this._ws.onopen = this._onOpen.bind(this);\n        this._ws.onclose = this._onClose.bind(this);\n        this._ws.onerror = this._onError.bind(this);\n        this._ws.onmessage = this._onMessage.bind(this);\n\n    }\n\n    private _onClose (e: Event): void {\n\n        this._connected = false;\n        this._ws = null;\n        if (this._auto_reconnect) this._reconnect();\n        this.dispatchEvent({ type: 'disconnect' });\n\n    }\n\n    private _onError (e: Event): void {\n\n        this.dispatchEvent({ type: 'error' });\n\n    }\n\n    private _onMessage (e: MessageEvent): void {\n\n        this._resetHeartbeat();\n        let header = e.data.slice(0, 4);\n        let data = e.data.slice(4);\n        switch (header) {\n            case 'pong':\n                this._handlePong();\n                break;\n            case 'EVL:':\n                this._handleEval(data);\n                break;\n            case 'XML:':\n                this._handleXML(data);\n                break;\n            default:\n                this.dispatchEvent({\n                    type: 'error',\n                    message: `Unknown response header: ${header}`\n                });\n                break;\n        }\n\n    }\n\n    private _onOpen (e: Event): void {\n\n        this._connected = true;\n        this._resetHeartbeat();\n        this.dispatchEvent({ type: 'connect' });\n\n    }\n\n    private _ping () {\n\n        if (this._ws) {\n            this._heartbeat_timestamp = performance.now();\n            this._ws.send('ping');\n        }\n\n    }\n\n    private _reconnect (): void {\n\n        window.setTimeout(this._initializeConnection.bind(this), this._auto_reconnect_interval);\n\n    }\n\n    private _request (request: string): boolean {\n\n        return this._connected && this._ws\n            ? (this._ws.send(request), true)\n            : false;\n\n    }\n\n    private _resetHeartbeat (): void {\n\n        clearTimeout(this._heartbeat_id);\n        this._heartbeat_id = window.setTimeout(this._ping.bind(this), this._heartbeat_interval);\n\n    }\n\n}\n\nexport {\n    SterlingConnection\n};\n","import { SterlingConnection } from '../sterling/SterlingConnection';\n\nclass AlloyConnection extends SterlingConnection {\n\n    constructor () {\n\n        super('ws://' + window.location.hostname + ':' + window.location.port + '/alloy');\n\n    }\n\n}\n\nexport {\n    AlloyConnection\n};\n","import { SterlingConnection } from '../sterling/SterlingConnection';\n\nclass ForgeConnection extends SterlingConnection {\n\n    constructor () {\n\n        super('ws://localhost:' + window.location.search.slice(1));\n\n    }\n\n}\n\nexport {\n    ForgeConnection\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance } from 'alloy-ts';\n\n// Sterling view types\nexport type MainView = 'graph' | 'table' | 'source';\nexport type TableView = 'settings' | 'evaluator' | null;\nexport type GraphView = 'node' | 'edge' | 'layout' | 'settings' | 'evaluator' | null;\nexport type SourceView = 'files' | 'evaluator' | null;\n\n// Sterling state\nexport interface SterlingState {\n    instance: AlloyInstance | null\n    mainView: MainView\n    tableView: TableView\n    graphView: GraphView\n    sourceView: SourceView\n    welcomeDescription: string\n    welcomeTitle: string\n}\n\nconst initialState: SterlingState = {\n    instance: null,\n    mainView: 'graph',\n    tableView: 'settings',\n    graphView: 'node',\n    sourceView: 'files',\n    welcomeDescription: 'Use Alloy to generate an instance.',\n    welcomeTitle: 'Welcome to Sterling'\n};\n\nconst sterlingSlice = createSlice({\n    name: 'sterling',\n    initialState: initialState,\n    reducers: {\n\n        setGraphView (state, action: PayloadAction<GraphView>) {\n            state.graphView = action.payload === state.graphView\n                ? null\n                : action.payload;\n        },\n\n        setInstance (state, action: PayloadAction<AlloyInstance | null>) {\n\n            state.instance = action.payload;\n\n        },\n\n        setMainView (state, action: PayloadAction<MainView>) {\n            state.mainView = action.payload;\n        },\n\n        setSourceView (state, action: PayloadAction<SourceView>) {\n            state.sourceView = action.payload === state.sourceView\n                ? null\n                : action.payload;\n        },\n\n        setTableView (state, action: PayloadAction<TableView>) {\n            state.tableView = action.payload === state.tableView\n                ? null\n                : action.payload;\n        }\n\n    }\n});\n\nexport const {\n    setGraphView,\n    setInstance,\n    setMainView,\n    setSourceView,\n    setTableView\n} = sterlingSlice.actions;\nexport default sterlingSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance } from 'alloy-ts';\nimport { List, Map } from 'immutable';\nimport { setInstance } from '../../../../sterling/sterlingSlice'\n\nexport interface DataState {\n    asAttribute: Map<string, boolean>\n    atoms: Map<string, string[]>\n    collapseProjections: boolean\n    projections: Map<string, string>\n    unprojected: List<string>\n}\n\nconst initialState: DataState = {\n    asAttribute: Map(),\n    atoms: Map(),\n    collapseProjections: false,\n    projections: Map(),\n    unprojected: List()\n};\n\nconst dataSlice = createSlice({\n    name: 'graphdata',\n    initialState: initialState,\n    reducers: {\n        addProjection (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            const atoms = state.atoms.get(sig);\n            if (atoms && atoms.length) {\n                const atom = atoms[0];\n                state.projections = state.projections.set(sig, atom);\n                const index = state.unprojected.indexOf(sig);\n                if (index !== -1)\n                    state.unprojected = state.unprojected.delete(index);\n            }\n        },\n        nextAtom (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            const cur = state.projections.get(sig);\n            const atm = state.atoms.get(sig);\n            if (cur && atm) {\n                const idx = atm.indexOf(cur);\n                const nxt = idx + 1;\n                if (idx !== -1 && nxt < atm.length) {\n                    state.projections = state.projections.set(sig, atm[nxt]);\n                }\n            }\n        },\n        previousAtom (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            const cur = state.projections.get(sig);\n            const atm = state.atoms.get(sig);\n            if (cur && atm) {\n                const idx = atm.indexOf(cur);\n                const nxt = idx - 1;\n                if (idx !== -1 && nxt >= 0) {\n                    state.projections = state.projections.set(sig, atm[nxt]);\n                }\n            }\n        },\n        removeProjection (state, action: PayloadAction<string>) {\n            const sig = action.payload;\n            state.projections = state.projections.delete(sig);\n            state.unprojected = state.unprojected.push(sig).sort(alphabetical);\n        },\n        setProjection (state, action: PayloadAction<{sig: string, atom: string}>) {\n            const { sig, atom } = action.payload;\n            if (state.projections.has(sig) && state.projections.get(sig) !== atom) {\n                state.projections = state.projections.set(sig, atom);\n            }\n        },\n        toggleAsAttribute (state, action: PayloadAction<string|null>) {\n            const field = action.payload;\n            if (field) {\n                const curr = state.asAttribute.get(field);\n                state.asAttribute = state.asAttribute.set(field, !curr);\n            }\n        },\n        toggleCollapseProjections (state) {\n            state.collapseProjections = !state.collapseProjections\n        },\n    },\n    extraReducers: build =>\n        build.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance) {\n\n                const univ = instance.signatures().find(sig => sig.id() === 'univ');\n\n                if (univ) {\n\n                    const signatures = univ.subTypes();\n                    const fields = instance.fields();\n                    const skolems = instance.skolems().filter(s => s.arity() > 1);\n                    const both = [...fields, ...skolems];\n\n                    // Keep any existing projections\n                    state.projections = Map<string, string>().withMutations(map => {\n                        signatures.forEach(sig => {\n                            const atom = state.projections.get(sig.id());\n                            if (atom && sig.findAtom(atom)) {\n                                map.set(sig.id(), atom);\n                            }\n                        });\n                    });\n\n                    // Keep any fields set to display as attributes\n                    state.asAttribute = Map(both.map(item => {\n                        const id = item.id();\n                        return state.asAttribute.has(id)\n                            ? [id, state.asAttribute.get(id)!]\n                            : [id, false];\n                    }));\n\n                    // Create the list of unprojected signatures\n                    state.unprojected = List<string>().withMutations(list => {\n                        signatures.forEach(sig => {\n                            const id = sig.id();\n                            const count = sig.atoms(true).length;\n                            if (count && !state.projections.has(id))\n                                list.push(id);\n                        });\n                    }).sort(alphabetical);\n\n                    // Extract atoms\n                    state.atoms = Map(signatures.map(sig => [\n                            sig.id(),\n                            sig.atoms(true).map(atom => atom.name())\n                        ]));\n\n\n                } else {\n\n                    state.asAttribute = Map();\n                    state.atoms = Map();\n                    state.projections = Map();\n                    state.unprojected = List();\n\n                }\n\n            } else {\n\n                state.atoms = Map();\n                state.projections = Map();\n                state.unprojected = List();\n\n            }\n\n        })\n});\n\nfunction alphabetical (a: string, b: string): number {\n    return a.localeCompare(b);\n}\n\nexport const {\n    addProjection,\n    nextAtom,\n    previousAtom,\n    removeProjection,\n    setProjection,\n    toggleAsAttribute,\n    toggleCollapseProjections\n} = dataSlice.actions;\nexport default dataSlice.reducer;\n","import { Icon, Tag } from '@blueprintjs/core';\nimport { AlloyField, AlloySignature, AlloySkolem } from 'alloy-ts';\nimport * as React from 'react';\nimport { SigFieldSkolem } from './tableTypes';\n\nexport interface IAlloyTagProps {\n    fill?: boolean\n    nameFunction?: (item: SigFieldSkolem) => string\n}\n\nexport interface ISignatureTagProps extends IAlloyTagProps {\n    signature: AlloySignature | string\n}\n\nexport interface IFieldTagProps extends IAlloyTagProps {\n    field: AlloyField | string\n}\n\nexport interface ISkolemTagProps extends IAlloyTagProps {\n    skolem: AlloySkolem | string\n}\n\nclass SignatureTag extends React.Component<ISignatureTagProps> {\n\n    static className = 'sig-tag';\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const name = typeof props.signature === 'string'\n            ? props.signature\n            : props.nameFunction\n                ? props.nameFunction(props.signature)\n                : props.signature.name();\n\n        return (\n            <Tag className={SignatureTag.className} fill={props.fill}>\n                { name }\n            </Tag>\n        );\n\n    }\n\n}\n\nclass FieldTag extends React.Component<IFieldTagProps> {\n\n    static className = 'field-tag';\n\n    render (): React.ReactNode {\n\n        const name = typeof this.props.field === 'string'\n            ? this.props.field\n            : this.props.nameFunction\n                ? this.props.nameFunction(this.props.field)\n                : this.props.field.name();\n\n        const tokens = name.split('<:');\n\n        return (\n            <Tag\n                className={FieldTag.className}\n                fill={true}>\n                { FieldTag.FieldTagEls(tokens) }\n            </Tag>\n        )\n\n    }\n\n    public static FieldTagEls (tokens: Array<string>): React.ReactElement {\n\n        if (tokens.length !== 2)\n            return <>{tokens.join('')}</>;\n\n        return (<>\n            {tokens[0]}\n            <Icon\n                icon='symbol-triangle-down'\n                iconSize={14}\n                style={{\n                    padding: '1px',\n                    transform: 'rotate(90deg)'\n                }}/>\n            {tokens[1]}\n        </>);\n\n    }\n\n}\n\nclass SkolemTag extends React.Component<ISkolemTagProps> {\n\n    static className = 'skolem-tag';\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const name = typeof props.skolem === 'string'\n            ? props.skolem\n            : props.nameFunction\n                ? props.nameFunction(props.skolem)\n                : props.skolem.name();\n\n        return (\n            <Tag className={SkolemTag.className} fill={true}>\n                { name }\n            </Tag>\n\n        );\n\n    }\n\n}\n\nexport {\n    SignatureTag,\n    FieldTag,\n    SkolemTag\n}\n","import { AlloyField, AlloySkolem } from 'alloy-ts';\nimport { FieldTag } from '../../../table/TableTags';\nimport { Tree } from '../../graphTypes';\n\nfunction buildFieldTree (fields: AlloyField[], hideEmpty: boolean): Tree | null {\n\n    const flds = hideEmpty\n        ? fields.filter(field => field.tuples().length)\n        : fields;\n\n    return {\n        id: 'Fields',\n        children: flds.map(field => {\n            return {\n                id: field.id(),\n                label: FieldTag.FieldTagEls(field.id().split('<:')),\n                icon: 'flows',\n                children: []\n            }\n        })\n    };\n\n}\n\nfunction buildSkolemTree (skolems: AlloySkolem[]): Tree | null {\n\n    return {\n        id: 'Skolems',\n        children: skolems\n            .map(skolem => {\n                return {\n                    id: skolem.id(),\n                    icon: 'flows',\n                    children: []\n                }\n            })\n    };\n\n}\n\nexport {\n    buildFieldTree,\n    buildSkolemTree\n}\n","import {\n    cloneLabelStyle,\n    cloneLinkStyle,\n    LabelStyle,\n    LinkStyle\n} from '@atdyer/graph-js';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyField, AlloyInstance, AlloySkolem } from 'alloy-ts';\nimport { Map } from 'immutable';\nimport { setInstance } from '../../../../sterling/sterlingSlice';\nimport { Tree } from '../../graphTypes';\nimport { buildFieldTree, buildSkolemTree } from './edgeTypes';\n\nexport interface EdgeStylingState {\n    collapsed: Map<string, boolean>\n    collapseEdgeStyle: boolean\n    collapseScheme: boolean\n    fields: AlloyField[]\n    hideEmptyFields: boolean\n    labelStyles: Map<string, LabelStyle>\n    linkStyles: Map<string, LinkStyle>\n    selected: string | null\n    skolems: AlloySkolem[]\n    treeField: Tree | null\n    treeSkolem: Tree | null\n}\n\nconst initialState: EdgeStylingState = {\n    collapsed: Map({\n        Fields: false,\n        Skolems: false\n    }),\n    collapseEdgeStyle: false,\n    collapseScheme: false,\n    fields: [],\n    hideEmptyFields: true,\n    labelStyles: Map(),\n    linkStyles: Map(),\n    selected: null,\n    skolems: [],\n    treeField: null,\n    treeSkolem: null\n};\n\nconst edgeStylingSlice = createSlice({\n    name: 'edgestyles',\n    initialState: initialState,\n    reducers: {\n        clearAll (state) {\n            state.labelStyles = state.labelStyles.map(() => ({}));\n            state.linkStyles = state.linkStyles.map(() => ({}));\n        },\n        clearCurrent (state) {\n            if (state.selected) {\n                state.labelStyles = state.labelStyles.set(state.selected, {});\n                state.linkStyles = state.linkStyles.set(state.selected, {});\n            }\n        },\n        collapseTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, true);\n        },\n        expandTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, false);\n        },\n        selectTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            if (state.linkStyles.has(target)\n                || target === 'Fields'\n                || target === 'Skolems') state.selected = target;\n        },\n        setColorScheme (state, action: PayloadAction<string[]>) {\n            const colors = action.payload;\n            if (!colors.length) return;\n            state.linkStyles = state.linkStyles.withMutations(styles => {\n                [...state.fields, ...state.skolems].forEach((item, index) => {\n                    const id = item.id();\n                    const color = colors[index % colors.length];\n                    const link = state.linkStyles.get(id);\n                    if (link) {\n                        const newlink = cloneLinkStyle(link);\n                        newlink.stroke = color;\n                        styles.set(id, newlink);\n                    }\n                });\n            });\n            state.labelStyles = state.labelStyles.withMutations(styles => {\n                [...state.fields, ...state.skolems].forEach((item, index) => {\n                    const id = item.id();\n                    const color = colors[index % colors.length];\n                    const label = state.labelStyles.get(id);\n                    if (label) {\n                        const newlabel = cloneLabelStyle(label);\n                        newlabel.color = color;\n                        styles.set(id, newlabel);\n                    }\n                });\n            })\n        },\n        setLabelColor (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const label = state.labelStyles.get(state.selected);\n                if (label) {\n                    const color = action.payload;\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    color === null\n                        ? delete newlabel.color\n                        : newlabel.color = color;\n                    state.labelStyles = state.labelStyles.set(state.selected, newlabel);\n                }\n            }\n        },\n        setLabelSize (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const label = state.labelStyles.get(state.selected);\n                if (label) {\n                    const size = parseInt(action.payload);\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    isNaN(size) || size === 0\n                        ? delete newlabel.font\n                        : newlabel.font = `${size}px sans-serif`;\n                    state.labelStyles = state.labelStyles.set(state.selected, newlabel);\n                }\n            }\n        },\n        setStroke (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const link = state.linkStyles.get(state.selected);\n                if (link) {\n                    const color = action.payload;\n                    const newlink = cloneLinkStyle(link)!;\n                    color === null\n                        ? delete newlink.stroke\n                        : newlink.stroke = color;\n                    state.linkStyles = state.linkStyles.set(state.selected, newlink);\n                }\n            }\n        },\n        setStrokeWidth (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const link = state.linkStyles.get(state.selected);\n                if (link) {\n                    const width = parseInt(action.payload);\n                    const newlink = cloneLinkStyle(link)!;\n                    isNaN(width) || width === 0\n                        ? delete newlink.strokeWidth\n                        : newlink.strokeWidth = width;\n                    state.linkStyles = state.linkStyles.set(state.selected, newlink);\n                }\n            }\n        },\n        toggleCollapseEdgeStyle (state) {\n            state.collapseEdgeStyle = !state.collapseEdgeStyle;\n        },\n        toggleCollapseScheme (state) {\n            state.collapseScheme = !state.collapseScheme;\n        },\n        toggleHideEmptyFields (state) {\n            state.hideEmptyFields = !state.hideEmptyFields;\n            state.treeField = buildFieldTree(state.fields as AlloyField[], state.hideEmptyFields);\n        }\n    },\n    extraReducers: builder =>\n        builder.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance) {\n\n                const fields = instance.fields();\n                const skolems = instance.skolems().filter(s => s.arity() > 1);\n                const both = [...fields, ...skolems];\n\n                state.fields = fields;\n                state.skolems = skolems;\n                state.treeField = buildFieldTree(fields, state.hideEmptyFields);\n                state.treeSkolem = buildSkolemTree(skolems);\n\n                state.labelStyles = Map(both.map(item => {\n                    const id = item.id();\n                    return state.labelStyles.has(id)\n                        ? [id, cloneLabelStyle(state.labelStyles.get(id)!)]\n                        : [id, {}]\n                }));\n\n                state.linkStyles = Map(both.map(item => {\n                    const id = item.id();\n                    return state.linkStyles.has(id)\n                        ? [id, cloneLinkStyle(state.linkStyles.get(id)!)]\n                        : [id, {}]\n                }));\n\n                if (!state.labelStyles.has('Fields'))\n                    state.labelStyles = state.labelStyles.set('Fields', {});\n                if (!state.labelStyles.has('Skolems'))\n                    state.labelStyles = state.labelStyles.set('Skolems', {});\n                if (!state.linkStyles.has('Fields'))\n                    state.linkStyles = state.linkStyles.set('Fields', {});\n                if (!state.linkStyles.has('Skolems'))\n                    state.linkStyles = state.linkStyles.set('Skolems', {});\n\n            } else {\n\n                state.fields = [];\n                state.labelStyles = Map();\n                state.linkStyles = Map();\n                state.selected = null;\n                state.skolems = [];\n                state.treeField = null;\n                state.treeSkolem = null;\n\n            }\n\n        })\n});\n\nexport const {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setColorScheme,\n    setLabelColor,\n    setLabelSize,\n    setStroke,\n    setStrokeWidth,\n    toggleCollapseEdgeStyle,\n    toggleCollapseScheme,\n    toggleHideEmptyFields\n} = edgeStylingSlice.actions;\nexport default edgeStylingSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { LabelPlacement } from '@atdyer/graph-js';\n\nexport interface GraphSettingsState {\n    axesVisible: boolean\n    bundleFactor: number\n    collapseEdgeSettings: boolean\n    collapseGraphSettings: boolean\n    edgeLabelPlacement: LabelPlacement\n    gridVisible: boolean\n}\n\nconst initialState: GraphSettingsState = {\n    axesVisible: true,\n    bundleFactor: 0.15,\n    collapseEdgeSettings: false,\n    collapseGraphSettings: false,\n    gridVisible: true,\n    edgeLabelPlacement: 'spread'\n};\n\nconst graphSettingsSlice = createSlice({\n    name: 'graphsettings',\n    initialState: initialState,\n    reducers: {\n        setBundleFactor (state, action: PayloadAction<number>) {\n            const value = action.payload;\n            if (value >= 0) state.bundleFactor = value;\n        },\n        setLabelPlacement (state, action: PayloadAction<LabelPlacement>) {\n            state.edgeLabelPlacement = action.payload;\n        },\n        toggleAxesVisible (state) { state.axesVisible = !state.axesVisible },\n        toggleCollapseEdgeSettings (state) { state.collapseEdgeSettings = !state.collapseEdgeSettings },\n        toggleCollapseGraphSettings (state) { state.collapseGraphSettings = !state.collapseGraphSettings },\n        toggleGridVisible (state) { state.gridVisible = !state.gridVisible }\n    }\n});\n\nexport const {\n    setBundleFactor,\n    setLabelPlacement,\n    toggleAxesVisible,\n    toggleCollapseEdgeSettings,\n    toggleCollapseGraphSettings,\n    toggleGridVisible\n} = graphSettingsSlice.actions;\nexport default graphSettingsSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport type Alignment = 'UL' | 'UR' | 'DL' | 'DR' | undefined;\nexport type Direction = 'TB' | 'BT' | 'LR' | 'RL';\nexport type Ranker = 'network-simplex' | 'tight-tree' | 'longest-path';\n\nexport interface LayoutState {\n    align: Alignment\n    nodesep: number\n    rankdir: Direction\n    ranker: Ranker\n    ranksep: number\n}\n\nconst initialState: LayoutState = {\n    align: undefined,\n    nodesep: 100,\n    rankdir: 'BT',\n    ranker: 'network-simplex',\n    ranksep: 200\n};\n\nconst layoutSlice = createSlice({\n    name: 'layout',\n    initialState: initialState,\n    reducers: {\n        setAlign (state, action: PayloadAction<Alignment>) {\n            state.align = action.payload;\n        },\n        setNodeSep (state, action: PayloadAction<number>) {\n            state.nodesep = action.payload;\n        },\n        setRankDir (state, action: PayloadAction<Direction>) {\n            state.rankdir = action.payload;\n        },\n        setRanker (state, action: PayloadAction<Ranker>) {\n            state.ranker = action.payload;\n        },\n        setRankSep (state, action: PayloadAction<number>) {\n            state.ranksep = action.payload;\n        }\n    }\n});\n\nexport const {\n    setAlign,\n    setNodeSep,\n    setRankDir,\n    setRanker,\n    setRankSep\n} = layoutSlice.actions;\nexport default layoutSlice.reducer;\n","import { AlloySignature } from 'alloy-ts';\nimport { Tree } from '../../graphTypes';\n\nfunction buildTypeTree (univ: AlloySignature | null, hideEmpty: boolean): Tree | null {\n\n    if (!univ) return null;\n\n    const populate = (sig: AlloySignature): Tree => {\n\n        const subs = hideEmpty\n            ? sig.subTypes().filter(s => s.atoms().length || s.subTypes().length)\n            : sig.subTypes();\n\n        const children = subs.map(populate);\n        return {\n            id: sig.id(),\n            icon: 'group-objects',\n            children\n        };\n\n    };\n\n    return populate(univ);\n\n}\n\nexport {\n    buildTypeTree\n}\n","import {\n    CircleStyle,\n    cloneLabelStyle,\n    cloneShapeStyle,\n    convertToShape,\n    LabelStyle,\n    RectangleStyle,\n    ShapeStyle\n} from '@atdyer/graph-js';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance, AlloySignature } from 'alloy-ts';\nimport { Map } from 'immutable';\nimport { setInstance } from '../../../../sterling/sterlingSlice';\nimport { Tree } from '../../graphTypes';\nimport { buildTypeTree } from './nodeTypes';\n\nexport interface NodeStylingState {\n    collapsed: Map<string, boolean>\n    collapseNodeStyle: boolean\n    hideDisconnected: Map<string, boolean>\n    hideEmptySets: boolean\n    labels: Map<string, LabelStyle>\n    nodeTree: Tree | null\n    selected: string | null\n    shapes: Map<string, ShapeStyle>\n    univ: AlloySignature | null\n}\n\nconst initialState: NodeStylingState = {\n    collapsed: Map(),\n    collapseNodeStyle: false,\n    hideDisconnected: Map(),\n    hideEmptySets: true,\n    labels: Map(),\n    nodeTree: null,\n    selected: null,\n    shapes: Map(),\n    univ: null\n};\n\nconst nodeStylingSlice = createSlice({\n    name: 'nodestyles',\n    initialState: initialState,\n    reducers: {\n        clearAll (state) {\n            state.labels = state.labels.map(() => ({}));\n            state.shapes = state.shapes.map(() => ({}));\n        },\n        clearCurrent (state) {\n            if (state.selected) {\n                state.labels = state.labels.set(state.selected, {});\n                state.shapes = state.shapes.set(state.selected, {});\n            }\n        },\n        collapseTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, true);\n        },\n        expandTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            state.collapsed = state.collapsed.set(target, false);\n        },\n        selectTreeNode (state, action: PayloadAction<string>) {\n            const target = action.payload;\n            if (state.shapes.has(target)) state.selected = target;\n        },\n        setFill (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape) {\n                    const color = action.payload;\n                    const newshape = shape ? cloneShapeStyle(shape) : {};\n                    color === null\n                        ? delete newshape.fill\n                        : newshape.fill = color;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setHeight (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape && shape.type === 'rectangle') {\n                    const height = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape) as RectangleStyle;\n                    isNaN(height) || height === 0\n                        ? delete newshape.height\n                        : newshape.height = height;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setLabelColor (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const label = state.labels.get(state.selected);\n                if (label) {\n                    const color = action.payload;\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    color === null\n                        ? delete newlabel.color\n                        : newlabel.color = color;\n                    state.labels = state.labels.set(state.selected, newlabel);\n                }\n            }\n        },\n        setLabelSize (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const label = state.labels.get(state.selected);\n                if (label) {\n                    const newlabel = label ? cloneLabelStyle(label) : {};\n                    const size = parseInt(action.payload);\n                    isNaN(size) || size === 0\n                        ? delete newlabel.font\n                        : newlabel.font = `${size}px sans-serif`;\n                    state.labels = state.labels.set(state.selected, newlabel);\n                }\n            }\n        },\n        setRadius (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape && shape.type === 'circle') {\n                    const radius = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape) as CircleStyle;\n                    isNaN(radius) || radius === 0\n                        ? delete newshape.radius\n                        : newshape.radius = radius;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setShape (state, action: PayloadAction<'circle' | 'rectangle' | null>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                const type = action.payload;\n                if (shape === undefined) return;\n                if ((shape && shape.type !== type) || shape !== type) {\n                    const newshape = convertToShape(shape, type);\n                    state.shapes = state.shapes.set(\n                        state.selected,\n                        newshape\n                    );\n                }\n            }\n        },\n        setStroke (state, action: PayloadAction<string|null>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape) {\n                    const color = action.payload;\n                    const newshape = cloneShapeStyle(shape)!;\n                    color === null\n                        ? delete newshape.stroke\n                        : newshape.stroke = color;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setStrokeWidth (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape) {\n                    const width = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape)!;\n                    isNaN(width) || width === -1\n                        ? delete newshape.strokeWidth\n                        : newshape.strokeWidth = width;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        setWidth (state, action: PayloadAction<string>) {\n            if (state.selected) {\n                const shape = state.shapes.get(state.selected);\n                if (shape && shape.type === 'rectangle') {\n                    const width = parseInt(action.payload);\n                    const newshape = cloneShapeStyle(shape) as RectangleStyle;\n                    isNaN(width) || width === 0\n                        ? delete newshape.width\n                        : newshape.width = width;\n                    state.shapes = state.shapes.set(state.selected, newshape);\n                }\n            }\n        },\n        toggleCollapseNodeStyle (state) {\n            state.collapseNodeStyle = !state.collapseNodeStyle;\n        },\n        toggleHideDisconnected (state) {\n            const selected = state.selected;\n            if (selected) {\n                const next = !state.hideDisconnected.get(selected);\n                state.hideDisconnected = state.hideDisconnected.set(selected, next);\n            }\n        },\n        toggleHideEmptySets (state) {\n            state.hideEmptySets = !state.hideEmptySets;\n            state.nodeTree = buildTypeTree(state.univ as AlloySignature, state.hideEmptySets);\n        }\n    },\n    extraReducers: builder =>\n        builder.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance !== null) {\n\n                const signatures = instance.signatures();\n                const univ = signatures.find(sig => sig.id() === 'univ') || null;\n\n                // Build the signature tree using only IDs\n                state.univ = univ;\n                state.nodeTree = buildTypeTree(univ, state.hideEmptySets);\n\n                // For all maps, keeps existing signatures, get rid of ones that\n                // no longer exist, and add new ones\n                state.collapsed = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.collapsed.has(id)\n                        ? [id, !!state.collapsed.get(id)]\n                        : [id, false];\n                }));\n\n                state.hideDisconnected = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.hideDisconnected.has(id)\n                        ? [id, !!state.hideDisconnected.get(id)]\n                        : [id, true];\n                }));\n\n                state.labels = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.labels.has(id)\n                        ? [id, cloneLabelStyle(state.labels.get(id)!)]\n                        : [id, {}];\n                }));\n\n                state.shapes = Map(signatures.map(sig => {\n                    const id = sig.id();\n                    return state.shapes.has(id)\n                        ? [id, cloneShapeStyle(state.shapes.get(id)!)]\n                        : [id, {}];\n                }));\n\n                // If an item was selected, make sure it still exists\n                if (state.selected && !state.shapes.has(state.selected)){\n                    state.selected = null;\n                }\n\n            } else {\n\n                state.collapsed = Map();\n                state.hideDisconnected = Map();\n                state.labels = Map();\n                state.nodeTree = null;\n                state.shapes = Map();\n                state.selected = null;\n                state.univ = null;\n\n            }\n\n        })\n});\n\nexport const {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setFill,\n    setHeight,\n    setLabelColor,\n    setLabelSize,\n    setRadius,\n    setShape,\n    setStroke,\n    setStrokeWidth,\n    setWidth,\n    toggleCollapseNodeStyle,\n    toggleHideDisconnected,\n    toggleHideEmptySets\n} = nodeStylingSlice.actions;\nexport default nodeStylingSlice.reducer;\n","import {\n    AlloyElement,\n    AlloyField,\n    AlloySignature,\n    AlloySkolem, sorting\n} from 'alloy-ts';\n\nexport enum HorizontalAlignment { Left, Center, Right}\nexport enum LayoutDirection { Row, Column}\nexport enum SortDirection { Ascending, Descending}\nexport enum SortMethod { Alphabetical, Builtin, Group, Size}\nexport enum TablesType { All, Signatures, Fields, Skolems, Select}\n\nexport type AlloyNameFn = (item: AlloyElement) => string;\nexport type AlloySortFn = (a: AlloyElement, b: AlloyElement) => number;\nexport type SigFieldSkolem = AlloySignature | AlloyField | AlloySkolem;\nexport type SortType = {\n    method: SortMethod\n    direction: SortDirection\n};\n\nexport const SKOLEM_COLORS = [\n    \"#2965CC\", \"#29A634\", \"#D99E0B\", \"#D13913\", \"#8F398F\",\n    \"#00B3A4\", \"#DB2C6F\", \"#9BBF30\", \"#96622D\", \"#7157D9\"\n];\n\nfunction buildNameFunction (removeThis: boolean): AlloyNameFn {\n    return (item: AlloyElement) => {\n        return removeThis\n            ? item.id().replace(/^this\\//, '')\n            : item.id();\n    }\n}\n\nfunction buildSortFunction (type: SortType, nameFunction: AlloyNameFn): AlloySortFn {\n    if (type.method === SortMethod.Size) {\n        return sorting.sizeSort(type.direction === SortDirection.Ascending);\n    }\n    if (type.method === SortMethod.Alphabetical) {\n        return sorting.alphabeticalSort(nameFunction, type.direction === SortDirection.Ascending);\n    }\n    if (type.method === SortMethod.Group) {\n        return sorting.groupSort();\n    }\n    return () => 0;\n}\n\nfunction getAlignClass (alignment: HorizontalAlignment): string {\n    return alignment === HorizontalAlignment.Left ? 'left' :\n        alignment === HorizontalAlignment.Center ? 'center' :\n            alignment === HorizontalAlignment.Right ? 'right' : '';\n}\n\nfunction getLayoutClass (direction: LayoutDirection): string {\n    return direction === LayoutDirection.Row ? 'row' :\n        direction === LayoutDirection.Column ? 'column' : '';\n}\n\nexport {\n    getAlignClass,\n    buildNameFunction,\n    buildSortFunction,\n    getLayoutClass\n}\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { Graph } from '@atdyer/graph-js';\nimport { createSlice } from '@reduxjs/toolkit';\nimport dataSlice from './drawer-views/data/dataSlice';\nimport edgeStylingSlice from './drawer-views/edge-styling/edgeStylingSlice';\nimport graphSettingsSlice from './drawer-views/graph-settings/graphSettingsSlice';\nimport layoutSlice from './drawer-views/layout/layoutSlice';\nimport nodeStylingSlice from './drawer-views/node-styling/nodeStylingSlice';\n\nexport interface GraphState {\n    graph: Graph\n}\n\nconst initialState: GraphState = {\n    graph: new Graph(),\n};\n\nconst graphSlice = createSlice({\n    name: 'graph',\n    initialState: initialState,\n    reducers: {}\n});\n\nexport default combineReducers({\n    dataSlice,\n    edgeStylingSlice,\n    graphSlice: graphSlice.reducer,\n    graphSettingsSlice,\n    layoutSlice,\n    nodeStylingSlice\n});\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloySource } from 'alloy-ts';\n\nexport interface SourceState {\n    selected: AlloySource | null\n}\n\nconst initialState: SourceState = {\n    selected: null\n};\n\nconst sourceSlice = createSlice({\n    name: 'source',\n    initialState: initialState,\n    reducers: {\n        setSelected (state, action: PayloadAction<AlloySource>) {\n            state.selected = action.payload;\n        }\n    }\n});\n\nexport const {\n    setSelected\n} = sourceSlice.actions;\nexport default sourceSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AlloyInstance, AlloySkolem } from 'alloy-ts';\nimport { setInstance } from '../../sterling/sterlingSlice';\nimport {\n    HorizontalAlignment,\n    LayoutDirection,\n    SigFieldSkolem,\n    SKOLEM_COLORS,\n    SortDirection,\n    SortMethod,\n    SortType,\n    TablesType\n} from './tableTypes';\n\n// Table view state\nexport interface TableState {\n    alignment: HorizontalAlignment\n    collapseData: boolean\n    collapseLayout: boolean\n    collapseTables: boolean\n    data: SigFieldSkolem[]\n    dataSelected: SigFieldSkolem[]\n    highlightSkolems: boolean\n    layoutDirection: LayoutDirection\n    removeBuiltin: boolean\n    removeEmpty: boolean\n    removeThis: boolean\n    primarySort: SortType\n    secondarySort: SortType\n    skolemColors: Map<AlloySkolem, string>\n    tablesType: TablesType\n}\n\n// The initial table view state\nconst initialState: TableState = {\n    alignment: HorizontalAlignment.Left,\n    collapseData: false,\n    collapseLayout: false,\n    collapseTables: false,\n    data: [],\n    dataSelected: [],\n    highlightSkolems: true,\n    layoutDirection: LayoutDirection.Row,\n    removeBuiltin: true,\n    removeEmpty: true,\n    removeThis: true,\n    primarySort: {\n        method: SortMethod.Group,\n        direction: SortDirection.Descending\n    },\n    secondarySort: {\n        method: SortMethod.Size,\n        direction: SortDirection.Descending\n    },\n    skolemColors: new Map(),\n    tablesType: TablesType.All\n};\n\n// The table slice\nconst tableSlice = createSlice({\n    name: 'table',\n    initialState: initialState,\n    reducers: {\n        clearSelectedData (state) { state.dataSelected = [] },\n        deselectData (state, action: PayloadAction<SigFieldSkolem>) {\n            const index = state.dataSelected.indexOf(action.payload);\n            if (index !== -1) {\n                state.dataSelected.splice(index, 1);\n            }\n            state.tablesType = TablesType.Select;\n        },\n        selectData (state, action: PayloadAction<SigFieldSkolem>) {\n            if (!state.dataSelected.includes(action.payload)) {\n                state.dataSelected.push(action.payload);\n            }\n            state.tablesType = TablesType.Select;\n        },\n        setAlignment (state, action: PayloadAction<HorizontalAlignment>) { state.alignment = action.payload },\n        setLayoutDirection (state, action: PayloadAction<LayoutDirection>) { state.layoutDirection = action.payload },\n        setSort (state, action: PayloadAction<SortType>) {\n            if (state.primarySort.method !== action.payload.method) {\n                state.secondarySort = state.primarySort;\n            }\n            state.primarySort = action.payload;\n        },\n        setTableTypes (state, action: PayloadAction<TablesType>) { state.tablesType = action.payload },\n        toggleCollapseData (state) { state.collapseData = !state.collapseData },\n        toggleCollapseLayout (state) { state.collapseLayout = !state.collapseLayout },\n        toggleCollapseTables (state) { state.collapseTables = !state.collapseTables },\n        toggleHighlightSkolems (state) {\n            state.highlightSkolems = !state.highlightSkolems;\n            if (state.highlightSkolems && state.tablesType === TablesType.Skolems) {\n                state.tablesType = TablesType.All;\n            }\n        },\n        toggleRemoveBuiltin (state) { state.removeBuiltin = !state.removeBuiltin },\n        toggleRemoveEmpty (state) { state.removeEmpty = !state.removeEmpty },\n        toggleRemoveThis (state) { state.removeThis = !state.removeThis }\n    },\n    extraReducers: builder =>\n        builder.addCase(setInstance, (state, action: PayloadAction<AlloyInstance | null>) => {\n\n            const instance = action.payload;\n\n            if (instance) {\n\n                const skolems = instance.skolems();\n\n                state.data = [\n                    ...instance.signatures(),\n                    ...instance.fields(),\n                    ...skolems\n                ];\n\n                state.skolemColors = new Map(skolems.map((skolem, i) => {\n                    return [skolem, SKOLEM_COLORS[i % skolems.length]];\n                }));\n\n                state.dataSelected = state.dataSelected.filter(item => {\n                    return state.data.find(curr => curr.id() === item.id()) !== undefined;\n                })\n\n            }\n\n        })\n});\n\nexport const {\n    clearSelectedData,\n    deselectData,\n    selectData,\n    setAlignment,\n    setLayoutDirection,\n    setSort,\n    setTableTypes,\n    toggleCollapseData,\n    toggleCollapseLayout,\n    toggleCollapseTables,\n    toggleHighlightSkolems,\n    toggleRemoveBuiltin,\n    toggleRemoveEmpty,\n    toggleRemoveThis\n} = tableSlice.actions;\n\nexport default tableSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport graphSlice from './features/graph/graphSlice';\nimport sourceSlice from './features/source/sourceSlice';\nimport sterlingSlice from './sterling/sterlingSlice';\nimport tableSlice from './features/table/tableSlice';\n\n\nexport const sterlingApp = combineReducers({\n    graphSlice,\n    sourceSlice,\n    sterlingSlice,\n    tableSlice\n});\n\nexport type RootState = ReturnType<typeof sterlingApp>;\n","import { SterlingConnection } from '../sterling/SterlingConnection';\nimport { EventDispatcher } from '../util/EventDispatcher';\n\nexport interface Expression {\n    id: number\n    expression: string\n    error: boolean\n    result: null | boolean | number | string\n}\n\nclass Evaluator extends EventDispatcher {\n\n    private _connection: SterlingConnection;\n    private _expressions: Expression[];\n    private _pending: Expression | null;\n\n    protected static _nextid: number = 0;\n\n    constructor (connection: SterlingConnection) {\n\n        super();\n\n        this._connection = connection;\n        this._expressions = [];\n        this._pending = null;\n\n        connection.addEventListener('eval', event => {\n            this._parse(event.data);\n        });\n\n    }\n\n    evaluate (expression: string): void {\n\n        this._request({\n            id: Evaluator._nextid++,\n            error: false,\n            expression: expression,\n            result: null\n        });\n\n    }\n\n    expressions (): Expression[] {\n\n        return this._expressions;\n\n    }\n\n    private _parse (response: string): void {\n\n        const expression = this._pending;\n        const tokens = response.match(/(-?\\d+):(.*)/);\n\n        if (tokens === null) return;\n\n        const id = parseInt(tokens[1]);\n\n        if (expression && expression.id === id) {\n\n            const result = tokens[2].trim();\n\n            if (result.slice(0, 4) === 'ERR:') {\n                expression.result = result.slice(4);\n                expression.error = true;\n            }\n            else {\n                expression.result = result;\n                expression.error = false;\n            }\n\n            this._expressions.push(expression);\n            this._setPending(null);\n\n        }\n\n    }\n\n    private _request (expression: Expression): void {\n\n        this._setPending(expression);\n\n        const submitted = this._connection.requestEvaluateExpression(\n            expression.id,\n            expression.expression\n        );\n\n        if (!submitted) {\n\n            this._parse(`${expression.id}:ERR:Error: Not Connected`);\n\n        }\n\n    }\n\n    private _setPending (expression: Expression | null): void {\n\n        this._pending = expression;\n\n        if (expression !== null) {\n\n            this.dispatchEvent({\n                type: 'pending'\n            });\n\n        } else {\n            \n            this.dispatchEvent({\n                type: 'ready'\n            });\n            \n        }\n\n    }\n\n}\n\nexport {\n    Evaluator\n}\n","import { Callout, Icon, Intent } from '@blueprintjs/core';\nimport React from 'react';\nimport { Evaluator, Expression } from './Evaluator';\n\nexport interface IEvaluatorProps {\n    evaluator: Evaluator\n}\n\ninterface IEvaluatorState {\n    count: number\n    expressions: Expression[]\n    history: number\n}\n\nclass EvaluatorView extends React.Component<IEvaluatorProps, IEvaluatorState> {\n\n    private readonly _botRef: React.RefObject<HTMLDivElement>;\n    private readonly _textRef: React.RefObject<HTMLTextAreaElement>;\n\n    constructor (props: IEvaluatorProps) {\n\n        super(props);\n\n        const evaluator = props.evaluator;\n        evaluator.addEventListener('pending', this._onPending);\n        evaluator.addEventListener('ready', this._onReady);\n\n        this._botRef = React.createRef();\n        this._textRef = React.createRef();\n\n        const expressions = props.evaluator.expressions();\n        this.state = {\n            count: expressions.length,\n            expressions: expressions,\n            history: expressions.length\n        }\n\n    }\n\n    componentDidMount(): void {\n\n        this._scrollDown();\n\n    }\n\n    componentDidUpdate(prevProps: Readonly<IEvaluatorProps>, prevState: Readonly<IEvaluatorState>): void {\n\n        if (prevState.count !== this.state.count) {\n\n            this._scrollDown();\n\n        }\n\n    }\n\n    componentWillUnmount(): void {\n\n        const evaluator = this.props.evaluator;\n        evaluator.removeEventListener('pending', this._onPending);\n        evaluator.removeEventListener('ready', this._onReady);\n\n    }\n\n    render (): React.ReactNode {\n\n        const state = this.state;\n        const SuccessIcon = <Icon icon={'circle'} iconSize={12}/>;\n        const ErrorIcon = <Icon icon={'cross'} iconSize={12}/>;\n\n        state.history < state.count\n            ? this._setText(state.expressions[state.history].expression)\n            : this._setText('');\n\n        return (\n            <div className={'evaluator'}>\n                <div className={'evaluator-output'}>\n                    {\n                        this.state.expressions.map(expression => (\n                            <Callout\n                                key={expression.id}\n                                icon={expression.error ? ErrorIcon : SuccessIcon}\n                                title={expression.expression}\n                                intent={expression.error ? Intent.DANGER : Intent.NONE}\n                            >\n                                {expression.result}\n                            </Callout>\n                        ))\n                    }\n                    <div ref={this._botRef}/>\n                </div>\n                <div className={'evaluator-input'}>\n                    <textarea\n                        autoComplete={'off'}\n                        placeholder={'Enter an expression...'}\n                        spellCheck={'false'}\n                        onKeyDown={this._onKeyDown}\n                        ref={this._textRef}\n                    />\n                </div>\n            </div>\n        );\n\n    }\n\n    private _onDown = (): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            const pos = textarea.selectionStart;\n            const len = textarea.value.length;\n\n            if (pos === len) {\n\n                const history = this.state.history < this.state.count\n                    ? this.state.history + 1\n                    : this.state.count;\n\n                this.setState({\n                    history: history\n                });\n\n            }\n        }\n\n    };\n\n    private _onEnter = (): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            const value = textarea.value;\n            textarea.value = '';\n\n            if (value.length)\n                this.props.evaluator.evaluate(value);\n\n        }\n\n    };\n\n    private _onKeyDown = (event: React.KeyboardEvent): void => {\n        const key = event.key;\n        switch (key) {\n            case 'Enter':\n                event.preventDefault();\n                this._onEnter();\n                break;\n            case 'ArrowUp':\n                this._onUp();\n                break;\n            case 'ArrowDown':\n                this._onDown();\n                break;\n            default:\n                break;\n        }\n    };\n\n    private _onPending = (): void => {\n\n        this._setActive(false);\n\n    };\n\n    private _onReady = (): void => {\n\n        this._setActive(true);\n        const expressions = this.props.evaluator.expressions();\n        this.setState({\n            count: expressions.length,\n            expressions: expressions,\n            history: expressions.length\n        });\n\n    };\n\n    private _onUp = (): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            if (textarea.selectionStart === 0) {\n\n                const history = this.state.history > 0\n                    ? this.state.history - 1\n                    : 0;\n\n                this.setState({\n                    history: history\n                });\n\n            }\n\n        }\n\n    };\n\n    private _scrollDown = (): void => {\n\n        const bottom = this._botRef.current;\n\n        if (bottom) {\n\n            bottom.scrollIntoView();\n\n        }\n\n    };\n\n    private _setActive = (active: boolean): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            textarea.readOnly = !active;\n\n        }\n\n    };\n\n    private _setText = (text: string): void => {\n\n        const textarea = this._textRef.current;\n\n        if (textarea) {\n\n            textarea.value = text;\n\n        }\n\n    };\n\n}\n\nexport default EvaluatorView;\n","import { Button, Collapse } from '@blueprintjs/core';\nimport React, { CSSProperties } from 'react';\n\ninterface ISectionProps {\n    collapsed?: boolean\n    onToggle?: () => void\n    style?: CSSProperties\n    title?: string\n}\n\nconst Section: React.FunctionComponent<ISectionProps> = props => {\n\n    const collapseIcon = props.collapsed ? 'expand-all' : 'collapse-all';\n\n    return (\n        <div\n            className={`section ${props.collapsed ? 'collapsed' : ''}`}\n            style={props.style}>\n            {\n                !!props.title &&\n                <div className='header'>\n                    <div className='title'>\n                        {props.title.toUpperCase()}\n                    </div>\n                    {\n                        props.onToggle && <Button\n                            icon={collapseIcon}\n                            minimal={true}\n                            onClick={props.onToggle}/>\n                    }\n                </div>\n            }\n            <Collapse\n                isOpen={!props.collapsed}\n                keepChildrenMounted={true}>\n                <div className='body'>\n                    {props.children}\n                </div>\n            </Collapse>\n        </div>\n    );\n};\n\nclass SterlingDrawer extends React.Component {\n\n    static Section = Section;\n\n    render (): React.ReactNode {\n\n        return (\n            <div className={'drawer'}>\n                { this.props.children }\n            </div>\n        );\n\n    }\n\n}\n\nexport default SterlingDrawer;\n","import * as d3 from 'd3-color';\nimport * as schemes from 'd3-scale-chromatic';\n\nconst POPPER_MODIFIERS = {\n    preventOverflow: {\n        enabled: false\n    },\n    hide: {\n        enabled: false\n    }\n};\n\nconst COLOR_SCHEMES: [string, string[]][] = [\n    ['Tableu', colors(\"4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab\")],\n    ['Turbo', [0, 1, 2, 4, 5, 6, 7].map(i => turboScheme(i/8)).map(c => d3.rgb(c).hex())],\n    ['Categorical', schemes.schemeCategory10.slice()],\n    ['Accent', schemes.schemeAccent.slice()],\n    ['Dark', schemes.schemeDark2.slice()],\n    ['Pastel', schemes.schemePastel1.slice()],\n    ['Paired', schemes.schemePaired.slice()]\n];\n\nconst DEFAULT_COLORS = [\"#f44336\", \"#e91e63\", \"#9c27b0\", \"#673ab7\", \"#3f51b5\",\n    \"#2196f3\", \"#03a9f4\", \"#00bcd4\", \"#009688\", \"#4caf50\", \"#8bc34a\", \"#cddc39\",\n    \"#ffc107\", \"#ff9800\", \"#ff5722\", \"#795548\", \"#607d8b\",\n    \"#333333\", \"#777777\", \"#bbbbbb\", \"#ffffff\"];\n\nfunction background (color?: string | null): string | undefined {\n    if (!color) return;\n    const c = d3.color(color);\n    return c ? c.hex() : undefined;\n}\n\nfunction backgroundGradient (colors: string[]): string {\n    if (!colors.length) return '';\n    const percent = 100 / colors.length;\n    const strings = colors.map((color, i) => `${color} ${i*percent}% ${(i+1)*percent}%`);\n    return `linear-gradient(to right, ${strings.join(',')})`;\n}\n\nfunction colors (specifier: string): string[] {\n    let n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\n    while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\n    return colors;\n}\n\nfunction foreground (color?: string | null): string | undefined {\n    if (!color) return;\n    const c = d3.color(color);\n    if (!c) return;\n    const rgb = c.rgb();\n    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000 > 125\n        ? '#000000'\n        : '#ffffff';\n}\n\nfunction turboScheme (t: number): string {\n    t = Math.max(0, Math.min(1, t));\n    return \"rgb(\"\n        + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + \", \"\n        + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + \", \"\n        + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))\n        + \")\";\n}\n\nexport {\n    COLOR_SCHEMES,\n    DEFAULT_COLORS,\n    POPPER_MODIFIERS,\n    background,\n    backgroundGradient,\n    foreground\n}\n","import { Button, ButtonGroup, Tooltip } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport { backgroundGradient, COLOR_SCHEMES } from '../../util';\nimport { setColorScheme, toggleCollapseScheme } from './edgeStylingSlice';\n\nconst mapState = (state: RootState) => ({\n    collapse: state.graphSlice.edgeStylingSlice.collapseScheme,\n    labelStyles: state.graphSlice.edgeStylingSlice.labelStyles,\n    linkStyles: state.graphSlice.edgeStylingSlice.linkStyles\n});\n\nconst mapDispatch = {\n    setColorScheme,\n    toggleCollapseScheme\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype QuickEdgeStylingProps = ConnectedProps<typeof connector>;\n\nconst QuickEdgeStyling: React.FunctionComponent<QuickEdgeStylingProps> = props => {\n\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapse}\n            onToggle={props.toggleCollapseScheme}\n            title={'Quick Color Scheme'}>\n            <ButtonGroup minimal={true} style={{\n                flexWrap: 'wrap',\n                maxHeight: '15px',\n                overflow: 'hidden'\n            }}>\n                {\n                    COLOR_SCHEMES.map(([name, scheme]) => (\n                        <Tooltip content={name} key={name}>\n                            <Button minimal={true} style={{\n                                background: backgroundGradient(scheme.slice(0, 6)),\n                                margin: '0 5px',\n                                minWidth: '40px',\n                                minHeight: '15px'\n                            }} onClick={() => props.setColorScheme(scheme)}/>\n                        </Tooltip>\n                    ))\n                }\n            </ButtonGroup>\n        </SterlingDrawer.Section>\n    );\n};\n\nexport default connector(QuickEdgeStyling);\n","import { LabelPlacement } from '@atdyer/graph-js';\nimport { FormGroup, HTMLSelect, NumericInput } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport {\n    setBundleFactor,\n    setLabelPlacement,\n    toggleCollapseEdgeSettings\n} from './graphSettingsSlice';\n\nconst LABEL_PLACEMENT_OPTIONS = [\n    { value: 'center', label: 'Center' },\n    { value: 'join', label: 'Join' },\n    { value: 'spread', label: 'Spread' }\n];\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.graphSettingsSlice\n});\n\nconst mapDispatch = {\n    setBundleFactor,\n    setLabelPlacement,\n    toggleCollapseEdgeSettings\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype EdgeSettingsProps = ConnectedProps<typeof connector>;\n\nconst EdgeSettings: React.FunctionComponent<EdgeSettingsProps> = props => (\n    <SterlingDrawer.Section\n        collapsed={props.collapseEdgeSettings}\n        onToggle={props.toggleCollapseEdgeSettings}\n        title={'Edge Settings'}>\n        <FormGroup inline={true} label={'Bundle Factor'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                fill={false}\n                value={props.bundleFactor}\n                min={0}\n                minorStepSize={0.001}\n                stepSize={0.01}\n                majorStepSize={0.1}\n                onValueChange={value => props.setBundleFactor(value)}/>\n        </FormGroup>\n        <FormGroup inline={true} label={'Label Placement'}>\n            <HTMLSelect\n                minimal={true}\n                options={LABEL_PLACEMENT_OPTIONS}\n                value={props.edgeLabelPlacement}\n                onChange={event => {\n                    props.setLabelPlacement(event.target.value as LabelPlacement)\n                }}/>\n        </FormGroup>\n    </SterlingDrawer.Section>\n);\n\nexport default connector(EdgeSettings);\n","import { DagreLayout } from '@atdyer/graph-js';\nimport { Button, FormGroup, HTMLSelect, NumericInput } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport {\n    Alignment, Direction, Ranker,\n    setAlign,\n    setNodeSep,\n    setRankDir,\n    setRanker,\n    setRankSep\n} from './layoutSlice';\n\nconst ALIGN_OPTIONS = [\n    { value: 'undefined', label: '---' },\n    { value: 'UL', label: 'Bottom Left'},\n    { value: 'UR', label: 'Bottom Right'},\n    { value: 'DL', label: 'Top Left' },\n    { value: 'DR', label: 'Top Right' }\n];\n\nconst DIRECTION_OPTIONS = [\n    { value: 'TB', label: 'Bottom to Top' },\n    { value: 'BT', label: 'Top to Bottom' },\n    { value: 'LR', label: 'Left to Right' },\n    { value: 'RL', label: 'Right to Left' }\n];\n\nconst RANKER_OPTIONS = [\n    { value: 'network-simplex', label: 'Network Simplex' },\n    { value: 'tight-tree', label: 'Tight Tree' },\n    { value: 'longest-path', label: 'Longest Path' }\n];\n\nconst mapState = (state: RootState) => ({\n    graph: state.graphSlice.graphSlice.graph,\n    options: state.graphSlice.layoutSlice\n});\n\nconst mapDispatch = {\n    setAlign,\n    setNodeSep,\n    setRankDir,\n    setRanker,\n    setRankSep\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype LayoutProps = ConnectedProps<typeof connector>;\n\nconst Layout: React.FunctionComponent<LayoutProps> = props => {\n\n    const options = Object.assign({}, props.options);\n\n    return (\n        <SterlingDrawer.Section\n            title={'Layout'}>\n            <FormGroup inline={true} label={'Align'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={ALIGN_OPTIONS}\n                    value={options.align === undefined ? 'undefined' : options.align}\n                    onChange={event => {\n                        const value = event.target.value === 'undefined' ? undefined : event.target.value;\n                        props.setAlign(value as Alignment)\n                    }}/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Node Separation'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    value={options.nodesep}\n                    onValueChange={value => props.setNodeSep(value)}/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Ranking Method'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={RANKER_OPTIONS}\n                    value={options.ranker}\n                    onChange={event =>\n                        props.setRanker(event.target.value as Ranker)\n                    }/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Rank Direction'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={DIRECTION_OPTIONS}\n                    value={options.rankdir}\n                    onChange={event =>\n                        props.setRankDir(event.target.value as Direction)\n                    }/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Rank Separation'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    value={options.ranksep}\n                    onValueChange={value => props.setRankSep(value)}/>\n            </FormGroup>\n            <Button\n                minimal={true}\n                text={'Apply Layout'}\n                onClick={() => {\n                    if (props.graph) {\n                        const dagre = new DagreLayout();\n                        dagre.apply(props.graph, options);\n                        props.graph.update();\n                    }\n                }}/>\n        </SterlingDrawer.Section>\n    );\n\n};\n\nexport default connector(Layout);\n","import {\n    Button,\n    ControlGroup,\n    HTMLSelect,\n    Popover,\n    Position,\n    Text\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport { POPPER_MODIFIERS } from '../../util';\nimport {\n    addProjection,\n    nextAtom,\n    previousAtom,\n    removeProjection,\n    setProjection,\n    toggleCollapseProjections\n} from '../data/dataSlice';\n\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.dataSlice\n});\n\nconst mapDispatch = {\n    addProjection,\n    nextAtom,\n    previousAtom,\n    removeProjection,\n    setProjection,\n    toggleCollapseProjections\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype ProjectionsProps = ConnectedProps<typeof connector>;\n\nconst Projections: React.FunctionComponent<ProjectionsProps> = props => {\n\n    const projections = props.projections.toArray();\n\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapseProjections}\n            onToggle={props.toggleCollapseProjections}\n            title={'Projections'}>\n            <div className={'projections'}>\n                {\n                    projections.map(projection => {\n                        const sig = projection[0];\n                        const atom = projection[1];\n                        const atoms = props.atoms.get(sig) || [];\n                        return <React.Fragment key={sig}>\n                            <Text ellipsize={true}>{ sig }</Text>\n                            <HTMLSelect\n                                minimal={true}\n                                onChange={event => {\n                                    props.setProjection({\n                                        sig: sig,\n                                        atom: event.target.value\n                                    })\n                                }}\n                                options={atoms}\n                                value={atom}/>\n                            <div className={'buttons'}>\n                                <Button\n                                    icon={'chevron-left'}\n                                    minimal={true}\n                                    onClick={() => props.previousAtom(sig)}/>\n                                <Button\n                                    icon={'cross'}\n                                    minimal={true}\n                                    onClick={() => props.removeProjection(sig)}/>\n                                <Button\n                                    icon={'chevron-right'}\n                                    minimal={true}\n                                    onClick={() => props.nextAtom(sig)}/>\n                            </div>\n                        </React.Fragment>\n                    })\n                }\n            </div>\n            {\n                props.unprojected.size > 0 && (\n                    <Popover\n                        className={'centered'}\n                        hasBackdrop={true}\n                        modifiers={POPPER_MODIFIERS}\n                        position={Position.BOTTOM}\n                        usePortal={true}\n                        wrapperTagName={'div'}>\n                        <Button\n                            icon={'add'}\n                            minimal={true}\n                            text={'Add Projection'}/>\n                        <ControlGroup vertical={true}>\n                            {\n                                props.unprojected.map(sig => (\n                                    <Button\n                                        key={sig}\n                                        minimal={true}\n                                        onClick={() => props.addProjection(sig)}\n                                        text={sig}/>\n                                ))\n                            }\n                        </ControlGroup>\n                    </Popover>\n                )\n            }\n        </SterlingDrawer.Section>\n    );\n\n};\n\nexport default connector(Projections);\n","import {\n    Button,\n    FormGroup,\n    NumericInput,\n    Popover,\n    Position\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {\n    background,\n    POPPER_MODIFIERS,\n    DEFAULT_COLORS,\n    foreground\n} from '../util';\n\ninterface ILabelStyle {\n    color?: string\n    size?: number\n    onChangeColor: (color: string | null) => void\n    onChangeSize: (size: string) => void\n}\n\nconst LabelStyler: React.FunctionComponent<ILabelStyle> = props => {\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Label Size (px)'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    min={0}\n                    minorStepSize={null}\n                    onValueChange={(_, strVal) => props.onChangeSize(strVal)}\n                    placeholder={'Inheret'}\n                    value={props.size}/>\n            </FormGroup>\n            <FormGroup inline={true} label={'Label Color'}>\n                {\n                    props.color &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeColor(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(props.color),\n                            color: foreground(props.color)\n                        }}\n                        text={props.color || 'Inheret'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(props.color)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeColor(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n        </>\n    );\n\n};\n\nexport default LabelStyler;\n","import { IconName, ITreeNode, MaybeElement } from '@blueprintjs/core';\nimport { Map } from 'immutable';\n\nexport type Tree = {\n    id: string\n    icon?: IconName | MaybeElement\n    label?: string | JSX.Element\n    children: Tree[]\n}\n\nfunction mapTreeToNodes (tree: Tree | null, collapsed: Map<string, boolean>, selected: string | null): ITreeNode {\n\n    if (tree === null) return {\n        id: 'error',\n        label: 'No Instance',\n        icon: 'error'\n    };\n\n    const populate = (t: Tree): ITreeNode => {\n        const childNodes = t.children.map(populate);\n        return {\n            id: t.id,\n            label: t.label ? t.label : t.id,\n            icon: t.icon,\n            isExpanded: !collapsed.get(t.id),\n            isSelected: t.id === selected,\n            hasCaret: !!childNodes.length,\n            childNodes\n        }\n    };\n\n    return populate(tree);\n\n}\n\nexport {\n    mapTreeToNodes\n}\n","import { Button, FormGroup, NumericInput, Popover } from '@blueprintjs/core';\nimport { Position } from '@blueprintjs/core/lib/esm/common/position';\nimport React from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {\n    background,\n    DEFAULT_COLORS,\n    foreground,\n    POPPER_MODIFIERS\n} from '../../../util';\n\ninterface ILinkStyle {\n    stroke?: string\n    strokeWidth?: number\n    onChangeStroke: (color: string | null) => void\n    onChangeStrokeWidth: (width: string) => void\n}\n\nconst LinkStyler: React.FunctionComponent<ILinkStyle> = props => {\n\n    const stroke = props.stroke;\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Stroke'}>\n                {\n                    props.stroke &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeStroke(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(stroke),\n                            color: foreground(stroke)\n                        }}\n                        text={stroke || 'Inheret'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(stroke)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeStroke(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n            <FormGroup inline={true} label={'Stroke Width'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    min={0}\n                    onValueChange={(_, strVal) => props.onChangeStrokeWidth(strVal)}\n                    placeholder={'Inheret'}\n                    value={props.strokeWidth}/>\n            </FormGroup>\n        </>\n    );\n\n};\n\nexport default LinkStyler;\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    Divider, FormGroup,\n    NonIdealState, Switch,\n    Tooltip,\n    Tree\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport LabelStyler from '../../drawer-components/LabelStyler';\nimport { mapTreeToNodes } from '../../graphTypes';\nimport LinkStyler from './components/LinkStyler';\nimport {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setLabelColor,\n    setLabelSize,\n    setStroke,\n    setStrokeWidth,\n    toggleCollapseEdgeStyle,\n    toggleHideEmptyFields\n} from './edgeStylingSlice';\nimport { toggleAsAttribute } from '../data/dataSlice';\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.edgeStylingSlice,\n    asAttribute: state.graphSlice.dataSlice.asAttribute\n});\n\nconst mapDispatch = {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setLabelColor,\n    setLabelSize,\n    setStroke,\n    setStrokeWidth,\n    toggleAsAttribute,\n    toggleCollapseEdgeStyle,\n    toggleHideEmptyFields\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype EdgeStylingProps = ConnectedProps<typeof connector>;\n\nconst EdgeStyling: React.FunctionComponent<EdgeStylingProps> = props => {\n\n    const selected = props.selected;\n\n    // Link properties\n    const link = selected ? props.linkStyles.get(selected) || {} : {};\n    const attr = selected ? props.asAttribute.get(selected) : false;\n    const stroke = link ? link.stroke : undefined;\n    const strokeWidth = link ? link.strokeWidth : undefined;\n\n    // Label properties\n    const label = selected ? props.labelStyles.get(selected) || {} : {};\n    const labelColor = label ? label.color : undefined;\n    const font = label ? label.font : undefined;\n    const match = font ? font.match(/(\\d*)px/) : [];\n    const labelSize = match\n        ? match.length > 1\n            ? parseInt(match[1])\n            : undefined\n        : undefined;\n\n    // Tree properties\n    const fieldTree = mapTreeToNodes(props.treeField, props.collapsed, selected);\n    const skolemTree = mapTreeToNodes(props.treeSkolem, props.collapsed, selected);\n    const isempty = fieldTree.id === 'error' && skolemTree.id === 'error';\n    const hasskolem = skolemTree.childNodes && skolemTree.childNodes.length;\n    const trees = (isempty || !hasskolem) ? [fieldTree] : [fieldTree, skolemTree];\n    const hideFld = props.hideEmptyFields;\n    fieldTree.secondaryLabel = (\n        <Tooltip\n            content={hideFld ? 'Show Empty Fields' : 'Hide Empty Fields'}>\n            <Button\n                icon={hideFld ? 'eye-off' : 'eye-open'}\n                minimal={true}\n                onClick={props.toggleHideEmptyFields}/>\n        </Tooltip>\n    );\n\n\n    return (\n        <>\n            <SterlingDrawer.Section\n                collapsed={props.collapseEdgeStyle}\n                onToggle={props.toggleCollapseEdgeStyle}\n                title={'Edge Styling'}>\n                <Tree\n                    contents={trees}\n                    onNodeClick={node => props.selectTreeNode(node.id.toString())}\n                    onNodeCollapse={node => props.collapseTreeNode(node.id.toString())}\n                    onNodeExpand={node => props.expandTreeNode(node.id.toString())}/>\n                <Divider/>\n                {\n                    selected\n                        ? (\n                            <>\n                                <FormGroup>\n                                    <Switch\n                                        alignIndicator={Alignment.RIGHT}\n                                        checked={attr}\n                                        label={'Show as Attribute'}\n                                        onChange={() => props.toggleAsAttribute(selected)}/>\n                                </FormGroup>\n                                <LinkStyler\n                                    stroke={stroke}\n                                    strokeWidth={strokeWidth}\n                                    onChangeStroke={props.setStroke}\n                                    onChangeStrokeWidth={props.setStrokeWidth}/>\n                                <LabelStyler\n                                    color={labelColor}\n                                    size={labelSize}\n                                    onChangeColor={props.setLabelColor}\n                                    onChangeSize={props.setLabelSize}/>\n                                <ButtonGroup\n                                    fill={true}\n                                    minimal={true}>\n                                    <Button\n                                        icon={'clean'}\n                                        onClick={props.clearCurrent}\n                                        text={'Clear Selected'}/>\n                                    <Button\n                                        icon={'clean'}\n                                        onClick={props.clearAll}\n                                        text={'Clear All'}/>\n                                </ButtonGroup>\n                            </>\n                        )\n                        : (\n                            <NonIdealState\n                                title={'Edge Styling'}\n                                description={'Select a field or skolem from the tree'}\n                                icon={'style'}/>\n\n                        )\n                }\n            </SterlingDrawer.Section>\n        </>\n    )\n};\n\nexport default connector(EdgeStyling);\n","import { Alignment, Switch } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport {\n    toggleAxesVisible,\n    toggleCollapseGraphSettings,\n    toggleGridVisible\n} from './graphSettingsSlice';\n\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.graphSettingsSlice\n});\n\nconst mapDispatch = {\n    toggleAxesVisible,\n    toggleCollapseGraphSettings,\n    toggleGridVisible\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype GraphSettingsProps = ConnectedProps<typeof connector>;\n\nconst GraphSettings: React.FunctionComponent<GraphSettingsProps> = props => (\n    <SterlingDrawer.Section\n        collapsed={props.collapseGraphSettings}\n        onToggle={props.toggleCollapseGraphSettings}\n        title={'Graph Settings'}>\n        <Switch\n            alignIndicator={Alignment.RIGHT}\n            checked={props.axesVisible}\n            label={'Display Axes'}\n            onChange={props.toggleAxesVisible}/>\n        <Switch\n            alignIndicator={Alignment.RIGHT}\n            checked={props.gridVisible}\n            label={'Display Grid'}\n            onChange={props.toggleGridVisible}/>\n    </SterlingDrawer.Section>\n);\n\nexport default connector(GraphSettings);\n","import {\n    CircleLayout,\n    DagreLayout,\n    GridLayout,\n    RowLayout\n} from '@atdyer/graph-js';\nimport { Button, ButtonGroup, Tooltip } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\n\n// Map redux state to layout settings props\nconst mapState = (state: RootState) => ({\n    graph: state.graphSlice.graphSlice.graph,\n    instance: state.sterlingSlice.instance\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype LayoutProps = ConnectedProps<typeof connector>;\n\n// The layout and projections component\nconst QuickLayout: React.FunctionComponent<LayoutProps> = props => {\n    return (\n        <SterlingDrawer.Section title={'Quick Layout'}>\n            <ButtonGroup minimal={true}>\n                <Tooltip content={'Circle Layout'}>\n                    <Button icon={'layout-circle'} onClick={() => {\n                        if (props.graph) {\n                            const circle = new CircleLayout();\n                            circle.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n                <Tooltip content={'Grid Layout'}>\n                    <Button icon={'layout-grid'} onClick={() => {\n                        if (props.graph) {\n                            const grid = new GridLayout();\n                            grid.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n                <Tooltip content={'Grouped Row Layout'}>\n                    <Button icon={'layout-linear'} onClick={() => {\n                        if (props.graph && props.instance) {\n                            const row = new RowLayout();\n                            const univ = props.instance.signatures().find(sig => sig.id() === 'univ');\n                            if (univ) {\n                                row.groups(univ.subTypes().map(sig => sig.atoms(true).map(atom => atom.name())))\n                            }\n                            row.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n                <Tooltip content={'Layered Layout'}>\n                    <Button icon={'layout-hierarchy'} onClick={() => {\n                        if (props.graph) {\n                            const dagre = new DagreLayout();\n                            dagre.apply(props.graph);\n                            props.graph.update();\n                        }\n                    }}/>\n                </Tooltip>\n            </ButtonGroup>\n        </SterlingDrawer.Section>\n    );\n};\n\nexport default connector(QuickLayout);\n","import { CircleStyle, RectangleStyle, ShapeStyle } from '@atdyer/graph-js';\nimport { FormGroup, HTMLSelect, NumericInput } from '@blueprintjs/core';\nimport React from 'react';\n\ninterface IShapeSelector {\n    shape: ShapeStyle\n    onSetHeight: (height: string) => void\n    onSetRadius: (radius: string) => void\n    onSetShape: (shape: 'circle' | 'rectangle' | null) => void\n    onSetWidth: (width: string) => void\n}\n\nconst ShapeSelector: React.FunctionComponent<IShapeSelector> = props => {\n\n    const shape = props.shape;\n    const type = shape ? shape.type || 'inheret' : 'inheret';\n\n    const options = [\n        { value: 'inheret', label: 'Inheret' },\n        { value: 'circle', label: 'Circle' },\n        { value: 'rectangle', label: 'Rectangle' }\n    ];\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Shape'}>\n                <HTMLSelect\n                    minimal={true}\n                    options={options}\n                    value={type}\n                    onChange={event => {\n                        let value = event.target.value;\n                        props.onSetShape(valueToShape(value));\n                    }}\n                />\n            </FormGroup>\n            {\n                type === 'circle' ?\n                    <CircleProps\n                        style={shape as CircleStyle}\n                        onSetRadius={props.onSetRadius}/> :\n                type === 'rectangle' ?\n                    <RectangleProps\n                        style={shape as RectangleStyle}\n                        onSetWidth={props.onSetWidth}\n                        onSetHeight={props.onSetHeight}/> :\n                null\n            }\n        </>\n    )\n};\n\ninterface ICircleProps {\n    style: CircleStyle\n    onSetRadius: (radius: string) => void\n}\nconst CircleProps: React.FunctionComponent<ICircleProps> = props => {\n    const radius = props.style.radius;\n    return (\n        <FormGroup inline={true} label={'Radius'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                fill={false}\n                min={0}\n                onValueChange={(_, strVal) => props.onSetRadius(strVal)}\n                placeholder={'Inheret'}\n                value={radius || undefined}/>\n        </FormGroup>\n    )\n};\n\ninterface IRectangleProps {\n    style: RectangleStyle,\n    onSetHeight: (height: string) => void\n    onSetWidth: (width: string) => void\n}\nconst RectangleProps: React.FunctionComponent<IRectangleProps> = props => {\n    const width = props.style.width;\n    const height = props.style.height;\n    return <>\n        <FormGroup inline={true} label={'Width'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                fill={false}\n                min={0}\n                onValueChange={(_, strVal) => props.onSetWidth(strVal)}\n                placeholder={'Inheret'}\n                value={width || undefined}\n                />\n        </FormGroup>\n        <FormGroup inline={true} label={'Height'}>\n            <NumericInput\n                allowNumericCharactersOnly={true}\n                min={0}\n                onValueChange={(_, strVal) => props.onSetHeight(strVal)}\n                placeholder={'Inheret'}\n                value={height || undefined}\n            />\n        </FormGroup>\n    </>;\n};\n\nfunction valueToShape (value: string): (null | 'circle' | 'rectangle') {\n    if (value === 'circle' || value === 'rectangle') return value;\n    return null;\n}\n\nexport default ShapeSelector;\n","import {\n    Button,\n    FormGroup,\n    NumericInput,\n    Popover,\n    Position\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { TwitterPicker } from 'react-color';\nimport {\n    background,\n    foreground,\n    POPPER_MODIFIERS,\n    DEFAULT_COLORS\n} from '../../../util';\n\ninterface IShapeStyle {\n    fill?: string\n    stroke?: string\n    strokeWidth?: number\n    onChangeFill: (color: string|null) => void\n    onChangeStroke: (color: string|null) => void\n    onChangeStrokeWidth: (width: string) => void\n}\n\nconst ShapeStyler: React.FunctionComponent<IShapeStyle> = props => {\n\n    const fill = props.fill;\n    const stroke = props.stroke;\n\n    return (\n        <>\n            <FormGroup inline={true} label={'Fill'}>\n                {\n                    fill &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeFill(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(fill),\n                            color: foreground(fill)\n                        }}\n                        text={fill || 'Inheret'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(fill)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeFill(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n            <FormGroup inline={true} label={'Stroke'}>\n                {\n                    stroke &&\n                    <Button\n                        icon={'small-cross'}\n                        onClick={() => props.onChangeStroke(null)}\n                        minimal={true}/>\n                }\n                <Popover\n                    hasBackdrop={true}\n                    usePortal={true}\n                    modifiers={POPPER_MODIFIERS}\n                    position={Position.LEFT}>\n                    <Button\n                        style={{\n                            backgroundColor: background(stroke),\n                            color: foreground(stroke)\n                        }}\n                        text={stroke || 'Inheret'}\n                        minimal={true}/>\n                    <TwitterPicker\n                        color={background(stroke)}\n                        colors={DEFAULT_COLORS}\n                        onChange={color => props.onChangeStroke(color.hex)}\n                        triangle={'hide'}/>\n                </Popover>\n            </FormGroup>\n            <FormGroup inline={true} label={'Stroke Width'}>\n                <NumericInput\n                    allowNumericCharactersOnly={true}\n                    fill={false}\n                    min={-1}\n                    onValueChange={(_, strVal) => props.onChangeStrokeWidth(strVal)}\n                    placeholder={'Inheret'}\n                    value={props.strokeWidth}/>\n            </FormGroup>\n        </>\n    );\n};\n\nexport default ShapeStyler;\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    Divider, FormGroup,\n    NonIdealState, Switch,\n    Tooltip,\n    Tree\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../../../rootReducer';\nimport SterlingDrawer from '../../../../sterling/SterlingDrawer';\nimport LabelStyler from '../../drawer-components/LabelStyler';\nimport { mapTreeToNodes } from '../../graphTypes';\nimport ShapeSelector from './components/ShapeSelector';\nimport ShapeStyler from './components/ShapeStyler';\nimport {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setFill,\n    setHeight,\n    setLabelColor,\n    setLabelSize,\n    setRadius,\n    setShape,\n    setStroke,\n    setStrokeWidth,\n    setWidth,\n    toggleCollapseNodeStyle,\n    toggleHideDisconnected,\n    toggleHideEmptySets\n} from './nodeStylingSlice';\n\n// Map redux state to node styling props\nconst mapState = (state: RootState) => ({\n    ...state.graphSlice.nodeStylingSlice\n});\n\n// Actions\nconst mapDispatch = {\n    clearAll,\n    clearCurrent,\n    collapseTreeNode,\n    expandTreeNode,\n    selectTreeNode,\n    setFill,\n    setHeight,\n    setLabelColor,\n    setLabelSize,\n    setRadius,\n    setShape,\n    setStroke,\n    setStrokeWidth,\n    setWidth,\n    toggleCollapseNodeStyle,\n    toggleHideDisconnected,\n    toggleHideEmptySets\n};\n\n// Create connector\nconst connector = connect(mapState, mapDispatch);\n\n// Create props for things from redux\ntype NodeStylingProps = ConnectedProps<typeof connector>;\n\nconst NodeStyling: React.FunctionComponent<NodeStylingProps> = props => {\n\n    const selected = props.selected;\n\n    // Hide disconnected\n    const hideDisconnected = props.selected\n        ? props.hideDisconnected.get(props.selected)\n        : false;\n\n    // Shape properties\n    const shape = selected ? props.shapes.get(selected) || {} : {};\n    const fill = shape ? shape.fill : undefined;\n    const stroke = shape ? shape.stroke : undefined;\n    const strokeWidth = shape ? shape.strokeWidth : undefined;\n\n    // Label properties\n    const label = selected ? props.labels.get(selected) || {} : {};\n    const labelColor = label ? label.color : undefined;\n    const font = label ? label.font : undefined;\n    const match = font ? font.match(/(\\d*)px/) : [];\n    const labelSize = match\n        ? match.length > 1\n            ? parseInt(match[1])\n            : undefined\n        : undefined;\n\n    // Tree properties\n    const tree = mapTreeToNodes(props.nodeTree, props.collapsed, selected);\n    const hide = props.hideEmptySets;\n    tree.secondaryLabel = (\n        <Tooltip\n            content={hide ? 'Show Empty Sets' : 'Hide Empty Sets'}>\n            <Button\n                icon={hide ? 'eye-off' : 'eye-open'}\n                minimal={true}\n                onClick={props.toggleHideEmptySets}/>\n        </Tooltip>\n    );\n\n\n    return (\n        <SterlingDrawer.Section\n            collapsed={props.collapseNodeStyle}\n            onToggle={props.toggleCollapseNodeStyle}\n            title={'Node Styling'}>\n            <Tree\n                contents={[tree]}\n                onNodeClick={node => props.selectTreeNode(node.id.toString())}\n                onNodeCollapse={node => props.collapseTreeNode(node.id.toString())}\n                onNodeExpand={node => props.expandTreeNode(node.id.toString())}\n            />\n            <Divider/>\n            {\n                selected\n                    ? (\n                        <>\n                            <FormGroup\n                                contentClassName={'fill'}\n                                inline={true}>\n                                <Switch\n                                    alignIndicator={Alignment.RIGHT}\n                                    checked={hideDisconnected}\n                                    onChange={props.toggleHideDisconnected}\n                                    label={'Hide Disconnected Nodes'}/>\n                            </FormGroup>\n                            <ShapeSelector\n                                shape={shape}\n                                onSetHeight={props.setHeight}\n                                onSetRadius={props.setRadius}\n                                onSetShape={props.setShape}\n                                onSetWidth={props.setWidth}\n                            />\n                            <ShapeStyler\n                                fill={fill}\n                                stroke={stroke}\n                                strokeWidth={strokeWidth}\n                                onChangeFill={props.setFill}\n                                onChangeStroke={props.setStroke}\n                                onChangeStrokeWidth={props.setStrokeWidth}\n                            />\n                            <LabelStyler\n                                color={labelColor}\n                                size={labelSize}\n                                onChangeColor={props.setLabelColor}\n                                onChangeSize={props.setLabelSize}/>\n                            <ButtonGroup\n                                fill={true}\n                                minimal={true}>\n                                <Button\n                                    icon={'clean'}\n                                    onClick={props.clearCurrent}\n                                    text={'Clear Selected'}/>\n                                <Button\n                                    icon={'clean'}\n                                    onClick={props.clearAll}\n                                    text={'Clear All'}/>\n                            </ButtonGroup>\n                        </>\n                    )\n                    : (\n                        <NonIdealState\n                            title={'Node Styling'}\n                            description={'Select a type or set from the tree'}\n                            icon={'style'}/>\n                    )\n            }\n\n        </SterlingDrawer.Section>\n    );\n};\n\nexport default connector(NodeStyling);\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport QuickEdgeStyling from './drawer-views/edge-styling/QuickEdgeStyling';\nimport EdgeSettings from './drawer-views/graph-settings/EdgeSettings';\nimport Layout from './drawer-views/layout/Layout';\nimport Projections from './drawer-views/projections/Projections';\nimport EdgeStyling from './drawer-views/edge-styling/EdgeStyling';\nimport GraphSettings from './drawer-views/graph-settings/GraphSettings';\nimport QuickLayout from './drawer-views/layout/QuickLayout';\nimport NodeStyling from './drawer-views/node-styling/NodeStyling';\n\n// Map redux state to graph settings props\nconst mapState = (state: RootState) => ({\n    view: state.sterlingSlice.graphView\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype GraphStageProps = ConnectedProps<typeof connector>;\n\n// The graph settings component\nconst GraphDrawer: React.FunctionComponent<GraphStageProps> = props => {\n\n    if (props.view === 'node') return (\n        <>\n            <Projections/>\n            <NodeStyling/>\n        </>\n    );\n    if (props.view === 'edge') return (\n        <>\n            <QuickEdgeStyling/>\n            <EdgeStyling/>\n        </>\n    );\n    if (props.view === 'layout') return (\n        <>\n            <QuickLayout/>\n            <Layout/>\n        </>\n    );\n    if (props.view === 'settings') return (\n        <>\n            <GraphSettings/>\n            <EdgeSettings/>\n        </>\n    );\n\n    return null;\n};\n\nexport default connector(GraphDrawer);\n","import {\n    cloneLabelStyle,\n    cloneShapeStyle, DagreLayout,\n    EdgeStyle, Graph,\n    NodeStyle\n} from '@atdyer/graph-js';\nimport { NonIdealState } from '@blueprintjs/core';\nimport {\n    AlloyField,\n    AlloyInstance,\n    AlloySignature,\n    AlloySkolem\n} from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport { generateGraph } from './graphData';\n\nconst DEFAULT_EDGE_STYLES: EdgeStyle[] = [];\n\nconst DEFAULT_NODE_STYLES: NodeStyle[] = [{\n    nodes: [],\n    shape: { type: 'circle' }\n}];\n\n// Map redux state to graph settings props\nconst mapState = (state: RootState) => ({\n    asAttribute: state.graphSlice.dataSlice.asAttribute,\n    bundleFactor: state.graphSlice.graphSettingsSlice.bundleFactor,\n    description: state.sterlingSlice.welcomeDescription,\n    edgeLabelPlacement: state.graphSlice.graphSettingsSlice.edgeLabelPlacement,\n    edgeLabels: state.graphSlice.edgeStylingSlice.labelStyles,\n    graph: state.graphSlice.graphSlice.graph,\n    hideDisconnected: state.graphSlice.nodeStylingSlice.hideDisconnected,\n    instance: state.sterlingSlice.instance,\n    links: state.graphSlice.edgeStylingSlice.linkStyles,\n    nodeLabels: state.graphSlice.nodeStylingSlice.labels,\n    projections: state.graphSlice.dataSlice.projections,\n    shapes: state.graphSlice.nodeStylingSlice.shapes,\n    settings: state.graphSlice.graphSettingsSlice,\n    title: state.sterlingSlice.welcomeTitle\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype GraphStageProps = ConnectedProps<typeof connector>;\n\n// The graph stage component\nclass GraphStage extends React.Component<GraphStageProps> {\n\n    private _ref: React.RefObject<HTMLCanvasElement>;\n\n    constructor (props: GraphStageProps) {\n\n        super(props);\n\n        this._ref = React.createRef<HTMLCanvasElement>();\n\n    }\n\n    componentDidMount (): void {\n\n        const canvas = this._ref.current;\n        const props = this.props;\n        const graph = props.graph;\n        const instance = props.instance;\n\n        if (instance) this._update(graph, instance);\n        if (canvas) this.props.graph.canvas(canvas);\n\n        graph.update();\n\n    }\n\n    componentDidUpdate (prevProps: GraphStageProps): void {\n\n        const props = this.props;\n        const graph = props.graph;\n        const instance = props.instance;\n\n        if (instance) this._update(graph, instance);\n\n        if (!prevProps.instance || (instance && !anyInCommon(prevProps.instance, instance))) {\n            const dagre = new DagreLayout();\n            dagre.apply(graph, {\n                nodesep: 100,\n                rankdir: 'BT',\n                ranksep: 150\n            });\n        }\n\n        graph.update();\n\n    }\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        return this.props.instance\n            ? <canvas className={'graph'} ref={this._ref}/>\n            : <NonIdealState\n                title={props.title}\n                description={props.description}\n                icon={'graph'}/>;\n\n    }\n\n    private _buildEdgeStyles (): EdgeStyle[] {\n\n        const instance = this.props.instance;\n        const links = this.props.links;\n        const labels = this.props.edgeLabels;\n\n        if (!instance) return DEFAULT_EDGE_STYLES;\n\n        const fields = instance.fields();\n        const skolems = instance.skolems().filter(s => s.arity() > 1);\n\n        const toStyle = (item: AlloyField | AlloySkolem): EdgeStyle => {\n            const id = item.id();\n            return {\n                groups: [id],\n                link: links.get(id),\n                label: labels.get(id)\n            }\n        };\n\n        const fieldStyle: EdgeStyle = {\n            groups: [],\n            link: links.get('Fields'),\n            label: labels.get('Fields'),\n            children: fields.map(toStyle)\n        };\n\n        const skolemStyle: EdgeStyle = {\n            groups: [],\n            link: links.get('Skolems'),\n            label: labels.get('Skolems'),\n            children: skolems.map(toStyle)\n        };\n\n        return [fieldStyle, skolemStyle];\n\n    }\n\n    private _buildNodeStyles (): NodeStyle[] {\n\n        const instance = this.props.instance;\n        const shapes = this.props.shapes;\n        const labels = this.props.nodeLabels;\n\n        if (!instance) return DEFAULT_NODE_STYLES;\n\n        const univ = instance.signatures().find(sig => sig.id() === 'univ');\n\n        if (!univ) return DEFAULT_NODE_STYLES;\n\n        const populate = (sig: AlloySignature): NodeStyle => {\n\n            const children = sig.subTypes().map(populate);\n            const shape = shapes.get(sig.id());\n            const label = labels.get(sig.id());\n\n            return {\n                nodes: sig.atoms().map(atom => atom.name()),\n                shape: shape ? cloneShapeStyle(shape) : undefined,\n                label: label ? cloneLabelStyle(label) : undefined,\n                children\n            }\n\n        };\n\n        const styletree = populate(univ);\n        if (!styletree.shape) styletree.shape = {};\n        if (!styletree.shape.type) styletree.shape.type = 'rectangle';\n\n        return [styletree];\n\n    }\n\n    private _update (graph: Graph, instance: AlloyInstance): void {\n\n        const props = this.props;\n        const settings = props.settings;\n\n        if (instance) {\n\n            const [nodes, edges] = generateGraph(\n                instance,\n                graph.nodes(),\n                props.projections,\n                props.asAttribute,\n                props.hideDisconnected\n            );\n\n            // Set the nodes and edges\n            graph.nodes(nodes);\n            graph.edges(edges);\n            graph.bundleFactor(props.bundleFactor);\n            graph.edgeLabelPlacement(props.edgeLabelPlacement);\n\n            // Create the styles\n            graph.nodeStyles(this._buildNodeStyles());\n            graph.edgeStyles(this._buildEdgeStyles());\n\n        } else {\n\n            graph.nodes([]);\n            graph.edges([]);\n\n        }\n\n        graph.axesVisible(settings.axesVisible);\n        graph.gridVisible(settings.gridVisible);\n\n        const canvas = this._ref.current;\n        if (canvas) this.props.graph.canvas(canvas);\n\n    }\n\n}\n\nfunction anyInCommon (a: AlloyInstance, b: AlloyInstance): boolean {\n    const atoms = new Set();\n    a.atoms().forEach(atom => {\n        if (!atom.type().isBuiltin()) atoms.add(atom.id());\n    });\n    const batoms = b.atoms();\n    for (let i=0; i<batoms.length; ++i) {\n        const atom = batoms[i];\n        if (!atom.type().isBuiltin() && atoms.has(atom.id())) return true;\n    }\n    return false;\n}\n\nexport default connector(GraphStage);\n","import { Edge, Node } from '@atdyer/graph-js';\nimport {\n    AlloyAtom,\n    AlloyField,\n    AlloyInstance,\n    AlloySignature,\n    AlloySkolem,\n    AlloyTuple\n} from 'alloy-ts';\nimport { Map, Set } from 'immutable';\nimport { isDefined } from 'ts-is-present';\n\nfunction generateGraph (\n    instance: AlloyInstance,\n    existingNodes: Node[],\n    projections: Map<string, string>,\n    attributes: Map<string, boolean>,\n    hideDisconnected: Map<string, boolean>\n): [Node[], Edge[]] {\n\n    /**\n     * Need instance, existing nodes, projections, fields that are rendered as attributes, and\n     * whether or not to render disconnected nodes for each signature.\n     * With these five things we can build the set of nodes (updating any existing ones):\n     * {\n     *     id: atom name\n     *     x: 0\n     *     y: 0\n     *     labels: [\n     *         ...skolems,\n     *         ...fields as attributes\n     *     ]\n     * }\n     *\n     * and the set of edges:\n     * {\n     *     source: source node (after projections)\n     *     target: target node (after projections)\n     *     group: field or skolem name\n     *     label: field or skolem name [any atom names that fall betweet source and target]\n     * }\n     */\n\n    // Create a map of Signature objects to their projected Atom objects and a\n    // set of all projected atoms\n    const _projections: Map<AlloySignature, AlloyAtom|undefined> = Map(instance.signatures().map(sig => {\n        const id = sig.id();\n        return projections.has(id)\n            ? [sig, getAtom(projections.get(id)!)]\n            : [sig, undefined];\n    }));\n\n    // Project every tuple of every field, remove empty tuples and empty fields\n    const fields = Map<AlloyField, AlloyTuple[]>(instance.fields().map(field => {\n        return [\n            field,\n            field.tuples().map(project).filter(isDefined).filter(hasAtoms)\n        ];\n    })).filter(tuples => tuples.length > 0);\n\n    // Project every tuple of every skolem, remove empty tuples and empty skolems\n    const skolems = Map<AlloySkolem, AlloyTuple[]>(instance.skolems().map(skolem => {\n        return [\n            skolem,\n            skolem.tuples().map(project).filter(isDefined).filter(hasAtoms)\n        ];\n    })).filter(tuples => tuples.length > 0);\n\n    // Check for anything wonky happening during projection. Within a single\n    // field or skolem, the arity of every tuple should be identical and positive\n    // const fieldsOK = fields.every(tuplesSameArity);\n    // const skolemsOK = skolems.every(tuplesSameArity);\n    // if (!fieldsOK || !skolemsOK) {\n    //     console.error('OH GOD NO!!!!');\n    // } else {\n    //     console.log('HOORAY!');\n    // }\n\n    // Separate fields into those that will be edges and those that will be labels.\n    // Fields that will be labels must have an arity greater than 1 (otherwise the label would be empty)\n    const edgeFields = fields.filter((tuples, field) => !isAttribute(field) && tuples[0].arity() > 1);\n    const labelFields = fields.filter((tuples, field) => isAttribute(field) || tuples[0].arity() === 1);\n\n    // Separate skolems into those that will be edges and those that will be labels\n    const edgeSkolems = skolems.filter(tuples => tuples[0].arity() > 1);\n    const labelSkolems = skolems.filter(tuples => tuples[0].arity() === 1);\n\n    // Create an empty list for edges\n    const edges: Edge[] = [];\n\n    // Create all edges, building a set of connected atoms\n    const connected = Set<AlloyAtom>().withMutations(connected => {\n        edgeFields.forEach((tuples, field) => {\n            tuples.forEach(tuple => buildEdge(field, tuple));\n        });\n        edgeSkolems.forEach((tuples, skolem) => {\n            tuples.forEach(tuple => buildEdge(skolem, tuple));\n        });\n        function buildEdge (item: AlloyField | AlloySkolem, tuple: AlloyTuple) {\n            const atoms = tuple.atoms();\n            const source = atoms[0];\n            const target = atoms[atoms.length - 1];\n            const middle = atoms.slice(1, atoms.length - 1);\n            const label = item.name() + (middle.length ? ` [${middle.join(', ')}]` : '');\n            connected.add(source);\n            connected.add(target);\n            edges.push({\n                source: source.name(),\n                target: target.name(),\n                group: item.id(),\n                label: label\n            });\n        }\n    });\n\n    // Create the labels for each atom\n    const labelMap = Map<AlloyAtom, string[]>()\n        .withMutations(map => {\n\n            labelFields.forEach(addLabel);\n            labelSkolems.forEach(addLabel);\n\n            function addLabel (tuples: AlloyTuple[], item: AlloyField|AlloySkolem) {\n\n                // Create a map of atoms to labels for this particular field/skolem\n                const labels = Map<AlloyAtom, string[]>()\n                    .withMutations(labels => {\n                        tuples.forEach(tuple => {\n                            const atoms = tuple.atoms();\n                            const target = atoms[0];\n                            const label = atoms.slice(1).map(atom => atom.name()).join('->');\n                            if (!labels.has(target)) labels.set(target, []);\n                            if (label.length) labels.get(target)!.push(label);\n                        });\n                    });\n\n                // Combine all labels for this particular field/skolem and add\n                // them to the appropriate atom\n                labels.forEach((labels, atom) => {\n                    const paren = item.expressionType() === 'field' && !isAttribute(item);\n                    const joined = labels.length ? `: ${labels.join(', ')}` : '';\n                    const label = `${item.name()}${joined}`;\n                    if (!map.has(atom)) map.set(atom, []);\n                    map.get(atom)!.push(paren ? `(${label})` : label);\n                });\n\n            }\n\n        });\n\n    // Debug print\n    // labelMap.forEach((labels, atom) => console.log(atom.name(), labels));\n\n    // Create nodes\n    const nodes: Node[] = instance.atoms().map(atom => {\n\n        // First determine if the atom should be visible. It's visible if it's\n        // connected or if its type is not explicitly hidden.\n        const type = atom.type();\n        const visible = connected.has(atom) || !hideDisconnected.get(type.id());\n\n        if (visible) {\n\n            // If it's visible, look for an existing node, otherwise create a new one\n            const node = existingNodes.find(node => node.id === atom.name()) || {\n                id: atom.name(),\n                x: 0,\n                y: 0\n            };\n\n            // Get any labels associated with this atom\n            node.labels = labelMap.get(atom);\n\n            return node;\n\n        }\n\n        return undefined;\n\n    }).filter(isDefined);\n\n    return [nodes, edges];\n\n    /**\n     * Find an atom in the instance provided to the generateGraph function\n     * @param atom\n     */\n    function getAtom (atom: string): AlloyAtom | undefined {\n        return instance.atoms().find(a => a.name() === atom);\n    }\n\n    /**\n     * Returns true if a tuple has atoms\n     * @param tuple\n     */\n    function hasAtoms (tuple: AlloyTuple): boolean {\n        return tuple.arity() > 0;\n    }\n\n    /**\n     * Returns true if the item is to be displayed as an attribute\n     * @param item\n     */\n    function isAttribute (item: AlloyField | AlloySkolem): boolean {\n        return !!attributes.get(item.id());\n    }\n\n    /**\n     * Project a tuple using the projections provided to the generateGraph function.\n     * A tuple that has no types with projections will remain unchanged. A tuple\n     * that has projected types but any atoms of those types are not the projected\n     * atom will be removed completely (ie. return undefined). A tuple that has\n     * projected types will have a projection if all of the atoms are of their\n     * respective projected types.\n     * @param tuple\n     */\n    function project (tuple: AlloyTuple): AlloyTuple | undefined {\n\n        const projectedAtoms = tuple\n            .types()\n            .map(projectable)\n            .map(sig => _projections.get(sig));\n\n        if (projectedAtoms.some(isDefined)) {\n\n            const atoms = tuple.atoms();\n            const keep = atoms.every((atom, index) => projectedAtoms[index] === undefined || projectedAtoms[index] === atom);\n\n            if (keep) {\n\n                return new AlloyTuple(tuple.id(), atoms.filter((atom, index) => {\n                    return projectedAtoms[index] === undefined;\n                }));\n\n            }\n\n        } else {\n\n            return tuple;\n\n        }\n\n    }\n\n    /**\n     * Only top level signatures (those that are direct descendants of univ)\n     * can be projected. This function return the top level type of any signature\n     * in the instance.\n     * @param signature\n     */\n    function projectable (signature: AlloySignature): AlloySignature {\n        return signature.typeHierarchy()[1];\n    }\n\n    /**\n     * Returns true if there are tuples in the list and they are all the same arity\n     * @param tuples\n     */\n    // function tuplesSameArity (tuples: AlloyTuple[]): boolean {\n    //     if (!tuples.length) return false;\n    //     const arity = tuples[0].arity();\n    //     return tuples.every(tuple => tuple.arity() === arity);\n    // }\n\n}\n\nexport {\n    generateGraph\n}\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    NonIdealState\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport SterlingDrawer from '../../sterling/SterlingDrawer';\nimport { setSelected } from './sourceSlice';\n\nconst mapState = (state: RootState) => ({\n    instance: state.sterlingSlice.instance,\n    selected: state.sourceSlice.selected\n});\n\nconst mapDispatch = {\n    setSelected\n};\n\nconst connector = connect(mapState, mapDispatch);\n\ntype SourceDrawerProps = ConnectedProps<typeof connector>;\n\nconst SourcePlaceholder: React.FunctionComponent<SourceDrawerProps> = props => (\n    <NonIdealState\n        title={'No Files'}\n        icon={'document'}/>\n);\n\nconst SourceDrawer: React.FunctionComponent<SourceDrawerProps> = props => {\n\n    const instance = props.instance;\n\n    return <SterlingDrawer.Section title={'Model Sources'}>\n        {\n            instance\n                ? <ButtonGroup\n                    alignText={Alignment.LEFT}\n                    minimal={true}\n                    vertical={true}> {\n                    instance.sources().map(source => (\n                        <Button\n                            active={props.selected === source}\n                            icon={'document'}\n                            key={source.filename()}\n                            onClick={() => props.setSelected(source)}\n                            text={source.filename().split(/(\\\\|\\/)/g).pop()}/>\n                    ))\n                }</ButtonGroup>\n                : <SourcePlaceholder {...props}/>\n        }\n    </SterlingDrawer.Section>\n};\n\nexport default connector(SourceDrawer);\n","import { NonIdealState } from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport { Light as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { githubGist } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { COMMENT } from 'highlight.js';\n\nconst STYLE = githubGist;\n\nSyntaxHighlighter.registerLanguage('alloy', function () {\n\n    let NUMBER_RE = '\\\\b\\\\d+';\n\n    return {\n        // case_insensitive\n        case_insensitive: false,\n\n        // keywords\n        keywords: 'abstract all and as assert but check disj ' +\n            'else exactly extends fact for fun iden iff implies ' +\n            'in Int let lone module no none not one open or pred ' +\n            'run set sig some sum univ',\n\n        // contains\n        contains: [\n\n            // hljs.COMMENT\n            COMMENT('//', '$', {}),\n            COMMENT('--', '$', {}),\n            COMMENT('/\\\\*', '\\\\*/', {}),\n\n            {\n                // className\n                className: 'number',\n                // begin\n                begin: NUMBER_RE,\n                // relevance\n                relevance: 0\n            }\n        ]\n    };\n});\n\nconst mapState = (state: RootState) => ({\n    instance: state.sterlingSlice.instance,\n    selected: state.sourceSlice.selected,\n    welcome: state.sterlingSlice.welcomeTitle,\n    welcomeDescription: state.sterlingSlice.welcomeDescription\n});\n\nconst connector = connect(mapState);\n\ntype SourceStageProps = ConnectedProps<typeof connector>;\n\nconst SourceStage: React.FunctionComponent<SourceStageProps> = props => {\n\n    if (!props.instance) {\n        return (\n            <NonIdealState\n                description={props.welcomeDescription}\n                icon={'document'}\n                title={props.welcome}/>\n        );\n    }\n\n    if (!props.selected) {\n        return (\n            <NonIdealState\n                description={'Choose a File'}\n                icon={'document'}\n                title={props.welcome}/>\n        );\n    }\n\n    return (\n        <SyntaxHighlighter\n            className={'source'}\n            language={'alloy'}\n            showLineNumbers={true}\n            style={STYLE}>\n            { props.selected.source() }\n        </SyntaxHighlighter>\n    );\n\n};\n\n\nexport default connector(SourceStage);\n","import {\n    Button,\n    Icon,\n    ITagProps,\n    Menu,\n    MenuDivider,\n    MenuItem\n} from '@blueprintjs/core';\nimport {\n    IItemListRendererProps,\n    IItemRendererProps,\n    ItemPredicate,\n    MultiSelect\n} from '@blueprintjs/select';\nimport { AlloyField, AlloySignature, AlloySkolem, sorting } from 'alloy-ts';\nimport * as React from 'react';\nimport { AlloyNameFn, SigFieldSkolem } from '../tableTypes';\nimport { FieldTag, SignatureTag } from '../TableTags';\n\nconst AlloySelect = MultiSelect.ofType<SigFieldSkolem>();\n\nexport interface IAlloyMultiSelectProps {\n    items: SigFieldSkolem[],\n    itemsSelected: SigFieldSkolem[],\n    onClearSelectedItems: () => void,\n    onDeselectItem: (item: SigFieldSkolem) => void,\n    onSelectItem: (item: SigFieldSkolem) => void,\n    nameFunction: AlloyNameFn\n}\n\nclass AlloyMultiSelect extends React.Component<IAlloyMultiSelectProps> {\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const sortItems = (items: SigFieldSkolem[]): SigFieldSkolem[] => {\n\n            const sigs = items.filter(item => item.expressionType() === 'signature');\n            const flds = items.filter(item => item.expressionType() === 'field');\n            const skls = items.filter(item => item.expressionType() === 'skolem');\n            const alpha = sorting.alphabeticalSort(this.props.nameFunction);\n            (sigs as AlloySignature[]).sort(alpha).sort(sorting.builtinSort());\n            (flds as AlloyField[]).sort(alpha);\n            (skls as AlloySkolem[]).sort(alpha);\n            return [...sigs, ...flds, ...skls];\n\n        };\n\n        const clearButton = this.props.itemsSelected.length\n            ? <Button\n                icon='cross'\n                minimal={true}\n                onClick={this.props.onClearSelectedItems}/>\n            : undefined;\n\n        return (\n            <AlloySelect\n                fill={true}\n                items={sortItems(props.items)}\n                itemPredicate={this._filterItem}\n                itemRenderer={this._renderItem}\n                itemListRenderer={this._renderList}\n                onItemSelect={this._onSelectItem}\n                popoverProps={{\n                    usePortal: false\n                }}\n                placeholder='Choose Tables...'\n                resetOnSelect={true}\n                scrollToActiveItem={true}\n                selectedItems={this.props.itemsSelected}\n                tagInputProps={{\n                    onRemove: this._onRemoveTag,\n                    rightElement: clearButton,\n                    tagProps: this._tagProps\n                }}\n                tagRenderer={this._renderTag}\n                />\n        )\n\n    }\n\n    /**\n     * Predicate used to determine if a query string exists in the name of a\n     * Signature, Field, or Skolem.\n     * @param query The query string\n     * @param item The Signature, Field, or Skolem\n     * @private\n     * @return Returns true if the query string appears in the name of the item,\n     * false otherwise.\n     */\n    private _filterItem: ItemPredicate<SigFieldSkolem> = (query: string, item: SigFieldSkolem): boolean => {\n\n        const name = item.expressionType() === 'field'\n            ? this.props.nameFunction(item).split('<:')[1]\n            : this.props.nameFunction(item);\n\n        return name.toLowerCase().indexOf(query.toLowerCase()) >= 0;\n\n    };\n\n    /**\n     * Determine if an item is currently selected\n     * @param item The item in question\n     * @private\n     * @return Returns true if the item is currently selected, false otherwise\n     */\n    private _isItemSelected = (item: SigFieldSkolem) => {\n        return this.props.itemsSelected.includes(item);\n    };\n\n    /**\n     * Event handler used when a tag is removed from the current selection\n     * @param tag The tag text\n     * @param index The index of the tag in the selected items list\n     * @private\n     */\n    private _onRemoveTag = (tag: string, index: number): void => {\n        this.props.onDeselectItem(this.props.itemsSelected[index]);\n    };\n\n    /**\n     * Event handler used when an item in the list is selected\n     * @param item The selected item\n     * @private\n     */\n    private _onSelectItem = (item: SigFieldSkolem): void => {\n\n        this._isItemSelected(item)\n            ? this.props.onDeselectItem(item)\n            : this.props.onSelectItem(item);\n\n    };\n\n    /**\n     * Custom renderer for an Alloy item in the dropdown list.\n     * @param item The Alloy item to render\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderItem = (item: SigFieldSkolem, props: IItemRendererProps): React.ReactElement | null => {\n\n        if (!props.modifiers.matchesPredicate) return null;\n        switch (item.expressionType()) {\n            case 'signature':\n                return this._renderSignature(item as AlloySignature, props);\n            case 'field':\n                return this._renderField(item as AlloyField, props);\n            case 'skolem':\n                return this._renderSkolem(item as AlloySkolem, props);\n            default:\n                return null;\n        }\n\n    };\n\n    /**\n     * Custom renderer for the contents of the dropdown list. Splits list into\n     * three categories (Signatures, Fields, Skolems) sorted alphabetically.\n     * @param props Properties describing how to render a list of items\n     * @private\n     */\n    private _renderList = (props: IItemListRendererProps<SigFieldSkolem>): React.ReactElement => {\n\n        const sigs = props.items.filter(item => item.expressionType() === 'signature');\n        const flds = props.items.filter(item => item.expressionType() === 'field');\n        const skls = props.items.filter(item => item.expressionType() === 'skolem');\n        const alpha = sorting.alphabeticalSort(this.props.nameFunction);\n        (sigs as AlloySignature[]).sort(alpha).sort(sorting.builtinSort());\n        (flds as AlloyField[]).sort(alpha);\n        (skls as AlloySkolem[]).sort(alpha);\n        const renderedSigs = sigs.map(props.renderItem).filter(item => item != null);\n        const renderedFlds = flds.map(props.renderItem).filter(item => item != null);\n        const renderedSkls = skls.map(props.renderItem).filter(item => item != null);\n        return (\n            <Menu ulRef={props.itemsParentRef}>\n                <MenuDivider title='Signatures'/>\n                {renderedSigs.length ? renderedSigs : <MenuItem disabled={true} text='None'/>}\n                <MenuDivider title='Fields'/>\n                {renderedFlds.length ? renderedFlds : <MenuItem disabled={true} text='None'/>}\n                <MenuDivider title='Skolems'/>\n                {renderedSkls.length ? renderedSkls : <MenuItem disabled={true} text='None'/>}\n            </Menu>\n        );\n\n    };\n\n    /**\n     * Custom renderer for an Alloy Signature in the dropdown list\n     * @param item The Signature\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderSignature = (item: AlloySignature, props: IItemRendererProps): React.ReactElement => {\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                key={item.id()}\n                labelElement={highlightText(this.props.nameFunction(item), props.query)}\n                icon={selected ? 'tick' : 'blank'}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for an Alloy Field in the dropdown list\n     * @param item The Field\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderField = (item: AlloyField, props: IItemRendererProps) => {\n        const name = this.props.nameFunction(item);\n        const tokens = name.split('<:');\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                key={item.id()}\n                icon={<>\n                    { selected && <Icon icon='tick'/>}\n                    <SignatureTag signature={tokens[0]}/>\n                </>}\n                labelElement={highlightText(tokens[1], props.query)}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for an Alloy Skolem in the dropdown list\n     * @param item The Skolem\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderSkolem = (item: AlloySkolem, props: IItemRendererProps) => {\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                icon={selected ? 'tick' : 'blank'}\n                key={item.id()}\n                labelElement={highlightText(item.name(), props.query)}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for tags in the select. Does not actually generate a Tag,\n     * but instead returns the node that will be used as the label of the tag.\n     * @param item The Alloy item to render\n     * @private\n     */\n    private _renderTag = (item: SigFieldSkolem): React.ReactNode => {\n\n        const name = this.props.nameFunction(item);\n        return item.expressionType() === 'field'\n            ? FieldTag.FieldTagEls(name.split('<:'))\n            : name;\n\n    };\n\n    /**\n     * Custom properties to pass to each Tag based on type of item the tag\n     * represents\n     * @param value The node\n     * @param index The index of the item in the selected items list\n     * @private\n     */\n    private _tagProps = (value: React.ReactNode, index: number): ITagProps => {\n\n        const itemType = this.props.itemsSelected[index].expressionType();\n        const tag = itemType === 'signature'\n            ? 'sig-tag' : itemType === 'field'\n                ? 'field-tag' : itemType === 'skolem'\n                    ? 'skolem-tag' : '';\n        return {\n            className: tag\n        };\n\n    }\n\n}\n\nfunction highlightText (text: string, query: string) {\n    let lastIndex = 0;\n    const words = query\n        .split(/\\s+/)\n        .filter(word => word.length > 0)\n        .map(escapeRegExpChars);\n    if (words.length === 0) {\n        return [text];\n    }\n    const regexp = new RegExp(words.join(\"|\"), \"gi\");\n    const tokens: React.ReactNode[] = [];\n    while (true) {\n        const match = regexp.exec(text);\n        if (!match) {\n            break;\n        }\n        const length = match[0].length;\n        const before = text.slice(lastIndex, regexp.lastIndex - length);\n        if (before.length > 0) {\n            tokens.push(before);\n        }\n        lastIndex = regexp.lastIndex;\n        tokens.push(<strong key={lastIndex}>{match[0]}</strong>);\n    }\n    const rest = text.slice(lastIndex);\n    if (rest.length > 0) {\n        tokens.push(rest);\n    }\n    return tokens;\n}\n\nfunction escapeRegExpChars (text: string) {\n    return text.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, \"\\\\$1\");\n}\n\nexport default AlloyMultiSelect;\n","import {\n    Alignment,\n    Button,\n    ButtonGroup,\n    FormGroup,\n    Radio,\n    RadioGroup,\n    Switch\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport SterlingDrawer from '../../sterling/SterlingDrawer';\nimport AlloyMultiSelect from './drawer-components/AlloyMultiSelect';\nimport {\n    clearSelectedData,\n    deselectData,\n    selectData,\n    setAlignment,\n    setLayoutDirection,\n    setSort,\n    setTableTypes,\n    toggleCollapseData,\n    toggleCollapseLayout,\n    toggleCollapseTables,\n    toggleHighlightSkolems,\n    toggleRemoveBuiltin,\n    toggleRemoveEmpty,\n    toggleRemoveThis\n} from './tableSlice';\nimport {\n    buildNameFunction,\n    HorizontalAlignment,\n    LayoutDirection,\n    SortDirection,\n    SortMethod,\n    TablesType\n} from './tableTypes';\n\n// Map redux state to table settings props\nconst mapState = (state: RootState) => ({\n    ...state.tableSlice\n});\n\n// Actions\nconst mapDispatch = {\n    clearSelectedData,\n    deselectData,\n    selectData,\n    setAlignment,\n    setLayoutDirection,\n    setSort,\n    setTableTypes,\n    toggleCollapseData,\n    toggleCollapseLayout,\n    toggleCollapseTables,\n    toggleHighlightSkolems,\n    toggleRemoveBuiltin,\n    toggleRemoveEmpty,\n    toggleRemoveThis\n};\n\n// Connect the two\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\n// Create props for things from redux\ntype TableDrawerProps = ConnectedProps<typeof connector>;\n\n// The table settings view\nconst TableDrawer: React.FunctionComponent<TableDrawerProps> = props => {\n\n    return (\n        <>\n            <SterlingDrawer.Section\n                collapsed={props.collapseTables}\n                onToggle={props.toggleCollapseTables}\n                style={{ zIndex: 1 }}\n                title={'Tables'}>\n                <RadioGroup\n                    onChange={event => props.setTableTypes(parseInt(event.currentTarget.value))}\n                    selectedValue={props.tablesType}>\n                    <Radio label='All Tables' value={TablesType.All}/>\n                    <Radio label='Signatures' value={TablesType.Signatures}/>\n                    <Radio label='Fields' value={TablesType.Fields}/>\n                    <Radio label='Skolems' disabled={props.highlightSkolems} value={TablesType.Skolems}/>\n                    <Radio label='Choose Tables' value={TablesType.Select}/>\n                    <AlloyMultiSelect\n                        items={props.data}\n                        itemsSelected={props.dataSelected}\n                        onClearSelectedItems={props.clearSelectedData}\n                        onDeselectItem={props.deselectData}\n                        onSelectItem={props.selectData}\n                        nameFunction={buildNameFunction(props.removeThis)}/>\n                </RadioGroup>\n            </SterlingDrawer.Section>\n            <SterlingDrawer.Section\n                collapsed={props.collapseData}\n                onToggle={props.toggleCollapseData}\n                title={'Data Options'}>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.removeBuiltin}\n                    disabled={props.tablesType === TablesType.Select}\n                    label='Hide Built-in Signatures'\n                    onChange={props.toggleRemoveBuiltin}/>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.removeEmpty}\n                    disabled={props.tablesType === TablesType.Select}\n                    label='Hide Empty Tables'\n                    onChange={props.toggleRemoveEmpty}/>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.removeThis}\n                    label='Remove \"this\" from Signature names'\n                    onChange={props.toggleRemoveThis}/>\n                <Switch\n                    alignIndicator={Alignment.LEFT}\n                    checked={props.highlightSkolems}\n                    label='Display Skolems as highlighted rows'\n                    onChange={props.toggleHighlightSkolems}/>\n            </SterlingDrawer.Section>\n            <SterlingDrawer.Section\n                collapsed={props.collapseLayout}\n                onToggle={props.toggleCollapseLayout}\n                title={'Layout Options'}>\n                <FormGroup inline={true} label='Layout Direction'>\n                    <ButtonGroup>\n                        <Button\n                            active={props.layoutDirection === LayoutDirection.Row}\n                            icon='vertical-distribution'\n                            onClick={() => props.setLayoutDirection(LayoutDirection.Row)}/>\n                        <Button\n                            active={props.layoutDirection === LayoutDirection.Column}\n                            icon='horizontal-distribution'\n                            onClick={() => props.setLayoutDirection(LayoutDirection.Column)}/>\n                    </ButtonGroup>\n                </FormGroup>\n                <FormGroup inline={true} label='Align'>\n                    <ButtonGroup>\n                        <Button\n                            active={props.alignment === HorizontalAlignment.Left}\n                            icon='align-left'\n                            onClick={() => props.setAlignment(HorizontalAlignment.Left)}/>\n                        <Button\n                            active={props.alignment === HorizontalAlignment.Center}\n                            icon='align-center'\n                            onClick={() => props.setAlignment(HorizontalAlignment.Center)}/>\n                        <Button\n                            active={props.alignment === HorizontalAlignment.Right}\n                            icon='align-right'\n                            onClick={() => props.setAlignment(HorizontalAlignment.Right)}/>\n                    </ButtonGroup>\n                </FormGroup>\n                <FormGroup inline={true} label='Sort'>\n                    <ButtonGroup>\n                        <Button\n                            icon='group-objects'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Group,\n                                    direction: SortDirection.Ascending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-alphabetical'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Alphabetical,\n                                    direction: SortDirection.Ascending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-alphabetical-desc'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Alphabetical,\n                                    direction: SortDirection.Descending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-numerical'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Size,\n                                    direction: SortDirection.Ascending\n                                });\n                            }}/>\n                        <Button\n                            icon='sort-numerical-desc'\n                            onClick={() => {\n                                props.setSort({\n                                    method: SortMethod.Size,\n                                    direction: SortDirection.Descending\n                                });\n                            }}/>\n                    </ButtonGroup>\n                </FormGroup>\n            </SterlingDrawer.Section>\n        </>\n    )\n\n};\n\nexport default connector(TableDrawer);\n","import { Portal } from '@blueprintjs/core';\nimport React from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\ninterface IPopoverRowProps {\n    content: string | React.ReactElement,\n    colors: string[]\n}\n\ninterface IPopoverRowState {\n    enabled: boolean\n}\n\nexport default class PopoverRow extends React.Component<IPopoverRowProps, IPopoverRowState> {\n\n    public state = {\n        enabled: false\n    };\n\n    render (): React.ReactNode {\n\n        const colors = this.props.colors;\n        const thickness = this.state.enabled ? 4 : 2;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <tr onMouseEnter={this._onMouseEnter}\n                            onMouseLeave={this._onMouseLeave}\n                            ref={ref}\n                            style={{\n                                boxShadow: this._buildShadowStyle(colors, thickness)\n                            }}>\n                            {this.props.children}\n                        </tr>\n                    )}\n                </Reference>\n                <Portal>\n                    <Popper\n                        modifiers={{}}\n                        placement='right'>\n                        {({ ref, style, placement }) => (\n                            this.state.enabled &&\n                            <div\n                                ref={ref}\n                                style={{\n                                    ...style,\n                                    padding: (thickness * (colors.length - 1)) + 'px'\n                                }}\n                                data-placement={placement}>\n                                <div className='table-rowpop'>\n                                    {this.props.content}\n                                </div>\n                            </div>\n                        )}\n                    </Popper>\n                </Portal>\n            </Manager>\n        );\n\n    }\n\n    private _buildShadowStyle = (colors: string[], thickness: number): string => {\n        return colors.map((color: string, i: number) => {\n            return `0 0 0 ${(i+1) * thickness}px ${color}`\n        }).join(',');\n    };\n\n    private _onMouseEnter = () => {\n        this.setState({enabled: true});\n    };\n\n    private _onMouseLeave = () => {\n        this.setState({enabled: false});\n    };\n\n}\n","import { AlloySkolem } from 'alloy-ts';\nimport React from 'react';\n\nexport default function SkolemListPopover (skolems: AlloySkolem[], colors: string[]): React.ReactElement {\n\n    return (\n        <>\n            {\n                skolems.map((skolem: AlloySkolem, i: number) => {\n                    return (\n                        <div key={skolem.id()}\n                             style={{backgroundColor: colors[i]}}>\n                            { skolem.name() }\n                        </div>\n                    )\n                })\n            }\n        </>\n    )\n\n}\n","import { Card, NonIdealState } from '@blueprintjs/core';\nimport { AlloyField, AlloySignature, AlloySkolem, filtering } from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../../rootReducer';\nimport FieldHTMLTable from './stage-components/FieldHTMLTable';\nimport SignatureHTMLTable from './stage-components/SignatureHTMLTable';\nimport SkolemHTMLTable from './stage-components/SkolemHTMLTable';\nimport { FieldTag, SignatureTag, SkolemTag } from './TableTags';\nimport {\n    getAlignClass,\n    AlloyNameFn,\n    buildNameFunction,\n    buildSortFunction,\n    getLayoutClass,\n    SigFieldSkolem,\n    TablesType\n} from './tableTypes';\n\n// Map redux state to table settings props\nconst mapState = (state: RootState) => ({\n    ...state.tableSlice,\n    description: state.sterlingSlice.welcomeDescription,\n    instance: state.sterlingSlice.instance,\n    title: state.sterlingSlice.welcomeTitle\n});\n\n// Create connector\nconst connector = connect(mapState);\n\n// Create props for things from redux\ntype TableStageProps = ConnectedProps<typeof connector>;\n\n// The table stage component\nconst TableStage: React.FunctionComponent<TableStageProps> = props => {\n\n    if (!props.instance) return (\n        <NonIdealState\n            title={props.title}\n            description={props.description}\n            icon={'th'}/>\n    );\n\n    const alignment = getAlignClass(props.alignment);\n    const direction = getLayoutClass(props.layoutDirection);\n    const nameFunction = buildNameFunction(props.removeThis);\n    const primarySort = buildSortFunction(props.primarySort, nameFunction);\n    const secondSort = buildSortFunction(props.secondarySort, nameFunction);\n    const type = props.tablesType;\n\n    let data = type === TablesType.All ? props.data :\n        type === TablesType.Signatures ? props.data.filter(filtering.keepSignatures) :\n        type === TablesType.Fields ? props.data.filter(filtering.keepFields) :\n        type === TablesType.Skolems ? props.data.filter(filtering.keepSkolems) :\n        type === TablesType.Select ? props.dataSelected.slice() : [];\n\n    const pass = () => true;\n    data = type === TablesType.Select\n        ? data\n        : data\n            .filter(props.removeBuiltin ? filtering.removeBuiltins : pass)\n            .filter(props.removeEmpty ? filtering.removeEmptys : pass)\n            .filter(props.highlightSkolems ? filtering.removeSkolems : pass);\n\n    data = data\n        .sort(secondSort)\n        .sort(primarySort);\n\n    return (\n        <div className={`tables ${alignment} ${direction}`}>\n            {\n                data.map(item => (\n                    <Card key={item.id()}\n                          elevation={1}>\n                        { buildTableHeader(item, nameFunction) }\n                        {\n                            item.expressionType() === 'signature' ?\n                                SignatureHTMLTable({\n                                    highlightSkolems: props.highlightSkolems,\n                                    signature: item as AlloySignature,\n                                    skolemColors: props.skolemColors\n                                }) :\n                            item.expressionType() === 'field' ?\n                                FieldHTMLTable({\n                                    field: item as AlloyField,\n                                    highlightSkolems: props.highlightSkolems,\n                                    nameFunction: nameFunction,\n                                    skolemColors: props.skolemColors\n                                }) :\n                            item.expressionType() === 'skolem' ?\n                                SkolemHTMLTable({\n                                    nameFunction: nameFunction,\n                                    skolem: item as AlloySkolem\n                                }) :\n                            null\n                        }\n                    </Card>\n                ))\n            }\n        </div>\n    );\n\n};\n\n\nfunction buildTableHeader (item: SigFieldSkolem, nameFunction: AlloyNameFn): React.ReactNode {\n\n    if (item.expressionType() === 'signature') {\n        return <SignatureTag\n            fill={true}\n            signature={item as AlloySignature}\n            nameFunction={nameFunction}/>;\n    }\n\n    if (item.expressionType() === 'field') {\n        return <FieldTag\n            fill={true}\n            field={item as AlloyField}\n            nameFunction={nameFunction}/>;\n    }\n\n    if (item.expressionType() === 'skolem') {\n        return <SkolemTag\n            fill={true}\n            skolem={item as AlloySkolem}\n            nameFunction={nameFunction}/>;\n    }\n\n    return null;\n\n}\n\n\nexport default connector(TableStage);\n","import { HTMLTable } from '@blueprintjs/core';\nimport { AlloyAtom, AlloySignature, AlloySkolem } from 'alloy-ts';\nimport React from 'react';\nimport PopoverRow from './PopoverRow';\nimport SkolemListPopover from './SkolemListPopover';\n\nexport interface ISignatureHTMLTableProps {\n    highlightSkolems: boolean,\n    signature: AlloySignature,\n    skolemColors: Map<AlloySkolem, string>\n}\n\nexport default function SignatureHTMLTable (props: ISignatureHTMLTableProps) {\n\n    const signature = props.signature;\n    const atoms: AlloyAtom[] = signature.atoms();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <tbody>\n            {\n                atoms.map((atom: AlloyAtom) => {\n\n                    const skolems = atom.skolems();\n\n                    if (props.highlightSkolems && skolems.length) {\n\n                        const colors = skolems.map(s => props.skolemColors.get(s) || '');\n\n                        return (\n                            <PopoverRow\n                                key={atom.id()}\n                                content={SkolemListPopover(skolems, colors)}\n                                colors={colors}>\n                                <td>{ atom.name() }</td>\n                            </PopoverRow>\n                        );\n\n                    } else {\n\n                        return (\n                            <tr key={atom.id()}>\n                                <td>{ atom.name() }</td>\n                            </tr>\n                        );\n\n                    }\n                })\n            }\n            </tbody>\n        </HTMLTable>\n    )\n}\n","import { HTMLTable } from '@blueprintjs/core';\nimport {\n    AlloyAtom,\n    AlloyField,\n    AlloySignature,\n    AlloySkolem,\n    AlloyTuple\n} from 'alloy-ts';\nimport React from 'react';\nimport PopoverRow from './PopoverRow';\nimport SkolemListPopover from './SkolemListPopover';\n\n\nexport interface IFieldHTMLTableProps {\n    field: AlloyField,\n    highlightSkolems: boolean,\n    nameFunction: (item: AlloySignature | AlloyField | AlloySkolem) => string,\n    skolemColors: Map<AlloySkolem, string>\n}\n\nexport default function FieldHTMLTable (props: IFieldHTMLTableProps) {\n\n    const types: AlloySignature[] = props.field.types();\n    const tuples: AlloyTuple[] = props.field.tuples();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <thead>\n            <tr>\n            {\n                types.map((sig: AlloySignature, i: number) => (\n                    <th key={sig.id() + i}>\n                        {props.nameFunction(sig)}\n                    </th>\n                ))\n            }\n            </tr>\n            </thead>\n            <tbody>\n            {\n                tuples.map((tuple: AlloyTuple) => {\n\n                    const skolems = tuple.skolems();\n\n                    if (props.highlightSkolems && skolems.length) {\n\n                        const colors = skolems.map(s => props.skolemColors.get(s) || '');\n\n                        return (\n                            <PopoverRow\n                                key={tuple.id()}\n                                content={SkolemListPopover(skolems, colors)}\n                                colors={colors}>\n                                {\n                                    tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                        <td key={tuple.id() + '[' + i + ']'}>\n                                            {atom.name()}\n                                        </td>\n                                    ))\n                                }\n                            </PopoverRow>\n                        );\n\n                    } else {\n\n                        return (\n                            <tr key={tuple.id()}>\n                                {\n                                    tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                        <td key={tuple.id() + '[' + i + ']'}>\n                                            {atom.name()}\n                                        </td>\n                                    ))\n                                }\n                            </tr>\n                        )\n\n                    }\n\n                })\n            }\n            </tbody>\n        </HTMLTable>\n    )\n\n}\n","import { HTMLTable } from '@blueprintjs/core';\nimport {\n    AlloyAtom,\n    AlloyField,\n    AlloySignature,\n    AlloySkolem,\n    AlloyTuple\n} from 'alloy-ts';\nimport React from 'react';\n\nexport interface ISkolemHTMLTableProps {\n    nameFunction: (item: AlloySignature | AlloyField | AlloySkolem) => string,\n    skolem: AlloySkolem\n}\n\nexport default function SkolemHTMLTable (props: ISkolemHTMLTableProps) {\n\n    const types: AlloySignature[] = props.skolem.types();\n    const tuples: AlloyTuple[] = props.skolem.tuples();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <thead>\n            <tr>\n            {\n                types.map((sig: AlloySignature, i: number) => (\n                    <th key={sig.id() + i}>\n                        {props.nameFunction(sig)}\n                    </th>\n                ))\n            }\n            </tr>\n            </thead>\n            <tbody>\n            {\n                tuples.map((tuple: AlloyTuple) => (\n                    <tr key={tuple.id()}>\n                        {\n                            tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                <td key={tuple.id() + '[' + i + ']'}>\n                                    {atom.name()}\n                                </td>\n                            ))\n                        }\n                    </tr>\n                ))\n            }\n            </tbody>\n        </HTMLTable>\n    );\n\n}\n","import {\n    Button,\n    Classes,\n    Navbar,\n    NavbarDivider,\n    NavbarHeading,\n    Tag\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { SterlingConnection } from './SterlingConnection';\nimport { RootState } from '../rootReducer';\nimport { setMainView } from './sterlingSlice';\n\n// Map redux state to navbar props\nconst mapState = (state: RootState) => ({\n    view: state.sterlingSlice.mainView\n});\n\n// Actions\nconst mapDispatch = {\n    setMainView\n};\n\n// Connect the two\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\n// Create a props type for things from redux\ntype SterlingNavbarReduxProps = ConnectedProps<typeof connector>;\n\n// Create a combined type for all props\nexport type SterlingNavbarProps = SterlingNavbarReduxProps & {\n    connection: SterlingConnection\n}\n\n// Create an interface for the state\ninterface ISterlingNavbarState {\n    command: string\n    connected: boolean\n    ready: boolean\n}\n\nclass SterlingNavbar extends React.Component<SterlingNavbarProps, ISterlingNavbarState> {\n\n    constructor (props: SterlingNavbarProps) {\n\n        super(props);\n\n        this.state = {\n            command: '',\n            connected: false,\n            ready: false\n        }\n\n    }\n\n    componentDidMount (): void {\n\n        const connection = this.props.connection;\n\n        connection\n            .addEventListener('connect', () => {\n                this.setState({ connected: true });\n            })\n            .addEventListener('disconnect', () => {\n                this.setState({ connected: false, ready: false });\n            })\n            .addEventListener('instance', event => {\n                console.log('instance');\n                this.setState({\n                    command: event.instance.command(),\n                    ready: this.state.connected\n                });\n            });\n\n    }\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n        const state = this.state;\n\n        return (\n            <Navbar fixedToTop className={'nav bp3-dark'}>\n                <Navbar.Group>\n                    <NavbarHeading className={'nav-heading'}>\n                        Sterling\n                    </NavbarHeading>\n                    <NavbarDivider/>\n                    <Button\n                        active={props.view === 'graph'}\n                        className={Classes.MINIMAL}\n                        icon={'graph'}\n                        large={true}\n                        text={'Graph'}\n                        onClick={() => props.setMainView('graph')}\n                    />\n                    <Button\n                        active={props.view === 'table'}\n                        className={Classes.MINIMAL}\n                        icon={'th'}\n                        large={true}\n                        text={'Table'}\n                        onClick={() => props.setMainView('table')}\n                    />\n                    <Button\n                        active={props.view === 'source'}\n                        className={Classes.MINIMAL}\n                        icon={'document'}\n                        large={true}\n                        text={'Source'}\n                        onClick={() => props.setMainView('source')}\n                        />\n                    <NavbarDivider/>\n                </Navbar.Group>\n                <Navbar.Group>\n                    {\n                        state.command.length > 0 &&\n                        <>\n                            <Tag minimal={true}>\n                                {state.command}\n                            </Tag>\n                            <NavbarDivider/>\n                        </>\n                    }\n                    <Button disabled={!state.ready}\n                            intent={state.connected ? 'success' : 'danger'}\n                            large={true}\n                            onClick={this._requestNext}\n                            rightIcon={'circle-arrow-right'}\n                            text={'Next'}\n                    />\n                </Navbar.Group>\n            </Navbar>\n        )\n\n    }\n\n    private _requestNext = () => {\n\n        this.props.connection.requestNextInstance();\n\n    }\n\n}\n\nexport default connector(SterlingNavbar);\n","import {\n    Button,\n    IconName,\n    Intent,\n    MaybeElement,\n    Position,\n    Tooltip\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { RootState } from '../rootReducer';\nimport {\n    setGraphView,\n    setMainView,\n    setSourceView,\n    setTableView\n} from './sterlingSlice';\n\n// Map redux state to sidebar props\nconst mapState = (state: RootState) => ({\n    ...state.sterlingSlice,\n});\n\n// Actions\nconst mapDispatch = {\n    setGraphView,\n    setMainView,\n    setSourceView,\n    setTableView\n};\n\n// Connect the two\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\n// Create props\nexport type SterlingSidebarProps = ConnectedProps<typeof connector>;\n\n// Sidebar button component props\ninterface SidebarButtonProps {\n    active: boolean\n    click: () => void\n    icon: IconName | MaybeElement\n    text: string\n}\n\n// A sidebar button\nconst SidebarButton: React.FunctionComponent<SidebarButtonProps> = props => (\n    <Tooltip\n        content={<span>{props.text}</span>}\n        hoverOpenDelay={500}\n        intent={Intent.PRIMARY}\n        position={Position.RIGHT}>\n        <Button\n            icon={props.icon}\n            minimal={true}\n            large={true}\n            active={props.active}\n            onClick={props.click}/>\n    </Tooltip>\n);\n\n// The sidebar view\nconst SterlingSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n\n    const mainview = props.mainView;\n    const evalActive =\n        (mainview === 'graph' && props.graphView === 'evaluator') ||\n        (mainview === 'table' && props.tableView === 'evaluator') ||\n        (mainview === 'source' && props.sourceView === 'evaluator');\n\n    return (\n        <div className={'sidebar nav bp3-dark'}>\n            {\n                mainview === 'graph' ? <GraphSidebar {...props}/> :\n                mainview === 'table' ? <TableSidebar {...props}/> :\n                mainview === 'source' ? <SourceSidebar {...props}/> :\n                null\n            }\n            <div className={'divider'}/>\n            <SidebarButton\n                active={evalActive}\n                click={() => {\n                    if (mainview === 'graph') props.setGraphView('evaluator');\n                    if (mainview === 'table') props.setTableView('evaluator');\n                    if (mainview === 'source') props.setSourceView('evaluator');\n                }}\n                icon={'console'}\n                text={'Evaluator'}/>\n        </div>\n    );\n\n};\n\n// The graph sidebar section\nconst GraphSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n\n    const view = props.graphView;\n\n    return (\n        <>\n            <SidebarButton\n                active={view === 'node'}\n                click={() => props.setGraphView('node')}\n                icon={'group-objects'}\n                text={'Projections and Node Styling'}/>\n            <SidebarButton\n                active={view === 'edge'}\n                click={() => props.setGraphView('edge')}\n                icon={'flows'}\n                text={'Edge Styling'}/>\n            <SidebarButton\n                active={view === 'layout'}\n                click={() => props.setGraphView('layout')}\n                icon={'layout-auto'}\n                text={'Layout'}/>\n            <SidebarButton\n                active={view === 'settings'}\n                click={() => props.setGraphView('settings')}\n                icon={'settings'}\n                text={'Graph Settings'}/>\n        </>\n    );\n\n};\n\nconst TableSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n    return (\n        <SidebarButton\n            active={props.tableView === 'settings'}\n            click={() => props.setTableView('settings')}\n            icon={'settings'}\n            text={'Table Settings'}/>\n    );\n};\n\nconst SourceSidebar: React.FunctionComponent<SterlingSidebarProps> = props => {\n    return (\n        <SidebarButton\n            active={props.sourceView === 'files'}\n            click={() => props.setSourceView('files')}\n            icon={'document'}\n            text={'Model Sources'}/>\n    )\n};\n\nexport default connector(SterlingSidebar);\n","import React from 'react';\n\nclass SterlingStage extends React.Component {\n\n    render (): React.ReactNode {\n\n        return (\n            <div className={'stage'}>\n                { this.props.children }\n            </div>\n        );\n\n    }\n\n}\n\nexport default SterlingStage;\n","import { FocusStyleManager, ResizeSensor } from '@blueprintjs/core';\nimport { AlloyInstance } from 'alloy-ts';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport SplitPane from 'react-split-pane';\nimport { Evaluator } from '../evaluator/Evaluator';\nimport EvaluatorView, { IEvaluatorProps } from '../evaluator/EvaluatorView';\nimport GraphDrawer from '../features/graph/GraphDrawer';\nimport GraphStage from '../features/graph/GraphStage';\nimport SourceDrawer from '../features/source/SourceDrawer';\nimport SourceStage from '../features/source/SourceStage';\nimport TableDrawer from '../features/table/TableDrawer';\nimport TableStage from '../features/table/TableStage';\nimport { RootState } from '../rootReducer';\nimport { SterlingConnection } from './SterlingConnection';\nimport SterlingDrawer from './SterlingDrawer';\nimport SterlingNavbar from './SterlingNavbar';\nimport SterlingSidebar from './SterlingSidebar';\nimport { setInstance } from './sterlingSlice';\nimport SterlingStage from './SterlingStage';\n\n\nFocusStyleManager.onlyShowFocusOnTabs();\n\n// Map redux state to sterling props\nconst mapState = (state: RootState) => ({\n    graph: state.graphSlice.graphSlice.graph,\n    ...state.sterlingSlice\n});\n\n// Actions\nconst mapDispatch = {\n    setInstance\n};\n\n// Connector\nconst connector = connect(mapState, mapDispatch);\n\n// Create props type for things from redux\ntype SterlingReduxProps = ConnectedProps<typeof connector>;\n\n// Create combined type for all props\nexport type SterlingProps = SterlingReduxProps & {\n    connection: SterlingConnection\n}\n\ninterface ISterlingState {\n    instance: AlloyInstance | null\n}\n\nclass Sterling extends React.Component<SterlingProps, ISterlingState> {\n\n    private readonly _evaluator: Evaluator;\n    private readonly _evaluatorView: React.ComponentType<IEvaluatorProps>;\n\n    constructor (props: SterlingProps) {\n\n        super(props);\n\n        this._evaluator = new Evaluator(props.connection);\n        this._evaluatorView = EvaluatorView;\n\n        this.state = {\n            instance: null\n        };\n\n    }\n\n    componentDidMount (): void {\n\n        this._initializeConnection();\n\n    }\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n        const drawerOpen =\n            (props.mainView === 'graph' && props.graphView !== null) ||\n            (props.mainView === 'table' && props.tableView !== null) ||\n            (props.mainView === 'source' && props.sourceView !== null);\n\n        return (\n            <ResizeSensor onResize={this._resize}>\n                <div className={'sterling'}>\n                    <SterlingNavbar connection={props.connection}/>\n                    <SterlingSidebar/>\n                    {\n                        !drawerOpen\n                            ? this._getStage()\n                            : (\n                                <SplitPane\n                                    split={'vertical'}\n                                    defaultSize={350}\n                                    minSize={150}\n                                    maxSize={-150}\n                                    onChange={this._resize}\n                                >\n                                    { this._getDrawer() }\n                                    { this._getStage() }\n                                </SplitPane>\n                            )\n                    }\n                </div>\n            </ResizeSensor>\n        )\n\n    }\n\n    private _getDrawer = (): React.ReactNode => {\n\n        const props = this.props;\n        const Evaluator = this._evaluatorView;\n        const evalActive =\n            (props.mainView === 'graph' && props.graphView === 'evaluator') ||\n            (props.mainView === 'table' && props.tableView === 'evaluator') ||\n            (props.mainView === 'source' && props.sourceView === 'evaluator');\n\n        return <SterlingDrawer>\n            {\n                evalActive\n                    ?\n                        <Evaluator evaluator={this._evaluator}/>\n                    :\n                        props.mainView === 'graph' ? <GraphDrawer/> :\n                        props.mainView === 'table' ? <TableDrawer/> :\n                        props.mainView === 'source' ? <SourceDrawer/> :\n                        null\n\n            }\n        </SterlingDrawer>;\n\n    };\n\n    private _getStage = (): React.ReactNode => {\n\n        const view = this.props.mainView;\n\n        return (\n            <SterlingStage>\n                {\n                    view === 'table' ? <TableStage/> :\n                    view === 'graph' ? <GraphStage/> :\n                    view === 'source' ? <SourceStage/> : null\n                }\n            </SterlingStage>\n        )\n\n    };\n\n    private _initializeConnection = (): void => {\n\n        const connection = this.props.connection;\n\n        connection.addEventListener('connect', () => {\n            connection.requestCurrentInstance();\n        });\n\n        connection.addEventListener('instance', event => {\n            this.props.setInstance(event.instance);\n        });\n\n        // connection\n        //     .on('connect', () => {\n        //         connection.request('current');\n        //     })\n        //     .on('instance', (instance: AlloyInstance) => {\n        //         this.props.setInstance(instance);\n        //     });\n\n        connection.connect();\n\n    };\n\n    private _resize = (): void => {\n\n        this.props.graph.resize();\n\n    }\n\n}\n\nexport default connector(Sterling);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from '@reduxjs/toolkit';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { AlloyConnection } from './connections/AlloyConnection';\nimport { ForgeConnection } from './connections/ForgeConnection';\nimport { sterlingApp } from './rootReducer';\nimport Sterling from './sterling/Sterling';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.scss';\n\nconst connection = process.env.REACT_APP_FORGE_BUILD\n    ? new ForgeConnection()\n    : new AlloyConnection();\nconst store = createStore(sterlingApp);\n\nReactDOM.render(\n    <Provider store={store}>\n        <Sterling connection={connection}/>\n    </Provider>,\n    document.getElementById('root'))\n;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}