{"version":3,"sources":["sterling/SterlingTypes.ts","alloy/AlloyConnection.ts","sterling/SterlingNavbar.tsx","alloy/AlloyNavbar.tsx","alloy/table-view/TableUtil.ts","sterling/SterlingSidebar.tsx","alloy/table-view/sidebar-components/DataSection.tsx","alloy/table-view/sidebar-components/LayoutSection.tsx","alloy/table-view/TableTags.tsx","alloy/table-view/sidebar-components/tables-section-components/AlloyMultiSelect.tsx","alloy/table-view/sidebar-components/TablesSection.tsx","alloy/table-view/TableViewSidebar.tsx","alloy/table-view/stage-components/PopoverRow.tsx","alloy/table-view/stage-components/SkolemListPopover.tsx","alloy/table-view/TableViewStage.tsx","alloy/table-view/stage-components/SignatureHTMLTable.tsx","alloy/table-view/stage-components/FieldHTMLTable.tsx","alloy/table-view/stage-components/SkolemHTMLTable.tsx","alloy/table-view/TableView.tsx","serviceWorker.ts","sterling/Sterling.tsx","index.tsx"],"names":["HorizontalAlignment","LayoutDirection","SortDirection","TablesType","AlloyConnection","_ws","_cb","_rq","_heartbeat_count","_heartbeat_id","_heartbeat_interval","_heartbeat_latency","_heartbeat_timestamp","_auto_reconnect","_auto_reconnect_interval","Map","set","_request","this","onclose","close","WebSocket","window","location","hostname","port","onopen","_on_open","bind","_on_close","onerror","_on_error","onmessage","_on_message","e","has","get","forEach","event","callback","push","request","_reset_heartbeat","cb","_reconnect","header","data","slice","performance","now","length","instance","AlloyInstance","setTimeout","connect","send","clearTimeout","_ping","SterlingNavbar","props","fixedToTop","className","Group","views","map","view","key","name","Classes","MINIMAL","active","large","icon","text","onClick","onRequestView","children","React","Component","AlloyNavbar","state","command","connected","ready","_requestNext","connection","on","setState","minimal","Divider","disabled","intent","rightIcon","nameFunction","remove_this","item","id","replace","Section","collapseIcon","collapsed","title","toUpperCase","onToggleCollapse","isOpen","keepChildrenMounted","SterlingSidebar","DataSection","collapseData","alignIndicator","Alignment","LEFT","checked","removeBuiltin","tables","Select","label","onChange","onToggleBuiltin","removeEmpty","onToggleEmpty","removeThis","onToggleRemoveThis","highlightSkolems","onToggleHighlightSkolems","LayoutSection","_chooseAlphaSort","direction","oldPrimary","sortPrimary","newPrimary","Ascending","sorting","alphabeticalSort","onChooseSortingFunctions","_chooseGroupSort","groupSort","_chooseNumSort","sizeSort","collapseLayout","inline","layoutDirection","Row","onChooseLayoutDirection","Column","tableAlignment","Left","onChooseTableAlignment","Center","Right","Descending","SignatureTag","signature","fill","FieldTag","tokens","field","split","FieldTagEls","join","iconSize","style","padding","transform","SkolemTag","skolem","AlloySelect","MultiSelect","ofType","highlightText","query","lastIndex","words","filter","word","escapeRegExpChars","regexp","RegExp","match","exec","before","rest","AlloyMultiSelect","_filterItem","expressionType","toLowerCase","indexOf","_isItemSelected","itemsSelected","includes","_onRemoveTag","tag","index","onDeselectItem","_onSelectItem","onSelectItem","_renderItem","modifiers","matchesPredicate","_renderSignature","_renderField","_renderSkolem","_renderList","sigs","items","flds","skls","alpha","sort","builtinSort","renderedSigs","renderItem","renderedFlds","renderedSkls","ulRef","itemsParentRef","selected","labelElement","handleClick","_renderTag","_tagProps","value","itemType","clearButton","onClearSelectedItems","undefined","sortItems","itemPredicate","itemRenderer","itemListRenderer","onItemSelect","placeholder","resetOnSelect","scrollToActiveItem","selectedItems","tagInputProps","onRemove","rightElement","tagProps","tagRenderer","TablesSection","_addItem","curr","onItemsSelected","_clearItems","_removeItem","next","idx","splice","_handleRadioChange","onChooseTablesType","parseInt","currentTarget","collapseTables","selectedValue","All","Signatures","Fields","Skolems","TableViewSidebar","onToggleCollapseData","onToggleCollapseLayout","onToggleCollapseSidebar","onToggleCollapseTables","onToggleCollapseSkolem","viewState","collapseSidebar","PopoverRow","enabled","_buildShadowStyle","colors","thickness","color","i","_onMouseEnter","_onMouseLeave","Manager","Reference","ref","onMouseEnter","onMouseLeave","boxShadow","Popper","placement","data-placement","content","SkolemListPopover","skolems","backgroundColor","TableViewStage","tableAlign","tableLayout","alignClass","layoutClass","_getElements","itemsVisible","skolemColors","elevation","atoms","bordered","condensed","striped","atom","s","SignatureHTMLTable","types","tuples","sig","tuple","FieldHTMLTable","borderColor","SkolemHTMLTable","TableView","_assignSkolemColors","colormap","_getVisibleItems","type","filtering","keepSignatures","keepFields","keepSkolems","pass","removeBuiltins","removeEmptys","removeSkolems","sortSecondary","_onChooseLayoutDirection","layout","_onChooseSortingFunctions","primary","secondary","_onChooseTableAlignment","align","_onChooseTablesType","_onItemsSelected","_onToggleBuiltin","_onToggleCollapseSidebar","_onToggleCollapseData","_onToggleCollapseLayout","_onToggleCollapseSkolem","collapseSkolem","_onToggleCollapseTables","_onToggleEmpty","_onToggleHighlightSkolems","newTables","_onToggleRemoveThis","newRemove","newNameFn","nF","sH","builtin","signatures","fields","prevProps","prevState","console","log","newInstance","newItems","oldSelected","newSelected","visible","stage","sidebar","Boolean","Sterling","_initializeConnection","transforms","t","_placeholder","description","message","_setView","_views","View","Navbar","navbar","alloy","table","ui","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f6ce53e.chunk.js","sourcesContent":["import {\n    AlloyElement,\n    AlloyField,\n    AlloySignature,\n    AlloySkolem\n} from 'alloy-ts';\nimport React from 'react';\nimport { IconName } from '@blueprintjs/core';\nimport { SterlingConnection } from './SterlingConnection';\n\nexport interface ISterlingUIView {\n    name: string,\n    icon: IconName,\n    view: React.ComponentType<ISterlingViewProps>,\n    transform?: (data: any) => any\n}\n\nexport interface ISterlingViewProps {\n    connection: SterlingConnection,\n    data: any,\n    visible: boolean\n}\n\n\n/**\n * General\n */\nexport enum HorizontalAlignment { Left, Center, Right}\nexport enum LayoutDirection { Row, Column}\nexport enum SortDirection { Ascending, Descending}\n\n/**\n * Alloy\n */\nexport type AlloyNameFn = (item: AlloyElement) => string;\nexport type AlloySortFn = (a: AlloyElement, b: AlloyElement) => number;\nexport type SigFieldSkolem = AlloySignature | AlloyField | AlloySkolem;\n\n/**\n * Tables\n */\nexport type TableSortFunction = (a: SigFieldSkolem, b: SigFieldSkolem) => number;\nexport enum TablesType { All, Signatures, Fields, Skolems, Select}\n","import { AlloyInstance } from 'alloy-ts';\nimport { SterlingConnection } from '../sterling/SterlingConnection';\n\nclass AlloyConnection extends SterlingConnection {\n\n    _ws: WebSocket | null;\n    _cb: Map<string, ((...args: any[]) => void)[]>;\n    _rq: Map<string, () => void>;\n\n    _heartbeat_count: number;\n    _heartbeat_id: number;\n    _heartbeat_interval: number;\n    _heartbeat_latency: DOMHighResTimeStamp;\n    _heartbeat_timestamp: DOMHighResTimeStamp;\n\n    _auto_reconnect: boolean;\n    _auto_reconnect_interval: number;\n\n    constructor () {\n\n        super();\n\n        this._ws = null;\n        this._cb = new Map();\n        this._rq = new Map();\n\n        this._heartbeat_count = 0;\n        this._heartbeat_id = 0;\n        this._heartbeat_interval = 15000;\n        this._heartbeat_latency = 0;\n        this._heartbeat_timestamp = 0;\n\n        this._auto_reconnect = false;\n        this._auto_reconnect_interval = 5000;\n\n        this._rq.set('current', () => this._request('current'));\n        this._rq.set('next', () => this._request('next'));\n\n    }\n\n    average_latency (): number {\n\n        if (this._heartbeat_count > 0) {\n            return this._heartbeat_latency / this._heartbeat_count;\n        }\n        return 0;\n\n    }\n\n    connect () {\n\n        if (this._ws) {\n            this._ws.onclose = null;\n            this._ws.close();\n        }\n\n        try {\n\n            this._ws = new WebSocket('ws://' + window.location.hostname + ':' + window.location.port + '/alloy');\n            this._ws.onopen = this._on_open.bind(this);\n            this._ws.onclose = this._on_close.bind(this);\n            this._ws.onerror = this._on_error.bind(this);\n            this._ws.onmessage = this._on_message.bind(this);\n\n        } catch (e) {\n\n            if (this._cb.has('error'))\n                this._cb.get('error')!.forEach(e);\n\n        }\n\n    }\n\n    on (event: string, callback: (...args: any[]) => void): AlloyConnection {\n\n        if (!this._cb.has(event)) {\n            this._cb.set(event, []);\n        }\n\n        this._cb.get(event)!.push(callback);\n\n        return this;\n\n    }\n\n    request (request: string): void {\n\n        if (this._rq.has(request))\n            this._rq.get(request)!();\n\n    }\n\n    _on_open (e: Event) {\n\n        this._reset_heartbeat();\n        if (this._cb.has('connect')) {\n            this._cb.get('connect')!.forEach(cb => cb());\n        }\n\n    }\n\n    _on_close (e: Event) {\n\n        this._ws = null;\n        if (this._auto_reconnect) this._reconnect();\n        if (this._cb.has('disconnect')) {\n            this._cb.get('disconnect')!.forEach(cb => cb());\n        }\n\n    }\n\n    _on_error (e: Event) {\n\n        if (this._auto_reconnect) this._reconnect();\n        if (this._cb.has('error')) {\n            this._cb.get('error')!.forEach(cb => cb(e));\n        }\n\n    }\n\n    _on_message (e: MessageEvent) {\n\n        this._reset_heartbeat();\n        let header = e.data.slice(0, 4);\n        let data = e.data.slice(4);\n\n        switch (header) {\n\n            case 'pong':\n                this._heartbeat_latency += performance.now() - this._heartbeat_timestamp;\n                this._heartbeat_count += 1;\n                break;\n\n            case 'XML:':\n                if (data.length && this._cb.has('instance')) {\n                    let instance = new AlloyInstance(data);\n                    this._cb.get('instance')!.forEach(cb => cb(instance));\n                }\n                break;\n\n            default:\n                break;\n\n        }\n\n    }\n\n    _reconnect () {\n\n        window.setTimeout(this.connect.bind(this), this._auto_reconnect_interval);\n\n    }\n\n    _request (request: string): void {\n\n        if (this._ws)\n            this._ws.send(request);\n\n    }\n\n    _reset_heartbeat () {\n\n        clearTimeout(this._heartbeat_id);\n        this._heartbeat_id = window.setTimeout(this._ping.bind(this), this._heartbeat_interval);\n\n    }\n\n    _ping () {\n\n        if (this._ws) {\n            this._heartbeat_timestamp = performance.now();\n            this._ws.send('ping');\n        }\n\n    }\n\n}\n\nexport {\n    AlloyConnection\n};\n","import {\n    Button, Classes,\n    Navbar,\n    NavbarDivider,\n    NavbarHeading\n} from '@blueprintjs/core';\nimport React from 'react';\nimport { SterlingConnection } from './SterlingConnection';\nimport { ISterlingUIView } from './SterlingTypes';\n\nexport interface ISterlingNavbarProps {\n    connection: SterlingConnection,\n    onRequestView: (view: ISterlingUIView) => void,\n    view: ISterlingUIView,\n    views: ISterlingUIView[]\n}\n\nclass SterlingNavbar extends React.Component<ISterlingNavbarProps> {\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        return (\n            <Navbar fixedToTop className={'nav bp3-dark'}>\n                <Navbar.Group>\n                    <NavbarHeading className={'nav-heading'}>\n                        Sterling\n                    </NavbarHeading>\n                    <NavbarDivider/>\n                    {\n                        props.views.map(view => (\n                            <Button\n                                key={view.name}\n                                className={Classes.MINIMAL}\n                                active={view === props.view}\n                                large={true}\n                                icon={view.icon}\n                                text={view.name}\n                                onClick={() => props.onRequestView(view)}/>\n                        ))\n                    }\n                    <NavbarDivider/>\n                </Navbar.Group>\n                {\n                    props.children\n                }\n            </Navbar>\n        );\n\n    }\n\n}\n\nexport default SterlingNavbar;\n","import { Button, Navbar, Tag } from '@blueprintjs/core';\nimport { AlloyInstance } from 'alloy-ts';\nimport React from 'react';\nimport SterlingNavbar, { ISterlingNavbarProps } from '../sterling/SterlingNavbar';\n\ninterface IAlloyNavbarState {\n    command: string,\n    connected: boolean,\n    ready: boolean\n}\n\nclass AlloyNavbar extends React.Component<ISterlingNavbarProps, IAlloyNavbarState> {\n\n    state = {\n        command: '',\n        connected: false,\n        ready: false\n    };\n\n    componentDidMount (): void {\n\n        const connection = this.props.connection;\n\n        connection\n            .on('connect', () => {\n                this.setState({connected: true});\n            })\n            .on('disconnect', () => {\n                this.setState({connected: false, ready: false});\n            })\n            .on('instance', (instance: AlloyInstance) => {\n                this.setState({\n                    command: instance.command(),\n                    ready: this.state.connected\n                });\n            });\n\n    }\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n        const state = this.state;\n\n        return (\n            <SterlingNavbar {...props}>\n                <Navbar.Group>\n                    {\n                        state.command.length > 0 &&\n                        <>\n                            <Tag\n                                minimal={true}>\n                                {state.command}\n                            </Tag>\n                            <Navbar.Divider/>\n                        </>\n                    }\n                    <Button\n                        disabled={!state.ready}\n                        intent={state.connected ? 'success' : 'danger'}\n                        large={true}\n                        onClick={this._requestNext}\n                        rightIcon={'circle-arrow-right'}\n                        text={'Next'}/>\n                </Navbar.Group>\n            </SterlingNavbar>\n        )\n\n    }\n\n    private _requestNext = () => {\n\n        this.props.connection.request('next');\n\n    }\n\n}\n\nexport default AlloyNavbar;\n","import { AlloyElement } from 'alloy-ts';\nimport { AlloyNameFn } from '../../sterling/SterlingTypes';\n\nfunction nameFunction (remove_this: boolean): AlloyNameFn {\n    return (item: AlloyElement) => {\n        return remove_this\n            ? removeThis(item.id())\n            : item.id();\n    }\n}\n\nfunction removeThis (name: string): string {\n    return name.replace(/^this\\//, '');\n}\n\nexport {\n    nameFunction\n};\n","import { Button, Collapse } from '@blueprintjs/core';\nimport * as React from 'react';\n\nexport interface ISterlingSidebarSectionProps {\n    collapsed: boolean,\n    onToggleCollapse: () => void\n    title?: string\n}\n\nclass Section extends React.Component<ISterlingSidebarSectionProps> {\n\n    render (): React.ReactNode {\n\n        const collapseIcon = this.props.collapsed ? 'expand-all' : 'collapse-all';\n\n        return (\n            <div className={`section ${this.props.collapsed ? 'collapsed' : ''}`}>\n                {\n                    !!this.props.title &&\n                    <div className='section-header'>\n                        <div className='title'>\n                            {this.props.title.toUpperCase()}\n                        </div>\n                        <Button\n                            icon={collapseIcon}\n                            minimal={true}\n                            onClick={this.props.onToggleCollapse}/>\n                    </div>\n                }\n                <Collapse\n                    isOpen={!this.props.collapsed}\n                    keepChildrenMounted={true}>\n                    <div className='section-body'>\n                        {this.props.children}\n                    </div>\n                </Collapse>\n            </div>\n        );\n\n    }\n\n}\n\nexport interface ISterlingSidebarProps {\n    collapsed: boolean,\n    onToggleCollapse: () => void,\n    title: string\n}\n\nclass SterlingSidebar extends React.Component<ISterlingSidebarProps> {\n\n    static Section = Section;\n\n    render(): React.ReactNode {\n\n        const openIcon = 'menu-open';\n        const closeIcon = 'menu-closed';\n\n        if (this.props.collapsed) {\n            return (\n                <div className={`sterling-sidebar left collapsed`}>\n                    <div className='header'>\n                        <Button icon={openIcon} minimal={true} onClick={this.props.onToggleCollapse}/>\n                    </div>\n                </div>\n            )\n        }\n\n        return (\n            <div className={`sterling-sidebar left bp3-dark`}>\n                <div className='header'>\n                    <div className='title'>\n                        {this.props.title}\n                    </div>\n                    <Button icon={closeIcon} minimal={true} onClick={this.props.onToggleCollapse}/>\n                </div>\n                {this.props.children}\n            </div>\n        )\n    }\n\n}\n\nexport default SterlingSidebar;\n","import * as React from 'react';\nimport SterlingSidebar from '../../../sterling/SterlingSidebar';\nimport { Alignment, FormGroup, Switch } from '@blueprintjs/core';\nimport { ITableViewState } from '../TableView';\nimport { TablesType } from '../../../sterling/SterlingTypes';\n\nexport interface IDataSectionProps extends ITableViewState {\n    onToggleBuiltin: () => void,\n    onToggleCollapse: () => void,\n    onToggleEmpty: () => void,\n    onToggleHighlightSkolems: () => void,\n    onToggleRemoveThis: () => void\n}\n\nclass DataSection extends React.Component<IDataSectionProps> {\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        return (\n            <SterlingSidebar.Section\n                collapsed={props.collapseData}\n                onToggleCollapse={props.onToggleCollapse}\n                title='Data Options'>\n\n                <FormGroup>\n\n                    <Switch\n                        alignIndicator={Alignment.LEFT}\n                        checked={props.removeBuiltin}\n                        disabled={props.tables === TablesType.Select}\n                        label='Hide Built-in Signatures'\n                        onChange={props.onToggleBuiltin}/>\n\n                    <Switch\n                        alignIndicator={Alignment.LEFT}\n                        checked={props.removeEmpty}\n                        disabled={props.tables === TablesType.Select}\n                        label='Hide Empty Tables'\n                        onChange={props.onToggleEmpty}/>\n\n                    <Switch\n                        alignIndicator={Alignment.LEFT}\n                        checked={props.removeThis}\n                        label='Remove \"this\" from Signature names'\n                        onChange={props.onToggleRemoveThis}/>\n\n                    <Switch\n                        alignIndicator={Alignment.LEFT}\n                        checked={props.highlightSkolems}\n                        label='Display Skolems as highlighted rows'\n                        onChange={props.onToggleHighlightSkolems}/>\n\n                </FormGroup>\n\n            </SterlingSidebar.Section>\n        )\n\n    }\n\n}\n\nexport default DataSection;\n","import { Button, ButtonGroup, FormGroup } from '@blueprintjs/core';\nimport { sorting } from 'alloy-ts';\nimport * as React from 'react';\nimport {\n    HorizontalAlignment,\n    LayoutDirection,\n    SortDirection,\n    TableSortFunction\n} from '../../../sterling/SterlingTypes';\nimport SterlingSidebar from '../../../sterling/SterlingSidebar';\nimport { ITableViewState } from '../TableView';\n\nexport interface ILayoutSectionProps extends ITableViewState {\n    onChooseLayoutDirection: (direction: LayoutDirection) => void,\n    onChooseSortingFunctions: (primary: TableSortFunction, secondary: TableSortFunction) => void,\n    onChooseTableAlignment: (alignment: HorizontalAlignment) => void,\n    onToggleCollapse: () => void\n}\n\nclass LayoutSection extends React.Component<ILayoutSectionProps> {\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        return (\n            <SterlingSidebar.Section\n                collapsed={props.collapseLayout}\n                onToggleCollapse={props.onToggleCollapse}\n                title='Layout Options'>\n\n                <FormGroup>\n                    <FormGroup inline={true} label='Layout Direction'>\n                        <ButtonGroup>\n                            <Button\n                                active={props.layoutDirection === LayoutDirection.Row}\n                                icon='vertical-distribution'\n                                onClick={() => props.onChooseLayoutDirection(LayoutDirection.Row)}/>\n                            <Button\n                                active={props.layoutDirection === LayoutDirection.Column}\n                                icon='horizontal-distribution'\n                                onClick={() => props.onChooseLayoutDirection(LayoutDirection.Column)}/>\n                        </ButtonGroup>\n                    </FormGroup>\n\n                    <FormGroup inline={true} label='Align'>\n                        <ButtonGroup>\n                            <Button\n                                active={props.tableAlignment === HorizontalAlignment.Left}\n                                icon='align-left'\n                                onClick={() => props.onChooseTableAlignment(HorizontalAlignment.Left)}/>\n                            <Button\n                                active={props.tableAlignment === HorizontalAlignment.Center}\n                                icon='align-center'\n                                onClick={() => props.onChooseTableAlignment(HorizontalAlignment.Center)}/>\n                            <Button\n                                active={props.tableAlignment === HorizontalAlignment.Right}\n                                icon='align-right'\n                                onClick={() => props.onChooseTableAlignment(HorizontalAlignment.Right)}/>\n                        </ButtonGroup>\n                    </FormGroup>\n\n                    <FormGroup inline={true} label='Sort'>\n                        <ButtonGroup>\n                            <Button\n                                icon='group-objects'\n                                onClick={() => this._chooseGroupSort()}/>\n                            <Button\n                                icon='sort-alphabetical'\n                                onClick={() => this._chooseAlphaSort(SortDirection.Ascending)}/>\n                            <Button\n                                icon='sort-alphabetical-desc'\n                                onClick={() => this._chooseAlphaSort(SortDirection.Descending)}/>\n                            <Button\n                                icon='sort-numerical'\n                                onClick={() => this._chooseNumSort(SortDirection.Ascending)}/>\n                            <Button\n                                icon='sort-numerical-desc'\n                                onClick={() => this._chooseNumSort(SortDirection.Descending)}/>\n                        </ButtonGroup>\n                    </FormGroup>\n\n                </FormGroup>\n\n            </SterlingSidebar.Section>\n        )\n\n    }\n\n    /**\n     * Callback used to set the primary and secondary sorting functions. The\n     * current primary sorting function will be bumped down to act as the\n     * new secondary sorting function\n     * @param direction Sort alphabetically ascending or descending\n     * @private\n     */\n    private _chooseAlphaSort = (direction: SortDirection): void => {\n\n        const oldPrimary = this.props.sortPrimary;\n        const newPrimary = direction === SortDirection.Ascending\n            ? sorting.alphabeticalSort(this.props.nameFunction, true)\n            : sorting.alphabeticalSort(this.props.nameFunction, false);\n        this.props.onChooseSortingFunctions(newPrimary, oldPrimary);\n\n    };\n\n    /**\n     * Callback used to set the primary and secondary sorting functions. The\n     * current primary sorting function will be bumped down to act as the\n     * new secondary sorting function. The new primary sorting function will\n     * sort by item type in the following order: signatures, fields, skolems.\n     * @private\n     */\n    private _chooseGroupSort = (): void => {\n        this.props.onChooseSortingFunctions(sorting.groupSort(), this.props.sortPrimary);\n    };\n\n    /**\n     * Callback used to set the primary and secondary sorting functions. The\n     * current primary sorting function will be bumped down to act as the\n     * new secondary sorting function\n     * @param direction Sort by size ascending or descending\n     * @private\n     */\n    private _chooseNumSort = (direction: SortDirection): void => {\n\n        const oldPrimary = this.props.sortPrimary;\n        const newPrimary = direction === SortDirection.Ascending\n            ? sorting.sizeSort()\n            : sorting.sizeSort(false);\n        this.props.onChooseSortingFunctions(newPrimary, oldPrimary);\n\n    };\n\n}\n\nexport default LayoutSection;\n","import * as React from 'react';\nimport { AlloyField, AlloySignature, AlloySkolem } from 'alloy-ts';\nimport { Icon, Tag } from '@blueprintjs/core';\nimport { SigFieldSkolem } from '../../sterling/SterlingTypes';\n\nexport interface IAlloyTagProps {\n    fill?: boolean,\n    nameFunction?: (item: SigFieldSkolem) => string,\n}\n\nexport interface ISignatureTagProps extends IAlloyTagProps {\n    signature: AlloySignature | string\n}\n\nexport interface IFieldTagProps extends IAlloyTagProps {\n    field: AlloyField | string\n}\n\nexport interface ISkolemTagProps extends IAlloyTagProps {\n    skolem: AlloySkolem | string\n}\n\nclass SignatureTag extends React.Component<ISignatureTagProps> {\n\n    static className = 'sig-tag';\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const name = typeof props.signature === 'string'\n            ? props.signature\n            : props.nameFunction\n                ? props.nameFunction(props.signature)\n                : props.signature.name();\n\n        return (\n            <Tag className={SignatureTag.className} fill={props.fill}>\n                { name }\n            </Tag>\n        );\n\n    }\n\n}\n\nclass FieldTag extends React.Component<IFieldTagProps> {\n\n    static className = 'field-tag';\n\n    render (): React.ReactNode {\n\n        const name = typeof this.props.field === 'string'\n            ? this.props.field\n            : this.props.nameFunction\n                ? this.props.nameFunction(this.props.field)\n                : this.props.field.name();\n\n        const tokens = name.split('<:');\n\n        return (\n            <Tag\n                className={FieldTag.className}\n                fill={this.props.fill}>\n                { FieldTag.FieldTagEls(tokens) }\n            </Tag>\n        )\n\n    }\n\n    public static FieldTagEls (tokens: Array<string>): React.ReactElement {\n\n        if (tokens.length !== 2)\n            return <>{tokens.join('')}</>;\n\n        return (<>\n            {tokens[0]}\n            <Icon\n                icon='symbol-triangle-down'\n                iconSize={14}\n                style={{\n                    padding: '0 1px 0 1px',\n                    transform: 'rotate(90deg)'\n                }}/>\n            {tokens[1]}\n        </>);\n\n    }\n\n}\n\nclass SkolemTag extends React.Component<ISkolemTagProps> {\n\n    static className = 'skolem-tag';\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const name = typeof props.skolem === 'string'\n            ? props.skolem\n            : props.nameFunction\n                ? props.nameFunction(props.skolem)\n                : props.skolem.name();\n\n        return (\n            <Tag className={SkolemTag.className} fill={props.fill}>\n                { name }\n            </Tag>\n\n        );\n\n    }\n\n}\n\nexport {\n    SignatureTag,\n    FieldTag,\n    SkolemTag\n}\n","import {\n    Button,\n    Icon,\n    ITagProps,\n    Menu,\n    MenuDivider,\n    MenuItem\n} from '@blueprintjs/core';\nimport {\n    IItemListRendererProps,\n    IItemRendererProps,\n    ItemPredicate,\n    MultiSelect\n} from '@blueprintjs/select';\nimport { AlloyField, AlloySignature, AlloySkolem, sorting } from 'alloy-ts';\nimport * as React from 'react';\nimport { AlloyNameFn, SigFieldSkolem } from '../../../../sterling/SterlingTypes';\nimport { FieldTag, SignatureTag } from '../../TableTags';\n\nconst AlloySelect = MultiSelect.ofType<SigFieldSkolem>();\n\nexport interface IAlloyMultiSelectProps {\n    items: SigFieldSkolem[],\n    itemsSelected: SigFieldSkolem[],\n    onClearSelectedItems: () => void,\n    onDeselectItem: (item: SigFieldSkolem) => void,\n    onSelectItem: (item: SigFieldSkolem) => void,\n    nameFunction: AlloyNameFn\n}\n\nclass AlloyMultiSelect extends React.Component<IAlloyMultiSelectProps> {\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        const sortItems = (items: SigFieldSkolem[]): SigFieldSkolem[] => {\n\n            const sigs = items.filter(item => item.expressionType() === 'signature');\n            const flds = items.filter(item => item.expressionType() === 'field');\n            const skls = items.filter(item => item.expressionType() === 'skolem');\n            const alpha = sorting.alphabeticalSort(this.props.nameFunction);\n            (sigs as AlloySignature[]).sort(alpha).sort(sorting.builtinSort());\n            (flds as AlloyField[]).sort(alpha);\n            (skls as AlloySkolem[]).sort(alpha);\n            return [...sigs, ...flds, ...skls];\n\n        };\n\n        const clearButton = this.props.itemsSelected.length\n            ? <Button\n                icon='cross'\n                minimal={true}\n                onClick={this.props.onClearSelectedItems}/>\n            : undefined;\n\n        return (\n            <AlloySelect\n                fill={true}\n                items={sortItems(props.items)}\n                itemPredicate={this._filterItem}\n                itemRenderer={this._renderItem}\n                itemListRenderer={this._renderList}\n                onItemSelect={this._onSelectItem}\n                placeholder='Choose Tables...'\n                resetOnSelect={true}\n                scrollToActiveItem={true}\n                selectedItems={this.props.itemsSelected}\n                tagInputProps={{\n                    onRemove: this._onRemoveTag,\n                    rightElement: clearButton,\n                    tagProps: this._tagProps\n                }}\n                tagRenderer={this._renderTag}\n                />\n        )\n\n    }\n\n    /**\n     * Predicate used to determine if a query string exists in the name of a\n     * Signature, Field, or Skolem.\n     * @param query The query string\n     * @param item The Signature, Field, or Skolem\n     * @private\n     * @return Returns true if the query string appears in the name of the item,\n     * false otherwise.\n     */\n    private _filterItem: ItemPredicate<SigFieldSkolem> = (query: string, item: SigFieldSkolem): boolean => {\n\n        const name = item.expressionType() === 'field'\n            ? this.props.nameFunction(item).split('<:')[1]\n            : this.props.nameFunction(item);\n\n        return name.toLowerCase().indexOf(query.toLowerCase()) >= 0;\n\n    };\n\n    /**\n     * Determine if an item is currently selected\n     * @param item The item in question\n     * @private\n     * @return Returns true if the item is currently selected, false otherwise\n     */\n    private _isItemSelected = (item: SigFieldSkolem) => {\n        return this.props.itemsSelected.includes(item);\n    };\n\n    /**\n     * Event handler used when a tag is removed from the current selection\n     * @param tag The tag text\n     * @param index The index of the tag in the selected items list\n     * @private\n     */\n    private _onRemoveTag = (tag: string, index: number): void => {\n        this.props.onDeselectItem(this.props.itemsSelected[index]);\n    };\n\n    /**\n     * Event handler used when an item in the list is selected\n     * @param item The selected item\n     * @private\n     */\n    private _onSelectItem = (item: SigFieldSkolem): void => {\n\n        this._isItemSelected(item)\n            ? this.props.onDeselectItem(item)\n            : this.props.onSelectItem(item);\n\n    };\n\n    /**\n     * Custom renderer for an Alloy item in the dropdown list.\n     * @param item The Alloy item to render\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderItem = (item: SigFieldSkolem, props: IItemRendererProps): React.ReactElement | null => {\n\n        if (!props.modifiers.matchesPredicate) return null;\n        switch (item.expressionType()) {\n            case 'signature':\n                return this._renderSignature(item as AlloySignature, props);\n            case 'field':\n                return this._renderField(item as AlloyField, props);\n            case 'skolem':\n                return this._renderSkolem(item as AlloySkolem, props);\n            default:\n                return null;\n        }\n\n    };\n\n    /**\n     * Custom renderer for the contents of the dropdown list. Splits list into\n     * three categories (Signatures, Fields, Skolems) sorted alphabetically.\n     * @param props Properties describing how to render a list of items\n     * @private\n     */\n    private _renderList = (props: IItemListRendererProps<SigFieldSkolem>): React.ReactElement => {\n\n        const sigs = props.items.filter(item => item.expressionType() === 'signature');\n        const flds = props.items.filter(item => item.expressionType() === 'field');\n        const skls = props.items.filter(item => item.expressionType() === 'skolem');\n        const alpha = sorting.alphabeticalSort(this.props.nameFunction);\n        (sigs as AlloySignature[]).sort(alpha).sort(sorting.builtinSort());\n        (flds as AlloyField[]).sort(alpha);\n        (skls as AlloySkolem[]).sort(alpha);\n        const renderedSigs = sigs.map(props.renderItem).filter(item => item != null);\n        const renderedFlds = flds.map(props.renderItem).filter(item => item != null);\n        const renderedSkls = skls.map(props.renderItem).filter(item => item != null);\n        return (\n            <Menu ulRef={props.itemsParentRef}>\n                <MenuDivider title='Signatures'/>\n                {renderedSigs.length ? renderedSigs : <MenuItem disabled={true} text='None'/>}\n                <MenuDivider title='Fields'/>\n                {renderedFlds.length ? renderedFlds : <MenuItem disabled={true} text='None'/>}\n                <MenuDivider title='Skolems'/>\n                {renderedSkls.length ? renderedSkls : <MenuItem disabled={true} text='None'/>}\n            </Menu>\n        );\n\n    };\n\n    /**\n     * Custom renderer for an Alloy Signature in the dropdown list\n     * @param item The Signature\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderSignature = (item: AlloySignature, props: IItemRendererProps): React.ReactElement => {\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                key={item.id()}\n                labelElement={highlightText(this.props.nameFunction(item), props.query)}\n                icon={selected ? 'tick' : 'blank'}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for an Alloy Field in the dropdown list\n     * @param item The Field\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderField = (item: AlloyField, props: IItemRendererProps) => {\n        const name = this.props.nameFunction(item);\n        const tokens = name.split('<:');\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                key={item.id()}\n                icon={<>\n                    { selected && <Icon icon='tick'/>}\n                    <SignatureTag signature={tokens[0]}/>\n                </>}\n                labelElement={highlightText(tokens[1], props.query)}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for an Alloy Skolem in the dropdown list\n     * @param item The Skolem\n     * @param props The rendering properties\n     * @private\n     */\n    private _renderSkolem = (item: AlloySkolem, props: IItemRendererProps) => {\n        const selected = this._isItemSelected(item);\n        return (\n            <MenuItem\n                active={props.modifiers.active}\n                disabled={props.modifiers.disabled}\n                icon={selected ? 'tick' : 'blank'}\n                key={item.id()}\n                labelElement={highlightText(item.name(), props.query)}\n                onClick={props.handleClick}/>\n        );\n    };\n\n    /**\n     * Custom renderer for tags in the select. Does not actually generate a Tag,\n     * but instead returns the node that will be used as the label of the tag.\n     * @param item The Alloy item to render\n     * @private\n     */\n    private _renderTag = (item: SigFieldSkolem): React.ReactNode => {\n\n        const name = this.props.nameFunction(item);\n        return item.expressionType() === 'field'\n            ? FieldTag.FieldTagEls(name.split('<:'))\n            : name;\n\n    };\n\n    /**\n     * Custom properties to pass to each Tag based on type of item the tag\n     * represents\n     * @param value The node\n     * @param index The index of the item in the selected items list\n     * @private\n     */\n    private _tagProps = (value: React.ReactNode, index: number): ITagProps => {\n\n        const itemType = this.props.itemsSelected[index].expressionType();\n        const tag = itemType === 'signature'\n            ? 'sig-tag' : itemType === 'field'\n                ? 'field-tag' : itemType === 'skolem'\n                    ? 'skolem-tag' : '';\n        return {\n            className: tag\n        };\n\n    }\n\n}\n\nfunction highlightText (text: string, query: string) {\n    let lastIndex = 0;\n    const words = query\n        .split(/\\s+/)\n        .filter(word => word.length > 0)\n        .map(escapeRegExpChars);\n    if (words.length === 0) {\n        return [text];\n    }\n    const regexp = new RegExp(words.join(\"|\"), \"gi\");\n    const tokens: React.ReactNode[] = [];\n    while (true) {\n        const match = regexp.exec(text);\n        if (!match) {\n            break;\n        }\n        const length = match[0].length;\n        const before = text.slice(lastIndex, regexp.lastIndex - length);\n        if (before.length > 0) {\n            tokens.push(before);\n        }\n        lastIndex = regexp.lastIndex;\n        tokens.push(<strong key={lastIndex}>{match[0]}</strong>);\n    }\n    const rest = text.slice(lastIndex);\n    if (rest.length > 0) {\n        tokens.push(rest);\n    }\n    return tokens;\n}\n\nfunction escapeRegExpChars (text: string) {\n    return text.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, \"\\\\$1\");\n}\n\nexport default AlloyMultiSelect;\n","import * as React from 'react';\nimport SterlingSidebar from '../../../sterling/SterlingSidebar';\nimport { FormGroup, Radio, RadioGroup } from '@blueprintjs/core';\nimport AlloyMultiSelect from './tables-section-components/AlloyMultiSelect';\nimport { ITableViewState } from '../TableView';\nimport { SigFieldSkolem, TablesType } from '../../../sterling/SterlingTypes';\n\nexport interface ITablesSectionProps extends ITableViewState {\n    onChooseTablesType: (type: TablesType) => void,\n    onItemsSelected: (items: SigFieldSkolem[]) => void,\n    onToggleCollapse: () => void,\n}\n\nclass TablesSection extends React.Component<ITablesSectionProps> {\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n\n        return (\n            <SterlingSidebar.Section\n                collapsed={props.collapseTables}\n                onToggleCollapse={props.onToggleCollapse}\n                title='Tables'>\n\n                <FormGroup>\n\n                    <RadioGroup\n                        onChange={this._handleRadioChange}\n                        selectedValue={props.tables}>\n\n                        <Radio label='All Tables' value={TablesType.All}/>\n                        <Radio label='Signatures' value={TablesType.Signatures}/>\n                        <Radio label='Fields' value={TablesType.Fields}/>\n                        <Radio label='Skolems' disabled={props.highlightSkolems} value={TablesType.Skolems}/>\n                        <Radio label='Choose Tables' value={TablesType.Select}/>\n                        <AlloyMultiSelect\n                            items={props.items}\n                            onClearSelectedItems={this._clearItems}\n                            onDeselectItem={this._removeItem}\n                            onSelectItem={this._addItem}\n                            nameFunction={props.nameFunction}\n                            itemsSelected={props.itemsSelected}/>\n\n                    </RadioGroup>\n\n                </FormGroup>\n\n            </SterlingSidebar.Section>\n        )\n\n    }\n\n    /**\n     * Select a table by adding it to the list of selected tables\n     * @param item The item to select\n     * @private\n     */\n    private _addItem = (item: SigFieldSkolem): void => {\n\n        const curr = this.props.itemsSelected;\n        this.props.onItemsSelected([...curr, item]);\n\n    };\n\n    /**\n     * Clear selected tables by selecting no items\n     * @private\n     */\n    private _clearItems = (): void => {\n\n        this.props.onItemsSelected([]);\n\n    };\n\n    /**\n     * Deselect a currently selected table by removing it from the list of\n     * selected tables.\n     * @param item The item to deselect\n     * @private\n     */\n    private _removeItem = (item: SigFieldSkolem): void => {\n\n        const next: SigFieldSkolem[] = [...this.props.itemsSelected];\n        const idx = next.indexOf(item);\n        if (idx >= 0) {\n            next.splice(idx, 1);\n            this.props.onItemsSelected(next);\n        }\n\n    };\n\n    /**\n     * Callback used to handle changing of radio button selection. Radio buttons\n     * determine which set of tables are visible and options are 'all',\n     * 'signatures', 'fields', 'skolems', and 'select'.\n     * @param event\n     */\n    private _handleRadioChange = (event: React.FormEvent<HTMLInputElement>): void => {\n\n        this.props.onChooseTablesType(parseInt(event.currentTarget.value));\n\n    };\n\n}\n\nexport default TablesSection;\n","import React from 'react';\nimport {\n    HorizontalAlignment,\n    LayoutDirection,\n    SigFieldSkolem,\n    TableSortFunction,\n    TablesType\n} from '../../sterling/SterlingTypes';\nimport SterlingSidebar from '../../sterling/SterlingSidebar';\nimport DataSection from './sidebar-components/DataSection';\nimport LayoutSection from './sidebar-components/LayoutSection';\nimport TablesSection from './sidebar-components/TablesSection';\nimport { ITableViewState } from './TableView';\n\n\nexport interface ITableViewSidebarProps extends ITableViewState {\n    onChooseLayoutDirection: (layout: LayoutDirection) => void,\n    onChooseSortingFunctions: (primary: TableSortFunction, secondary: TableSortFunction) => void,\n    onChooseTableAlignment: (align: HorizontalAlignment) => void,\n    onChooseTablesType: (type: TablesType) => void,\n    onItemsSelected: (items: SigFieldSkolem[]) => void,\n    onToggleBuiltin: () => void,\n    onToggleCollapseData: () => void,\n    onToggleCollapseLayout: () => void,\n    onToggleCollapseSidebar: () => void,\n    onToggleCollapseSkolem: () => void,\n    onToggleCollapseTables: () => void,\n    onToggleHighlightSkolems: () => void,\n    onToggleEmpty: () => void,\n    onToggleRemoveThis: () => void\n}\n\nclass TableViewSidebar extends React.Component<ITableViewSidebarProps> {\n\n    render (): React.ReactNode {\n\n        const {\n            onChooseLayoutDirection,\n            onChooseSortingFunctions,\n            onChooseTableAlignment,\n            onChooseTablesType,\n            onItemsSelected,\n            onToggleBuiltin,\n            onToggleCollapseData,\n            onToggleCollapseLayout,\n            onToggleCollapseSidebar,\n            onToggleCollapseSkolem,\n            onToggleCollapseTables,\n            onToggleEmpty,\n            onToggleHighlightSkolems,\n            onToggleRemoveThis,\n            ...viewState\n        } = this.props;\n\n        return (\n            <SterlingSidebar\n                collapsed={viewState.collapseSidebar}\n                onToggleCollapse={onToggleCollapseSidebar}\n                title='Table View Settings'>\n\n                <TablesSection\n                    {...viewState}\n                    onChooseTablesType={onChooseTablesType}\n                    onItemsSelected={onItemsSelected}\n                    onToggleCollapse={onToggleCollapseTables}/>\n\n                <DataSection\n                    {...viewState}\n                    onToggleBuiltin={onToggleBuiltin}\n                    onToggleCollapse={onToggleCollapseData}\n                    onToggleEmpty={onToggleEmpty}\n                    onToggleHighlightSkolems={onToggleHighlightSkolems}\n                    onToggleRemoveThis={onToggleRemoveThis}/>\n\n                <LayoutSection\n                    {...viewState}\n                    onChooseLayoutDirection={onChooseLayoutDirection}\n                    onChooseSortingFunctions={onChooseSortingFunctions}\n                    onChooseTableAlignment={onChooseTableAlignment}\n                    onToggleCollapse={onToggleCollapseLayout}/>\n\n            </SterlingSidebar>\n        );\n\n    }\n\n\n}\n\nexport default TableViewSidebar;\n","import { Portal } from '@blueprintjs/core';\nimport React from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\ninterface IPopoverRowProps {\n    content: string | React.ReactElement,\n    colors: string[]\n}\n\ninterface IPopoverRowState {\n    enabled: boolean\n}\n\nexport default class PopoverRow extends React.Component<IPopoverRowProps, IPopoverRowState> {\n\n    public state = {\n        enabled: false\n    };\n\n    render (): React.ReactNode {\n\n        const colors = this.props.colors;\n        const thickness = this.state.enabled ? 4 : 2;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <tr onMouseEnter={this._onMouseEnter}\n                            onMouseLeave={this._onMouseLeave}\n                            ref={ref}\n                            style={{\n                                boxShadow: this._buildShadowStyle(colors, thickness)\n                            }}>\n                            {this.props.children}\n                        </tr>\n                    )}\n                </Reference>\n                <Portal>\n                    <Popper\n                        modifiers={{}}\n                        placement='right'>\n                        {({ ref, style, placement }) => (\n                            this.state.enabled &&\n                            <div\n                                ref={ref}\n                                style={{\n                                    ...style,\n                                    padding: (thickness * (colors.length - 1)) + 'px'\n                                }}\n                                data-placement={placement}>\n                                <div className='table-rowpop'>\n                                    {this.props.content}\n                                </div>\n                            </div>\n                        )}\n                    </Popper>\n                </Portal>\n            </Manager>\n        );\n\n    }\n\n    private _buildShadowStyle = (colors: string[], thickness: number): string => {\n        return colors.map((color: string, i: number) => {\n            return `0 0 0 ${(i+1) * thickness}px ${color}`\n        }).join(',');\n    };\n\n    private _onMouseEnter = () => {\n        this.setState({enabled: true});\n    };\n\n    private _onMouseLeave = () => {\n        this.setState({enabled: false});\n    };\n\n}\n","import { AlloySkolem } from 'alloy-ts';\nimport React from 'react';\n\nexport default function SkolemListPopover (skolems: AlloySkolem[], colors: string[]): React.ReactElement {\n\n    return (\n        <>\n            {\n                skolems.map((skolem: AlloySkolem, i: number) => {\n                    return (\n                        <div key={skolem.id()}\n                             style={{backgroundColor: colors[i]}}>\n                            { skolem.name() }\n                        </div>\n                    )\n                })\n            }\n        </>\n    )\n\n}\n","import { Card } from '@blueprintjs/core';\nimport { AlloyField, AlloySignature, AlloySkolem } from 'alloy-ts';\nimport React, { ReactNode } from 'react';\nimport {\n    HorizontalAlignment,\n    LayoutDirection,\n    SigFieldSkolem\n} from '../../sterling/SterlingTypes';\nimport FieldHTMLTable from './stage-components/FieldHTMLTable';\nimport SignatureHTMLTable from './stage-components/SignatureHTMLTable';\nimport SkolemHTMLTable from './stage-components/SkolemHTMLTable';\nimport { FieldTag, SignatureTag, SkolemTag } from './TableTags';\nimport { ITableViewState } from './TableView';\n\nexport interface ITableViewStageProps extends ITableViewState {\n    itemsVisible: SigFieldSkolem[]\n}\n\nclass TableViewStage extends React.Component<ITableViewStageProps> {\n\n    render (): React.ReactNode {\n\n        const tableAlign = this.props.tableAlignment;\n        const tableLayout = this.props.layoutDirection;\n\n        const alignClass =\n            tableAlign === HorizontalAlignment.Left ? 'left' :\n            tableAlign === HorizontalAlignment.Center ? 'center' :\n            tableAlign === HorizontalAlignment.Right ? 'right' : '';\n\n        const layoutClass =\n            tableLayout === LayoutDirection.Row ? 'row' :\n            tableLayout === LayoutDirection.Column ? 'column' : '';\n\n        return <div className={`stage table-stage ${alignClass} ${layoutClass}`} id='stage'>\n            { this._getElements() }\n        </div>\n\n    }\n\n    private _getElements (): ReactNode[] {\n\n        return this.props.itemsVisible.map((item: SigFieldSkolem) => {\n\n            const itemType = item.expressionType();\n\n            if (itemType === 'signature') {\n\n                const props = {\n                    highlightSkolems: this.props.highlightSkolems,\n                    signature: item as AlloySignature,\n                    skolemColors: this.props.skolemColors\n                };\n\n                return (\n                    <Card\n                        key={item.id()}\n                        elevation={2}>\n                        <SignatureTag\n                            fill={true}\n                            signature={item as AlloySignature}\n                            nameFunction={this.props.nameFunction}/>\n                        {SignatureHTMLTable(props)}\n                    </Card>\n                );\n\n            } else if (itemType === 'field') {\n\n                const props = {\n                    field: (item as AlloyField),\n                    highlightSkolems: this.props.highlightSkolems,\n                    nameFunction: this.props.nameFunction,\n                    skolemColors: this.props.skolemColors\n                };\n\n                return (\n                    <Card\n                        key={item.id()}\n                        elevation={2}>\n                        <FieldTag\n                            fill={true}\n                            field={item as AlloyField}\n                            nameFunction={this.props.nameFunction}/>\n                        {FieldHTMLTable(props)}\n                    </Card>\n                );\n\n            } else if (itemType === 'skolem') {\n\n                const props = {\n                    color: 'red',\n                    skolem: (item as AlloySkolem),\n                    nameFunction: this.props.nameFunction\n                };\n\n                return (\n                    <Card\n                        key={item.id()}\n                        elevation={2}>\n                        <SkolemTag\n                            fill={true}\n                            skolem={item as AlloySkolem}\n                            nameFunction={this.props.nameFunction}/>\n                        {SkolemHTMLTable(props)}\n                    </Card>\n                )\n\n            }\n\n            return null;\n\n        });\n\n    }\n\n}\n\nexport default TableViewStage;\n","import { HTMLTable } from '@blueprintjs/core';\nimport { AlloyAtom, AlloySignature, AlloySkolem } from 'alloy-ts';\nimport React from 'react';\nimport PopoverRow from './PopoverRow';\nimport SkolemListPopover from './SkolemListPopover';\n\nexport interface ISignatureHTMLTableProps {\n    highlightSkolems: boolean,\n    signature: AlloySignature,\n    skolemColors: Map<AlloySkolem, string>\n}\n\nexport default function SignatureHTMLTable (props: ISignatureHTMLTableProps) {\n\n    const signature = props.signature;\n    const atoms: AlloyAtom[] = signature.atoms();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <tbody>\n            {\n                atoms.map((atom: AlloyAtom) => {\n\n                    const skolems = atom.skolems();\n\n                    if (props.highlightSkolems && skolems.length) {\n\n                        const colors = skolems.map(s => props.skolemColors.get(s) || '');\n\n                        return (\n                            <PopoverRow\n                                key={atom.id()}\n                                content={SkolemListPopover(skolems, colors)}\n                                colors={colors}>\n                                <td>{ atom.name() }</td>\n                            </PopoverRow>\n                        );\n\n                    } else {\n\n                        return (\n                            <tr key={atom.id()}>\n                                <td>{ atom.name() }</td>\n                            </tr>\n                        );\n\n                    }\n                })\n            }\n            </tbody>\n        </HTMLTable>\n    )\n}\n","import { HTMLTable } from '@blueprintjs/core';\nimport {\n    AlloyAtom,\n    AlloyField,\n    AlloySignature,\n    AlloySkolem,\n    AlloyTuple\n} from 'alloy-ts';\nimport React from 'react';\nimport { SigFieldSkolem } from '../../../sterling/SterlingTypes';\nimport PopoverRow from './PopoverRow';\nimport SkolemListPopover from './SkolemListPopover';\n\n\ninterface IFieldHTMLTableProps {\n    field: AlloyField,\n    highlightSkolems: boolean,\n    nameFunction: (item: SigFieldSkolem) => string,\n    skolemColors: Map<AlloySkolem, string>\n}\n\nexport default function FieldHTMLTable (props: IFieldHTMLTableProps) {\n\n    const types: AlloySignature[] = props.field.types();\n    const tuples: AlloyTuple[] = props.field.tuples();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <thead>\n            <tr>\n            {\n                types.map((sig: AlloySignature, i: number) => (\n                    <th key={sig.id() + i}>\n                        {props.nameFunction(sig)}\n                    </th>\n                ))\n            }\n            </tr>\n            </thead>\n            <tbody>\n            {\n                tuples.map((tuple: AlloyTuple) => {\n\n                    const skolems = tuple.skolems();\n\n                    if (props.highlightSkolems && skolems.length) {\n\n                        const colors = skolems.map(s => props.skolemColors.get(s) || '');\n\n                        return (\n                            <PopoverRow\n                                key={tuple.id()}\n                                content={SkolemListPopover(skolems, colors)}\n                                colors={colors}>\n                                {\n                                    tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                        <td key={tuple.id() + '[' + i + ']'}>\n                                            {atom.name()}\n                                        </td>\n                                    ))\n                                }\n                            </PopoverRow>\n                        );\n\n                    } else {\n\n                        return (\n                            <tr key={tuple.id()}>\n                                {\n                                    tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                        <td key={tuple.id() + '[' + i + ']'}>\n                                            {atom.name()}\n                                        </td>\n                                    ))\n                                }\n                            </tr>\n                        )\n\n                    }\n\n                })\n            }\n            </tbody>\n        </HTMLTable>\n    )\n\n}\n","import { HTMLTable } from '@blueprintjs/core';\nimport { AlloyAtom, AlloySignature, AlloySkolem, AlloyTuple } from 'alloy-ts';\nimport React from 'react';\nimport { SigFieldSkolem } from '../../../sterling/SterlingTypes';\n\ninterface ISkolemHTMLTableProps {\n    color: string,\n    nameFunction: (item: SigFieldSkolem) => string,\n    skolem: AlloySkolem\n}\n\nexport default function SkolemHTMLTable (props: ISkolemHTMLTableProps) {\n\n    const types: AlloySignature[] = props.skolem.types();\n    const tuples: AlloyTuple[] = props.skolem.tuples();\n\n    return (\n        <HTMLTable\n            bordered={true}\n            condensed={true}\n            striped={true}>\n            <thead>\n            <tr>\n            {\n                types.map((sig: AlloySignature, i: number) => (\n                    <th key={sig.id() + i}>\n                        {props.nameFunction(sig)}\n                    </th>\n                ))\n            }\n            </tr>\n            </thead>\n            <tbody style={{borderColor: props.color}}>\n            {\n                tuples.map((tuple: AlloyTuple) => (\n                    <tr key={tuple.id()}>\n                        {\n                            tuple.atoms().map((atom: AlloyAtom, i: number) => (\n                                <td key={tuple.id() + '[' + i + ']'}>\n                                    {atom.name()}\n                                </td>\n                            ))\n                        }\n                    </tr>\n                ))\n            }\n            </tbody>\n        </HTMLTable>\n    );\n\n}\n","import { AlloyInstance, AlloySkolem, filtering, sorting } from 'alloy-ts';\nimport React from 'react';\nimport {\n    AlloyNameFn,\n    HorizontalAlignment, ISterlingViewProps,\n    LayoutDirection,\n    SigFieldSkolem,\n    TableSortFunction,\n    TablesType\n} from '../../sterling/SterlingTypes';\nimport { nameFunction } from './TableUtil';\nimport TableViewSidebar from './TableViewSidebar';\nimport TableViewStage from './TableViewStage';\n\nexport interface ITableViewProps extends ISterlingViewProps {\n    data: AlloyInstance | null,\n    visible: boolean\n}\n\nexport interface ITableViewState {\n    collapseData: boolean,\n    collapseLayout: boolean,\n    collapseSidebar: boolean,\n    collapseSkolem: boolean,\n    collapseTables: boolean,\n    highlightSkolems: boolean,\n    items: SigFieldSkolem[],\n    itemsSelected: SigFieldSkolem[],\n    layoutDirection: LayoutDirection,\n    nameFunction: AlloyNameFn,\n    removeBuiltin: boolean,\n    removeEmpty: boolean,\n    removeThis: boolean,\n    skolemColors: Map<AlloySkolem, string>,\n    sortPrimary: TableSortFunction,\n    sortSecondary: TableSortFunction,\n    tableAlignment: HorizontalAlignment,\n    tables: TablesType\n}\n\nclass TableView extends React.Component<ITableViewProps, ITableViewState> {\n\n    constructor (props: ITableViewProps) {\n\n        super(props);\n\n        const nF = nameFunction(true);\n        const sH = props.data ? this._assignSkolemColors(props.data.skolems()) : new Map();\n\n        this.state = {\n            collapseData: false,\n            collapseLayout: false,\n            collapseSidebar: false,\n            collapseSkolem: false,\n            collapseTables: false,\n            highlightSkolems: true,\n            items: [],\n            itemsSelected: [],\n            layoutDirection: LayoutDirection.Row,\n            nameFunction: nF,\n            removeBuiltin: true,\n            removeEmpty: true,\n            removeThis: true,\n            skolemColors: sH,\n            sortPrimary: sorting.groupSort(),\n            sortSecondary: sorting.sizeSort(),\n            tableAlignment: HorizontalAlignment.Left,\n            tables: TablesType.All\n        };\n\n    }\n\n    componentDidMount (): void {\n\n        if (this.props.data !== null) {\n\n            const instance = this.props.data;\n            const alpha = sorting.alphabeticalSort(nameFunction(true));\n            const builtin = sorting.builtinSort();\n\n            const items = [\n                ...instance.signatures().sort(builtin).sort(alpha),\n                ...instance.fields().sort(alpha),\n                ...instance.skolems().sort(alpha)\n            ];\n\n            this.setState({\n                items: items,\n                itemsSelected: [],\n                skolemColors: this._assignSkolemColors(instance.skolems())\n            });\n\n        }\n\n    }\n\n    componentDidUpdate (prevProps: ITableViewProps, prevState: ITableViewState): void {\n\n        console.log('update');\n\n        // We've recieved a new instance to render\n        const newInstance = this.props.data;\n\n        // Only run these updates if the instance has been changed\n        if (newInstance !== prevProps.data) {\n\n            // If there actually isn't a new instance, get rid of all items\n            if (!newInstance) {\n\n                this.setState({\n                    items: [],\n                    itemsSelected: [],\n                    skolemColors: new Map()\n                });\n\n            } else {\n\n                // Compare new items with old items so that we can maintain\n                // the list of selected items as we step through instances.\n                // Note that the order established here is the order the items\n                // will appear in in the sidebar selector\n\n                const alpha = sorting.alphabeticalSort(nameFunction(true));\n                const builtin = sorting.builtinSort();\n\n                const newItems = [\n                    ...newInstance.signatures().sort(builtin).sort(alpha),\n                    ...newInstance.fields().sort(alpha),\n                    ...newInstance.skolems().sort(alpha)\n                ];\n\n                const oldSelected = prevState.itemsSelected.map(item => item.id());\n                const newSelected = newItems.filter(item => oldSelected.includes(item.id()));\n\n                this.setState({\n                    items: newItems,\n                    itemsSelected: newSelected,\n                    skolemColors: this._assignSkolemColors(newInstance.skolems())\n                });\n\n            }\n\n        }\n\n    }\n\n    render (): React.ReactNode {\n\n        if (!this.props.visible) return null;\n\n        const state = this.state;\n        const stage = (\n            <TableViewStage\n                {...state}\n                itemsVisible={this._getVisibleItems()}/>\n        );\n        const sidebar = (\n            <TableViewSidebar\n                {...state}\n                onChooseLayoutDirection={this._onChooseLayoutDirection}\n                onChooseSortingFunctions={this._onChooseSortingFunctions}\n                onChooseTableAlignment={this._onChooseTableAlignment}\n                onChooseTablesType={this._onChooseTablesType}\n                onItemsSelected={this._onItemsSelected}\n                onToggleBuiltin={this._onToggleBuiltin}\n                onToggleCollapseData={this._onToggleCollapseData}\n                onToggleCollapseLayout={this._onToggleCollapseLayout}\n                onToggleCollapseSidebar={this._onToggleCollapseSidebar}\n                onToggleCollapseSkolem={this._onToggleCollapseSkolem}\n                onToggleCollapseTables={this._onToggleCollapseTables}\n                onToggleHighlightSkolems={this._onToggleHighlightSkolems}\n                onToggleEmpty={this._onToggleEmpty}\n                onToggleRemoveThis={this._onToggleRemoveThis}\n            />\n        );\n\n        return (\n            <>{sidebar}{stage}</>\n        );\n\n    }\n\n    private _assignSkolemColors = (skolems: AlloySkolem[]): Map<AlloySkolem, string> => {\n\n        const colors = [\n            \"#2965CC\", \"#29A634\", \"#D99E0B\", \"#D13913\", \"#8F398F\",\n            \"#00B3A4\", \"#DB2C6F\", \"#9BBF30\", \"#96622D\", \"#7157D9\"\n        ];\n\n        const colormap = new Map();\n\n        skolems.forEach((skolem: AlloySkolem, i: number) => {\n            colormap.set(skolem, colors[i % skolems.length]);\n        });\n\n        return colormap;\n\n    };\n\n    private _getVisibleItems = (): SigFieldSkolem[] => {\n\n        const type = this.state.tables;\n\n        const items = [...this.state.items];\n        const itemsVisible =\n            type === TablesType.All ? items :\n                type === TablesType.Signatures ? items.filter(filtering.keepSignatures) :\n                    type === TablesType.Fields ? items.filter(filtering.keepFields) :\n                        type === TablesType.Skolems ? items.filter(filtering.keepSkolems) :\n                            type === TablesType.Select ? [...this.state.itemsSelected] : [];\n\n\n        const pass = () => true;\n        const itemsFiltered = type === TablesType.Select\n            ? itemsVisible\n            : itemsVisible\n                .filter(this.state.removeBuiltin ? filtering.removeBuiltins : pass)\n                .filter(this.state.removeEmpty ? filtering.removeEmptys : pass)\n                .filter(this.state.highlightSkolems ? filtering.removeSkolems : pass);\n\n        return itemsFiltered\n            .sort(this.state.sortSecondary)\n            .sort(this.state.sortPrimary);\n\n    };\n    \n    private _onChooseLayoutDirection = (layout: LayoutDirection): void => {\n        this.setState({layoutDirection: layout});\n    };\n\n    private _onChooseSortingFunctions = (primary: TableSortFunction, secondary: TableSortFunction): void => {\n        this.setState({sortPrimary: primary, sortSecondary: secondary});\n    };\n    \n    private _onChooseTableAlignment = (align: HorizontalAlignment): void => {\n        this.setState({tableAlignment: align});\n    };\n    \n    private _onChooseTablesType = (type: TablesType): void => {\n        this.setState({tables: type});\n    };\n    \n    private _onItemsSelected = (items: SigFieldSkolem[]): void => {\n        this.setState({itemsSelected: items, tables: TablesType.Select});\n    };\n    \n    private _onToggleBuiltin = (): void => {\n        this.setState({removeBuiltin: !this.state.removeBuiltin});\n    };\n\n    private _onToggleCollapseSidebar = () => {\n        const curr = this.state.collapseSidebar;\n        this.setState({collapseSidebar: !curr});\n    };\n\n    private _onToggleCollapseData = (): void => {\n        this.setState({collapseData: !this.state.collapseData});\n    };\n\n    private _onToggleCollapseLayout = (): void => {\n        this.setState({collapseLayout: !this.state.collapseLayout});\n    };\n\n    private _onToggleCollapseSkolem = (): void => {\n        this.setState({collapseSkolem: !this.state.collapseSkolem});\n    };\n\n    private _onToggleCollapseTables = (): void => {\n        this.setState({collapseTables: !this.state.collapseTables});\n    };\n    \n    private _onToggleEmpty = (): void => {\n        this.setState({removeEmpty: !this.state.removeEmpty});\n    };\n\n    private _onToggleHighlightSkolems = (): void => {\n        const newTables = this.state.tables === TablesType.Skolems ? TablesType.All : this.state.tables;\n        this.setState({\n            highlightSkolems: !this.state.highlightSkolems,\n            tables: newTables\n        });\n    };\n    \n    private _onToggleRemoveThis = (): void => {\n        const newRemove = !this.state.removeThis;\n        const newNameFn = nameFunction(newRemove);\n        this.setState({removeThis: newRemove, nameFunction: newNameFn});\n    };\n\n}\n\nexport default TableView;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { NonIdealState } from '@blueprintjs/core';\nimport React from 'react';\nimport { SterlingConnection } from './SterlingConnection';\nimport { ISterlingNavbarProps } from './SterlingNavbar';\nimport { ISterlingUIView } from './SterlingTypes';\n\ninterface ISterlingProps {\n    connection: SterlingConnection,\n    navbar: React.ComponentType<ISterlingNavbarProps>,\n    views: ISterlingUIView[],\n    message?: string\n}\n\ninterface ISterlingState {\n    data: any[],\n    view: ISterlingUIView\n}\n\nclass Sterling extends React.Component<ISterlingProps, ISterlingState> {\n\n    constructor (props: ISterlingProps) {\n\n        super(props);\n\n        this.state = {\n            data: [],\n            view: props.views[0]\n        }\n\n    }\n\n    componentDidMount (): void {\n\n        this._initializeConnection();\n\n    }\n\n    render (): React.ReactNode {\n\n        const props = this.props;\n        const state = this.state;\n        const Navbar = props.navbar;\n\n        return (\n            <div className={'sterling'}>\n                <Navbar\n                    connection={props.connection}\n                    onRequestView={this._setView}\n                    view={state.view}\n                    views={props.views}/>\n                {\n                    state.data.length\n                        ? this._views()\n                        : this._placeholder()\n                }\n            </div>\n        )\n\n    }\n\n    private _initializeConnection = () => {\n\n        const connection = this.props.connection;\n\n        connection\n            .on('connect', () => {\n                connection.request('current');\n            })\n            .on('instance', (instance: any) => {\n                const transforms = this.props.views.map(view => view.transform);\n                this.setState({\n                    data: transforms.map(t => t ? t(instance) : instance)\n                });\n            });\n\n        connection.connect();\n\n    };\n\n    private _placeholder = (): React.ReactNode => {\n\n        return <NonIdealState\n            description={this.props.message || 'Nothing to display'}\n            icon={this.state.view.icon}\n            title={'Welcome to Sterling'}/>\n\n    };\n\n    private _setView = (view: ISterlingUIView) => {\n\n        this.setState({view: view});\n\n    };\n\n    private _views = (): React.ReactNode => {\n\n        const props = this.props;\n        const state = this.state;\n\n        return <div className={'sterling-view'}>\n            {\n                props.views.map((view: ISterlingUIView, i: number) => {\n\n                    const View = view.view;\n                    const data = state.data[i];\n\n                    return <View\n                        connection={props.connection}\n                        data={data}\n                        key={view.name}\n                        visible={state.view === view}/>\n\n                })\n            }\n        </div>\n\n    }\n\n}\n\nexport default Sterling;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AlloyConnection } from './alloy/AlloyConnection';\nimport AlloyNavbar from './alloy/AlloyNavbar';\nimport TableView from './alloy/table-view/TableView';\nimport * as serviceWorker from './serviceWorker';\nimport Sterling from './sterling/Sterling';\nimport { ISterlingUIView } from './sterling/SterlingTypes';\nimport './styles/index.scss';\n\nconst alloy = new AlloyConnection();\n\nconst table: ISterlingUIView = {\n    name: 'Table',\n    icon: 'th',\n    view: TableView\n};\n\nconst ui = (\n    <Sterling\n        connection={alloy}\n        message={'Use Alloy to generate an instance.'}\n        navbar={AlloyNavbar}\n        views={[table]}/>\n);\n\nReactDOM.render(ui, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}